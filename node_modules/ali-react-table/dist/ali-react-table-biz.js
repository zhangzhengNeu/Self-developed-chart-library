'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('classnames');
var React = require('react');
var React__default = _interopDefault(React);
require('rxjs');
require('rxjs/operators');
var treeMode = require('./chunks/ali-react-table-treeMode-d04f1638.js');
var styled = require('styled-components');
var styled__default = _interopDefault(styled);
var visible = require('./chunks/ali-react-table-visible-c1d9a880.js');
require('lodash.merge');
require('resize-observer-polyfill');
require('prop-types');

/**
 * Copyright IBM Corp. 2019, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
 */

var _ref2 =
/*#__PURE__*/

/*#__PURE__*/
React__default.createElement("path", {
  d: "M24 4H26V28H24zM18 6V26H14V6h4m0-2H14a2 2 0 00-2 2V26a2 2 0 002 2h4a2 2 0 002-2V6a2 2 0 00-2-2zM6 4H8V28H6z"
});

var Column16 = /*#__PURE__*/React__default.forwardRef(function Column16(_ref, ref) {
  var children = _ref.children,
      rest = treeMode._objectWithoutProperties(_ref, ["children"]);

  return /*#__PURE__*/React__default.createElement(treeMode.Icon, treeMode._extends({
    width: 16,
    height: 16,
    viewBox: "0 0 32 32",
    xmlns: "http://www.w3.org/2000/svg",
    fill: "currentColor",
    ref: ref
  }, rest), _ref2, children);
});

/**
 * Copyright IBM Corp. 2019, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
 */

var _ref2$1 =
/*#__PURE__*/

/*#__PURE__*/
React__default.createElement("path", {
  d: "M13 7L12.3 6.3 8.5 10.1 8.5 1 7.5 1 7.5 10.1 3.7 6.3 3 7 8 12zM13 12v2H3v-2H2v2l0 0c0 .6.4 1 1 1h10c.6 0 1-.4 1-1l0 0v-2H13z"
});

var Download16 = /*#__PURE__*/React__default.forwardRef(function Download16(_ref, ref) {
  var children = _ref.children,
      rest = treeMode._objectWithoutProperties(_ref, ["children"]);

  return /*#__PURE__*/React__default.createElement(treeMode.Icon, treeMode._extends({
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    xmlns: "http://www.w3.org/2000/svg",
    fill: "currentColor",
    ref: ref
  }, rest), _ref2$1, children);
});

const TreeDiv = styled__default.div `
  .group {
    margin: 8px 0;
    .group {
      margin: 4px 0;
    }
  }

  .line {
    height: 28px;
    display: flex;
    align-items: center;

    .checkbox {
      flex: 0 0 50%;
    }
  }

  .group-header {
    height: 32px;
    display: flex;
    align-items: center;
  }

  .group-content {
    margin-left: 16px;
  }
`;
const Header = styled__default.header `
  flex: 0 0 40px;
  display: flex;
  align-items: center;
  border-bottom: 1px solid var(--bd-color);
  padding: 0 20px;

  .actions {
    margin-left: auto;
    margin-right: 20px;
    > .action {
      margin-left: 8px;
      color: var(--action-color);
      cursor: pointer;
      font-size: 14px;
    }
  }
`;
const Footer = styled__default.footer `
  flex: 0 0 48px;
  display: flex;
  justify-content: center;
  align-items: center;
  border-top: 1px solid var(--bd-color);
  margin-top: auto;
`;
CustomColumnsDialog.defaultProps = {
    showCheckAll: true,
    showUncheckAll: true,
};
function makeStyledDrawer(Drawer) {
    return styled__default(Drawer) `
    --action-color: #5584ff;
    --bd-color: #e8e8e8;

    .hippo-drawer-header,
    .next-dialog-header {
      display: none;
    }

    .next-drawer-body,
    .hippo-drawer-body,
    .next-dialog-body {
      padding: 0;
      display: flex;
      flex-flow: column;
      height: 100%;

      > main {
        overflow: auto;
        padding: 20px;
      }
    }
  `;
}
const StyledDiv = makeStyledDrawer('div');
/** @deprecated 表格操作栏与自定义列对话框 相关 API 将会在 1.0 版本被移除，请勿使用 */
function CustomColumnsDialog({ trigger, defaultVisible, defaultCheckedCodes, enforceCheckedCodes, checkedCodes, onChangeCheckedCodes, columns, components, style, className, showCheckAll, showUncheckAll, drawerProps, drawerComponent: drawerComponentProp, }) {
    const { Button, Checkbox, PageDialog, Drawer } = components;
    if (process.env.NODE_ENV !== 'production' && treeMode.STYLED_VERSION === 'v3' && drawerComponentProp == null) {
        console.warn('[ali-react-table] 自定义列对话框组件在配合 styled-components@3 使用时，' +
            '请从上层传入 drawerComponent 以提供经过样式处理的 Drawer 组件\n' +
            '\n' +
            'const StyledDrawer = CustomColumnsDialog.makeStyledDrawer(Drawer)\n' +
            '// 或是 const StyledDrawer = CustomColumnsDialog.makeStyledDrawer(PageDialog)\n' +
            '\n' +
            '// 然后将 StyledDrawer 传递给 CustomColumnsDialog 组件：\n' +
            '<CustomColumnsDialog drawerComponent={StyledDrawer} {...othersProps} />\n' +
            '\n' +
            '如果你是通过表格操作栏使用自定义列对话框组件，那么要在 feature 中设置 drawerComponent：\n' +
            "features: [ { type: 'custom-columns', drawerComponent: StyledDrawer } ]");
    }
    const DrawerComponent = Drawer !== null && Drawer !== void 0 ? Drawer : PageDialog;
    const [visible, setVisible] = React.useState(Boolean(defaultVisible));
    const onOpen = () => setVisible(true);
    const onClose = () => setVisible(false);
    const [editingCheckedCodes, updateEditingCheckedCodes] = React.useState(checkedCodes);
    const editingCheckedCodeSet = new Set(editingCheckedCodes);
    React.useEffect(() => {
        if (visible) {
            updateEditingCheckedCodes(checkedCodes);
        }
    }, [visible]);
    const onOk = () => {
        onChangeCheckedCodes(editingCheckedCodes);
        onClose();
    };
    const onCheck = (targetCodes, action) => {
        if (action === 'check') {
            updateEditingCheckedCodes(editingCheckedCodes.concat(targetCodes.filter((code) => !editingCheckedCodeSet.has(code))));
        }
        else {
            const targetCodeSet = new Set(targetCodes);
            updateEditingCheckedCodes(editingCheckedCodes.filter((code) => !targetCodeSet.has(code)));
        }
    };
    function dfs(columns) {
        let lineCount = 0;
        let tempLine = [];
        const nodes = [];
        const codes = [];
        let allCheck = true;
        let anyCheck = false;
        for (let colIndex = 0; colIndex < columns.length; colIndex++) {
            const col = columns[colIndex];
            if (treeMode.isLeafNode(col)) {
                if (col.code) {
                    const enforce = enforceCheckedCodes && enforceCheckedCodes.includes(col.code);
                    const checked = editingCheckedCodeSet.has(col.code);
                    if (!enforce) {
                        codes.push(col.code);
                        if (checked) {
                            anyCheck = true;
                        }
                        else {
                            allCheck = false;
                        }
                    }
                    addToTempLine(React__default.createElement(Checkbox, { key: colIndex, className: "checkbox", checked: checked || enforce, disabled: enforce, onChange: () => onCheck([col.code], checked ? 'uncheck' : 'check') }, col.name));
                } // else 忽略 col.code 为空的 column
            }
            else {
                const sub = dfs(col.children);
                if (!sub.allCheck) {
                    allCheck = false;
                }
                if (sub.anyCheck) {
                    anyCheck = true;
                }
                codes.push(...sub.codes);
                flushTempLine(true);
                nodes.push(React__default.createElement("div", { className: "group", key: colIndex },
                    React__default.createElement("div", { className: "group-header" },
                        React__default.createElement(Checkbox, { className: "checkbox", checked: sub.allCheck, indeterminate: !sub.allCheck && sub.anyCheck, onChange: () => onCheck(sub.codes, sub.allCheck ? 'uncheck' : 'check') }, col.name)),
                    React__default.createElement("div", { className: "group-content" }, sub.nodes)));
            }
        }
        flushTempLine(true);
        return { nodes, allCheck, anyCheck, codes };
        function addToTempLine(node) {
            flushTempLine(false);
            tempLine.push(node);
        }
        function flushTempLine(force) {
            const FLAT_COUNT = 2;
            if ((force && tempLine.length > 0) || tempLine.length >= FLAT_COUNT) {
                nodes.push(React__default.createElement("div", { className: "line", key: `line-${lineCount}` }, tempLine));
                lineCount += 1;
                tempLine = [];
            }
        }
    }
    const dfsResult = dfs(columns);
    const props = Object.assign({ title: null, footer: null, visible,
        onClose,
        className, style: Object.assign({ width: 500 }, style) }, drawerProps);
    const content = (React__default.createElement(React__default.Fragment, null,
        React__default.createElement(Header, null,
            React__default.createElement("span", { style: { fontSize: 14 } }, "\u81EA\u5B9A\u4E49\u663E\u793A\u5217"),
            React__default.createElement("div", { className: "actions" },
                defaultCheckedCodes && (React__default.createElement("span", { className: "action", onClick: () => updateEditingCheckedCodes(defaultCheckedCodes) }, "\u6062\u590D\u9ED8\u8BA4")),
                showCheckAll && (React__default.createElement("span", { className: "action", onClick: () => onCheck(dfsResult.codes, 'check') }, "\u5168\u9009")),
                showUncheckAll && (React__default.createElement("span", { className: "action", onClick: () => onCheck(dfsResult.codes, 'uncheck') }, "\u5168\u4E0D\u9009")))),
        React__default.createElement("main", null,
            React__default.createElement(TreeDiv, null, dfsResult.nodes)),
        React__default.createElement(Footer, null,
            React__default.createElement(Button, { type: "primary", onClick: onOk }, "\u786E\u8BA4"),
            React__default.createElement(Button, { style: { marginLeft: 8 }, onClick: onClose }, "\u53D6\u6D88"))));
    return (React__default.createElement(React__default.Fragment, null,
        trigger(onOpen),
        drawerComponentProp
            ? React__default.createElement(drawerComponentProp, props, content)
            : React__default.createElement(StyledDiv, Object.assign({ as: DrawerComponent }, props), content)));
}
CustomColumnsDialog.makeStyledDrawer = makeStyledDrawer;

const OperationBarDiv = styled__default.div `
  z-index: 50;
  height: 32px;
  display: flex;
  align-items: center;
  background-color: white;

  .item {
    margin-left: 16px;
    &:first-child {
      margin-left: 0;
    }
  }

  .group {
    display: flex;
    align-items: center;
  }

  .separator {
    margin-left: auto;
    margin-right: auto;
  }

  .action {
    display: flex;
    align-items: center;
    color: var(--action-color);
    cursor: pointer;
    padding: 4px;

    > .icon {
      fill: currentColor;
      margin-right: 2px;
    }
  }
`;
/** @deprecated 表格操作栏与自定义列对话框 相关 API 将会在 1.0 版本被移除，请勿使用 */
function useOperationBar({ features, columns, components, actionColor = '#23a3ff', }) {
    var _a;
    const { Checkbox } = components;
    const codeGroups = React.useMemo(() => {
        const leafColumns = treeMode.collectNodes(columns, 'leaf-only');
        const defaultVisible = leafColumns.filter((col) => { var _a; return (_a = col.features) === null || _a === void 0 ? void 0 : _a.defaultVisible; }).map((col) => col.code);
        const enforceVisible = leafColumns.filter((col) => { var _a; return (_a = col.features) === null || _a === void 0 ? void 0 : _a.enforceVisible; }).map((col) => col.code);
        return { defaultVisible, enforceVisible };
    }, [columns]);
    const [visibleCodes, onChangeVisibleCodes] = React.useState(codeGroups.defaultVisible);
    const [map, setMap] = React.useState({});
    const transforms = [];
    const nodes = [];
    for (let index = 0; index < features.length; index++) {
        const feat = features[index];
        if (feat.type === 'separator') {
            nodes.push(React__default.createElement("span", { className: "item separator", key: index }));
        }
        else if (feat.type === 'custom-columns') {
            if (process.env.NODE_ENV !== 'production') {
                if (codeGroups.enforceVisible.length === 0 && codeGroups.defaultVisible.length === 0) {
                    console.warn('ali-react-table <CustomColumnsDialog /> 表格缺少默认可见列，请通过 column.features.defaultVisible ' +
                        '或 column.features.enforceVisible 来设置默认可见的列', columns);
                }
            }
            nodes.push(React__default.createElement(CustomColumnsDialog, { key: index, columns: columns, drawerComponent: feat.drawerComponent, checkedCodes: visibleCodes, onChangeCheckedCodes: onChangeVisibleCodes, defaultCheckedCodes: codeGroups.defaultVisible, enforceCheckedCodes: codeGroups.enforceVisible, trigger: (onOpen) => (React__default.createElement("span", { className: "item action", onClick: onOpen },
                    React__default.createElement(Column16, { className: "icon" }),
                    "\u81EA\u5B9A\u4E49\u5217")), components: components, style: { '--action-color': actionColor } }));
            transforms.push(visible.makeVisibleTransform(visibleCodes.concat(codeGroups.enforceVisible)));
        }
        else if (feat.type === 'export') {
            nodes.push(React__default.createElement("span", { key: index, className: "item action", onClick: feat.onExport },
                React__default.createElement(Download16, { className: "icon" }),
                "\u5BFC\u51FA"));
        }
        else if (feat.type === 'click') {
            nodes.push(React__default.createElement("span", { key: index, className: "item action", onClick: feat.onClick }, feat.title));
        }
        else if (feat.type === 'toggle') {
            const checked = (_a = map[feat.key]) !== null && _a !== void 0 ? _a : false;
            nodes.push(React__default.createElement(Checkbox, { key: index, className: "item", checked: checked, onChange: () => setMap(Object.assign(Object.assign({}, map), { [feat.key]: !map[feat.key] })) }, feat.title));
            if (feat.transform) {
                transforms.push(feat.transform(checked));
            }
        }
        else if (feat.type === 'custom') {
            if (feat.node) {
                nodes.push(React__default.createElement("span", { className: "item", key: index }, feat.node));
            }
            if (feat.transform) {
                transforms.push(feat.transform);
            }
        }
        else {
            throw new Error('Unsupported action');
        }
    }
    const view = React.useCallback((props) => (React__default.createElement(OperationBarDiv, Object.assign({}, props, { style: Object.assign({ '--action-color': actionColor }, props.style) }))), [OperationBarDiv, actionColor]);
    return { transforms, nodes, view };
}

// todo 在 1.0 版本的时候 移除此文件
console.warn("[ali-react-table] 从 'ali-react-table/biz' 导入符号已经过时，请直接从 'ali-react-table' 导入符号.");
const isDev = process.env.NODE_ENV !== 'production';
function deprecateMessage(oldName, newName) {
    return `[ali-react-table] ${oldName} 已经过时, 请使用 ${newName} 代替`;
}
function deprecate(fn, oldName, newName) {
    let warned = false;
    return ((...args) => {
        if (isDev && !warned) {
            warned = true;
            console.warn(deprecateMessage(oldName, newName));
        }
        return fn(...args);
    });
}
/** @deprecated [ali-react-table] transformColumn 已经过时, 请使用 traverseColumn 代替 */
const transformColumn = deprecate(visible.traverseColumn, 'transformColumn', 'traverseColumn');
/** @deprecated commonTransforms 已经过时，请直接从 ali-react-table 引入相关的 api */
const commonTransforms = {
    /** @deprecated commonTransforms 已经过时，请直接从 ali-react-table 引入相关的 api */
    get autoRowSpan() {
        isDev && console.warn(deprecateMessage('commonTransforms.autoRowSpan', 'makeAutoRowSpanTransform'));
        return visible.makeAutoRowSpanTransform;
    },
    /** @deprecated commonTransforms 已经过时，请直接从 ali-react-table 引入相关的 api */
    get buildTree() {
        isDev && console.warn(deprecateMessage('commonTransforms.buildTree', 'makeBuildTreeTransform'));
        return visible.makeBuildTreeTransform;
    },
    /** @deprecated commonTransforms 已经过时，请直接从 ali-react-table 引入相关的 api */
    get columnHover() {
        isDev && console.warn(deprecateMessage('commonTransforms.columnHover', 'makeColumnHoverTransform'));
        return visible.makeColumnHoverTransform;
    },
    /** @deprecated commonTransforms 已经过时，请直接从 ali-react-table 引入相关的 api */
    get columnRangeHover() {
        isDev && console.warn(deprecateMessage('commonTransforms.columnRangeHover', 'makeColumnRangeHoverTransform'));
        return visible.makeColumnRangeHoverTransform;
    },
    /** @deprecated commonTransforms 已经过时，请直接从 ali-react-table 引入相关的 api */
    get columnResize() {
        isDev && console.warn(deprecateMessage('commonTransforms.columnResize', 'makeColumnResizeTransform'));
        return visible.makeColumnResizeTransform;
    },
    /** @deprecated commonTransforms 已经过时，请直接从 ali-react-table 引入相关的 api */
    get flatten() {
        isDev && console.warn(deprecateMessage('commonTransforms.flatten', 'makeFlattenTransform'));
        return visible.makeFlattenTransform;
    },
    /** @deprecated commonTransforms 已经过时，请直接从 ali-react-table 引入相关的 api */
    get orderField() {
        isDev && console.warn(deprecateMessage('commonTransforms.orderField', 'makeOrderFieldTransform'));
        return visible.makeOrderFieldTransform;
    },
    /** @deprecated commonTransforms 已经过时，请直接从 ali-react-table 引入相关的 api */
    get sort() {
        isDev && console.warn(deprecateMessage('commonTransforms.sort', 'makeSortTransform'));
        return visible.makeSortTransform;
    },
    /** @deprecated commonTransforms 已经过时，请直接从 ali-react-table 引入相关的 api */
    get tips() {
        isDev && console.warn(deprecateMessage('commonTransforms.tips', 'makeTipsTransform'));
        return visible.makeTipsTransform;
    },
    /** @deprecated commonTransforms 已经过时，请直接从 ali-react-table 引入相关的 api */
    get treeMode() {
        isDev && console.warn(deprecateMessage('commonTransforms.treeMode', 'makeTreeModeTransform'));
        return treeMode.makeTreeModeTransform;
    },
    /** @deprecated commonTransforms 已经过时，请直接从 ali-react-table 引入相关的 api */
    get visible() {
        isDev && console.warn(deprecateMessage('commonTransforms.visible', 'makeVisibleTransform'));
        return visible.makeVisibleTransform;
    },
    /** @deprecated commonTransforms 已经过时，请直接从 ali-react-table 引入相关的 api */
    get treeMetaSymbol() {
        isDev &&
            console.warn(`[ali-react-table] commonTransforms.treeMetaSymbol 已经过时, 请直接从 ali-react-table 导入 treeMetaSymbol`);
        return treeMode.treeMetaSymbol;
    },
};

exports.BaseTable = treeMode.BaseTable;
exports.Classes = treeMode.Classes;
exports.collectNodes = treeMode.collectNodes;
exports.getTreeDepth = treeMode.getTreeDepth;
exports.groupBy = treeMode.groupBy;
exports.internals = treeMode.internals;
exports.isLeafNode = treeMode.isLeafNode;
exports.makeTreeModeTransform = treeMode.makeTreeModeTransform;
exports.treeMetaSymbol = treeMode.treeMetaSymbol;
exports.useTreeModeTransform = treeMode.useTreeModeTransform;
exports.applyTransforms = visible.applyTransforms;
exports.buildTree = visible.buildTree;
exports.exportTableAsExcel = visible.exportTableAsExcel;
exports.layeredSort = visible.layeredSort;
exports.makeAutoRowSpanTransform = visible.makeAutoRowSpanTransform;
exports.makeBuildTreeTransform = visible.makeBuildTreeTransform;
exports.makeColumnHoverTransform = visible.makeColumnHoverTransform;
exports.makeColumnRangeHoverTransform = visible.makeColumnRangeHoverTransform;
exports.makeColumnResizeTransform = visible.makeColumnResizeTransform;
exports.makeFlattenTransform = visible.makeFlattenTransform;
exports.makeOrderFieldTransform = visible.makeOrderFieldTransform;
exports.makeSortTransform = visible.makeSortTransform;
exports.makeTipsTransform = visible.makeTipsTransform;
exports.makeVisibleTransform = visible.makeVisibleTransform;
exports.mergeCellProps = visible.mergeCellProps;
exports.proto = visible.proto;
exports.smartCompare = visible.smartCompare;
exports.traverseColumn = visible.traverseColumn;
exports.useColumnHoverRangeTransform = visible.useColumnHoverRangeTransform;
exports.useColumnHoverTransform = visible.useColumnHoverTransform;
exports.useColumnResizeTransform = visible.useColumnResizeTransform;
exports.useSortTransform = visible.useSortTransform;
exports.CustomColumnsDialog = CustomColumnsDialog;
exports.commonTransforms = commonTransforms;
exports.transformColumn = transformColumn;
exports.useOperationBar = useOperationBar;
