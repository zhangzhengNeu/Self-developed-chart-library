/* @xmly/rocket-chart version : 1.5.0-beta1 */
import React, { forwardRef, createElement, useRef, useState, useEffect, useCallback, useLayoutEffect, useMemo, useDebugValue, Children, isValidElement, cloneElement, memo, useImperativeHandle, Fragment as Fragment$2, createContext, useContext, Component } from 'react';
import ReactDOM, { findDOMNode, createPortal } from 'react-dom';
import echarts from 'echarts';
import html2canvas from 'html2canvas';
import { collectNodes as collectNodes$1, makeSortTransform, makeColumnResizeTransform, applyTransforms, BaseTable as BaseTable$1 } from 'ali-react-table';
import { merge as merge$2, debounce as debounce$2, isFunction as isFunction$3, cloneDeep, every, isPlainObject, isObject as isObject$2, isArray as isArray$1, differenceWith, isEqual, pick } from 'lodash-es';
import numeral from 'numeral';
import styled__default, { createGlobalStyle } from 'styled-components';
import { createAggregateFunction } from 'dvt-aggregation';
import ecStat from 'echarts-stat';
import dayjs from 'dayjs';
import NP from 'number-precision';

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function createCommonjsModule(fn, basedir, module) {
	return module = {
		path: basedir,
		exports: {},
		require: function (path, base) {
			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
		}
	}, fn(module, module.exports), module.exports;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
});

var regenerator = runtime_1;

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

var asyncToGenerator = _asyncToGenerator;

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var createClass = _createClass;

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose$1(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose$1(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var reactIs_production_min = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports,"__esModule",{value:!0});
var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?Symbol.for("react.suspense_list"):
60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.fundamental"):60117,w=b?Symbol.for("react.responder"):60118,x=b?Symbol.for("react.scope"):60119;function y(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case h:return a;default:return u}}case t:case r:case d:return u}}}function z(a){return y(a)===m}
exports.typeOf=y;exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;exports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;
exports.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===v||a.$$typeof===w||a.$$typeof===x)};exports.isAsyncMode=function(a){return z(a)||y(a)===l};exports.isConcurrentMode=z;exports.isContextConsumer=function(a){return y(a)===k};exports.isContextProvider=function(a){return y(a)===h};
exports.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return y(a)===n};exports.isFragment=function(a){return y(a)===e};exports.isLazy=function(a){return y(a)===t};exports.isMemo=function(a){return y(a)===r};exports.isPortal=function(a){return y(a)===d};exports.isProfiler=function(a){return y(a)===g};exports.isStrictMode=function(a){return y(a)===f};exports.isSuspense=function(a){return y(a)===p};
});

var reactIs_development = createCommonjsModule(function (module, exports) {



if (process.env.NODE_ENV !== "production") {
  (function() {

Object.defineProperty(exports, '__esModule', { value: true });

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
// (unstable) APIs that have been removed. Can we remove the symbols?

var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE);
}

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */
var lowPriorityWarningWithoutStack = function () {};

{
  var printWarning = function (format) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });

    if (typeof console !== 'undefined') {
      console.warn(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarningWithoutStack = function (condition, format) {
    if (format === undefined) {
      throw new Error('`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(void 0, [format].concat(args));
    }
  };
}

var lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;

function typeOf(object) {
  if (typeof object === 'object' && object !== null) {
    var $$typeof = object.$$typeof;

    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        var type = object.type;

        switch (type) {
          case REACT_ASYNC_MODE_TYPE:
          case REACT_CONCURRENT_MODE_TYPE:
          case REACT_FRAGMENT_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_SUSPENSE_TYPE:
            return type;

          default:
            var $$typeofType = type && type.$$typeof;

            switch ($$typeofType) {
              case REACT_CONTEXT_TYPE:
              case REACT_FORWARD_REF_TYPE:
              case REACT_PROVIDER_TYPE:
                return $$typeofType;

              default:
                return $$typeof;
            }

        }

      case REACT_LAZY_TYPE:
      case REACT_MEMO_TYPE:
      case REACT_PORTAL_TYPE:
        return $$typeof;
    }
  }

  return undefined;
} // AsyncMode is deprecated along with isAsyncMode

var AsyncMode = REACT_ASYNC_MODE_TYPE;
var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
var ContextConsumer = REACT_CONTEXT_TYPE;
var ContextProvider = REACT_PROVIDER_TYPE;
var Element = REACT_ELEMENT_TYPE;
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Fragment = REACT_FRAGMENT_TYPE;
var Lazy = REACT_LAZY_TYPE;
var Memo = REACT_MEMO_TYPE;
var Portal = REACT_PORTAL_TYPE;
var Profiler = REACT_PROFILER_TYPE;
var StrictMode = REACT_STRICT_MODE_TYPE;
var Suspense = REACT_SUSPENSE_TYPE;
var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

function isAsyncMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
      hasWarnedAboutDeprecatedIsAsyncMode = true;
      lowPriorityWarningWithoutStack$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    }
  }

  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
}
function isConcurrentMode(object) {
  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isContextProvider(object) {
  return typeOf(object) === REACT_PROVIDER_TYPE;
}
function isElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function isForwardRef(object) {
  return typeOf(object) === REACT_FORWARD_REF_TYPE;
}
function isFragment(object) {
  return typeOf(object) === REACT_FRAGMENT_TYPE;
}
function isLazy(object) {
  return typeOf(object) === REACT_LAZY_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function isPortal(object) {
  return typeOf(object) === REACT_PORTAL_TYPE;
}
function isProfiler(object) {
  return typeOf(object) === REACT_PROFILER_TYPE;
}
function isStrictMode(object) {
  return typeOf(object) === REACT_STRICT_MODE_TYPE;
}
function isSuspense(object) {
  return typeOf(object) === REACT_SUSPENSE_TYPE;
}

exports.typeOf = typeOf;
exports.AsyncMode = AsyncMode;
exports.ConcurrentMode = ConcurrentMode;
exports.ContextConsumer = ContextConsumer;
exports.ContextProvider = ContextProvider;
exports.Element = Element;
exports.ForwardRef = ForwardRef;
exports.Fragment = Fragment;
exports.Lazy = Lazy;
exports.Memo = Memo;
exports.Portal = Portal;
exports.Profiler = Profiler;
exports.StrictMode = StrictMode;
exports.Suspense = Suspense;
exports.isValidElementType = isValidElementType;
exports.isAsyncMode = isAsyncMode;
exports.isConcurrentMode = isConcurrentMode;
exports.isContextConsumer = isContextConsumer;
exports.isContextProvider = isContextProvider;
exports.isElement = isElement;
exports.isForwardRef = isForwardRef;
exports.isFragment = isFragment;
exports.isLazy = isLazy;
exports.isMemo = isMemo;
exports.isPortal = isPortal;
exports.isProfiler = isProfiler;
exports.isStrictMode = isStrictMode;
exports.isSuspense = isSuspense;
  })();
}
});

var reactIs = createCommonjsModule(function (module) {

if (process.env.NODE_ENV === 'production') {
  module.exports = reactIs_production_min;
} else {
  module.exports = reactIs_development;
}
});

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var ReactPropTypesSecret_1 = ReactPropTypesSecret;

var printWarning = function() {};

if (process.env.NODE_ENV !== 'production') {
  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
  var loggedTypeFailures = {};
  var has = Function.call.bind(Object.prototype.hasOwnProperty);

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes.resetWarningCache = function() {
  if (process.env.NODE_ENV !== 'production') {
    loggedTypeFailures = {};
  }
};

var checkPropTypes_1 = checkPropTypes;

var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning$1 = function() {};

if (process.env.NODE_ENV !== 'production') {
  printWarning$1 = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret_1) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning$1(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!reactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (process.env.NODE_ENV !== 'production') {
        if (arguments.length > 1) {
          printWarning$1(
            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
          );
        } else {
          printWarning$1('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has$1(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning$1(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = objectAssign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes_1;
  ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

var factoryWithThrowingShims = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret_1) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  }  shim.isRequired = shim;
  function getShim() {
    return shim;
  }  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

var propTypes = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== 'production') {
  var ReactIs = reactIs;

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = factoryWithThrowingShims();
}
});

function toVal(mix) {
	var k, y, str='';

	if (typeof mix === 'string' || typeof mix === 'number') {
		str += mix;
	} else if (typeof mix === 'object') {
		if (Array.isArray(mix)) {
			for (k=0; k < mix.length; k++) {
				if (mix[k]) {
					if (y = toVal(mix[k])) {
						str && (str += ' ');
						str += y;
					}
				}
			}
		} else {
			for (k in mix) {
				if (mix[k]) {
					str && (str += ' ');
					str += k;
				}
			}
		}
	}

	return str;
}

function clsx () {
	var i=0, tmp, x, str='';
	while (i < arguments.length) {
		if (tmp = arguments[i++]) {
			if (x = toVal(tmp)) {
				str && (str += ' ');
				str += x;
			}
		}
	}
	return str;
}

var interopRequireDefault = createCommonjsModule(function (module) {
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;
});

var chainPropTypes_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = chainPropTypes;

function chainPropTypes(propType1, propType2) {
  if (process.env.NODE_ENV === 'production') {
    return function () {
      return null;
    };
  }

  return function validate() {
    return propType1.apply(void 0, arguments) || propType2.apply(void 0, arguments);
  };
}
});

var _extends_1$1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

var _typeof_1 = createCommonjsModule(function (module) {
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;
});

var deepmerge_1 = createCommonjsModule(function (module, exports) {



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPlainObject = isPlainObject;
exports.default = deepmerge;

var _extends2 = interopRequireDefault(_extends_1$1);

var _typeof2 = interopRequireDefault(_typeof_1);

function isPlainObject(item) {
  return item && (0, _typeof2.default)(item) === 'object' && item.constructor === Object;
}

function deepmerge(target, source) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
    clone: true
  };
  var output = options.clone ? (0, _extends2.default)({}, target) : target;

  if (isPlainObject(target) && isPlainObject(source)) {
    Object.keys(source).forEach(function (key) {
      // Avoid prototype pollution
      if (key === '__proto__') {
        return;
      }

      if (isPlainObject(source[key]) && key in target) {
        output[key] = deepmerge(target[key], source[key], options);
      } else {
        output[key] = source[key];
      }
    });
  }

  return output;
}
});

var elementAcceptingRef_1 = createCommonjsModule(function (module, exports) {



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = interopRequireDefault(propTypes);

var _chainPropTypes = interopRequireDefault(chainPropTypes_1);

function isClassComponent(elementType) {
  // elementType.prototype?.isReactComponent
  var _elementType$prototyp = elementType.prototype,
      prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;
  return Boolean(prototype.isReactComponent);
}

function acceptingRef(props, propName, componentName, location, propFullName) {
  var element = props[propName];
  var safePropName = propFullName || propName;

  if (element == null) {
    return null;
  }

  var warningHint;
  var elementType = element.type;
  /**
   * Blacklisting instead of whitelisting
   *
   * Blacklisting will miss some components, such as React.Fragment. Those will at least
   * trigger a warning in React.
   * We can't whitelist because there is no safe way to detect React.forwardRef
   * or class components. "Safe" means there's no public API.
   *
   */

  if (typeof elementType === 'function' && !isClassComponent(elementType)) {
    warningHint = 'Did you accidentally use a plain function component for an element instead?';
  }

  if (warningHint !== undefined) {
    return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an element that can hold a ref. ".concat(warningHint, " ") + 'For more information see https://material-ui.com/r/caveat-with-refs-guide');
  }

  return null;
}

var elementAcceptingRef = (0, _chainPropTypes.default)(_propTypes.default.element, acceptingRef);
elementAcceptingRef.isRequired = (0, _chainPropTypes.default)(_propTypes.default.element.isRequired, acceptingRef);
var _default = elementAcceptingRef;
exports.default = _default;
});

var interopRequireWildcard = createCommonjsModule(function (module) {
function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof_1(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

module.exports = _interopRequireWildcard;
});

var elementTypeAcceptingRef_1 = createCommonjsModule(function (module, exports) {





Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var PropTypes = interopRequireWildcard(propTypes);

var _chainPropTypes = interopRequireDefault(chainPropTypes_1);

function isClassComponent(elementType) {
  // elementType.prototype?.isReactComponent
  var _elementType$prototyp = elementType.prototype,
      prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;
  return Boolean(prototype.isReactComponent);
}

function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
  var propValue = props[propName];
  var safePropName = propFullName || propName;

  if (propValue == null) {
    return null;
  }

  var warningHint;
  /**
   * Blacklisting instead of whitelisting
   *
   * Blacklisting will miss some components, such as React.Fragment. Those will at least
   * trigger a warning in React.
   * We can't whitelist because there is no safe way to detect React.forwardRef
   * or class components. "Safe" means there's no public API.
   *
   */

  if (typeof propValue === 'function' && !isClassComponent(propValue)) {
    warningHint = 'Did you accidentally provide a plain function component instead?';
  }

  if (warningHint !== undefined) {
    return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an element type that can hold a ref. ".concat(warningHint, " ") + 'For more information see https://material-ui.com/r/caveat-with-refs-guide');
  }

  return null;
}

var _default = (0, _chainPropTypes.default)(PropTypes.elementType, elementTypeAcceptingRef);

exports.default = _default;
});

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var defineProperty = _defineProperty;

var exactProp_1 = createCommonjsModule(function (module, exports) {



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exactProp;
exports.specialProperty = void 0;

var _defineProperty2 = interopRequireDefault(defineProperty);

var _extends3 = interopRequireDefault(_extends_1$1);

// This module is based on https://github.com/airbnb/prop-types-exact repository.
// However, in order to reduce the number of dependencies and to remove some extra safe checks
// the module was forked.
// Only exported for test purposes.
var specialProperty = "exact-prop: \u200B";
exports.specialProperty = specialProperty;

function exactProp(propTypes) {
  if (process.env.NODE_ENV === 'production') {
    return propTypes;
  }

  return (0, _extends3.default)({}, propTypes, (0, _defineProperty2.default)({}, specialProperty, function (props) {
    var unsupportedProps = Object.keys(props).filter(function (prop) {
      return !propTypes.hasOwnProperty(prop);
    });

    if (unsupportedProps.length > 0) {
      return new Error("The following props are not supported: ".concat(unsupportedProps.map(function (prop) {
        return "`".concat(prop, "`");
      }).join(', '), ". Please remove them."));
    }

    return null;
  }));
}
});

var formatMuiErrorMessage_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = formatMuiErrorMessage;

/**
 * WARNING: Don't import this directly.
 * Use `MuiError` from `@material-ui/utils/macros/MuiError.macro` instead.
 * @param {number} code
 */
function formatMuiErrorMessage(code) {
  // Apply babel-plugin-transform-template-literals in loose mode
  // loose mode is safe iff we're concatenating primitives
  // see https://babeljs.io/docs/en/babel-plugin-transform-template-literals#loose

  /* eslint-disable prefer-template */
  var url = 'https://material-ui.com/production-error/?code=' + code;

  for (var i = 1; i < arguments.length; i += 1) {
    // rest params over-transpile for this case
    // eslint-disable-next-line prefer-rest-params
    url += '&args[]=' + encodeURIComponent(arguments[i]);
  }

  return 'Minified Material-UI error #' + code + '; visit ' + url + ' for the full message.';
  /* eslint-enable prefer-template */
}
});

/** @license React v17.0.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var b=60103,c=60106,d=60107,e=60108,f=60114,g=60109,h=60110,k=60112,l=60113,m=60120,n=60115,p=60116,q=60121,r=60122,u=60117,v=60129,w=60131;
if("function"===typeof Symbol&&Symbol.for){var x=Symbol.for;b=x("react.element");c=x("react.portal");d=x("react.fragment");e=x("react.strict_mode");f=x("react.profiler");g=x("react.provider");h=x("react.context");k=x("react.forward_ref");l=x("react.suspense");m=x("react.suspense_list");n=x("react.memo");p=x("react.lazy");q=x("react.block");r=x("react.server.block");u=x("react.fundamental");v=x("react.debug_trace_mode");w=x("react.legacy_hidden");}
function y(a){if("object"===typeof a&&null!==a){var t=a.$$typeof;switch(t){case b:switch(a=a.type,a){case d:case f:case e:case l:case m:return a;default:switch(a=a&&a.$$typeof,a){case h:case k:case p:case n:case g:return a;default:return t}}case c:return t}}}var z=g,A=b,B=k,C=d,D=p,E=n,F=c,G=f,H=e,I=l;var ContextConsumer=h;var ContextProvider=z;var Element$1=A;var ForwardRef=B;var Fragment=C;var Lazy=D;var Memo=E;var Portal=F;var Profiler=G;var StrictMode=H;
var Suspense=I;var isAsyncMode=function(){return !1};var isConcurrentMode=function(){return !1};var isContextConsumer=function(a){return y(a)===h};var isContextProvider=function(a){return y(a)===g};var isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===b};var isForwardRef=function(a){return y(a)===k};var isFragment=function(a){return y(a)===d};var isLazy=function(a){return y(a)===p};var isMemo=function(a){return y(a)===n};
var isPortal=function(a){return y(a)===c};var isProfiler=function(a){return y(a)===f};var isStrictMode=function(a){return y(a)===e};var isSuspense=function(a){return y(a)===l};var isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===d||a===f||a===v||a===e||a===l||a===m||a===w||"object"===typeof a&&null!==a&&(a.$$typeof===p||a.$$typeof===n||a.$$typeof===g||a.$$typeof===h||a.$$typeof===k||a.$$typeof===u||a.$$typeof===q||a[0]===r)?!0:!1};
var typeOf=y;

var reactIs_production_min$1 = {
	ContextConsumer: ContextConsumer,
	ContextProvider: ContextProvider,
	Element: Element$1,
	ForwardRef: ForwardRef,
	Fragment: Fragment,
	Lazy: Lazy,
	Memo: Memo,
	Portal: Portal,
	Profiler: Profiler,
	StrictMode: StrictMode,
	Suspense: Suspense,
	isAsyncMode: isAsyncMode,
	isConcurrentMode: isConcurrentMode,
	isContextConsumer: isContextConsumer,
	isContextProvider: isContextProvider,
	isElement: isElement,
	isForwardRef: isForwardRef,
	isFragment: isFragment,
	isLazy: isLazy,
	isMemo: isMemo,
	isPortal: isPortal,
	isProfiler: isProfiler,
	isStrictMode: isStrictMode,
	isSuspense: isSuspense,
	isValidElementType: isValidElementType,
	typeOf: typeOf
};

var reactIs_development$1 = createCommonjsModule(function (module, exports) {

if (process.env.NODE_ENV !== "production") {
  (function() {

// ATTENTION
// When adding new symbols to this file,
// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE = 0xeac7;
var REACT_PORTAL_TYPE = 0xeaca;
var REACT_FRAGMENT_TYPE = 0xeacb;
var REACT_STRICT_MODE_TYPE = 0xeacc;
var REACT_PROFILER_TYPE = 0xead2;
var REACT_PROVIDER_TYPE = 0xeacd;
var REACT_CONTEXT_TYPE = 0xeace;
var REACT_FORWARD_REF_TYPE = 0xead0;
var REACT_SUSPENSE_TYPE = 0xead1;
var REACT_SUSPENSE_LIST_TYPE = 0xead8;
var REACT_MEMO_TYPE = 0xead3;
var REACT_LAZY_TYPE = 0xead4;
var REACT_BLOCK_TYPE = 0xead9;
var REACT_SERVER_BLOCK_TYPE = 0xeada;
var REACT_FUNDAMENTAL_TYPE = 0xead5;
var REACT_SCOPE_TYPE = 0xead7;
var REACT_OPAQUE_ID_TYPE = 0xeae0;
var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
var REACT_OFFSCREEN_TYPE = 0xeae2;
var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

if (typeof Symbol === 'function' && Symbol.for) {
  var symbolFor = Symbol.for;
  REACT_ELEMENT_TYPE = symbolFor('react.element');
  REACT_PORTAL_TYPE = symbolFor('react.portal');
  REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
  REACT_PROFILER_TYPE = symbolFor('react.profiler');
  REACT_PROVIDER_TYPE = symbolFor('react.provider');
  REACT_CONTEXT_TYPE = symbolFor('react.context');
  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
  REACT_MEMO_TYPE = symbolFor('react.memo');
  REACT_LAZY_TYPE = symbolFor('react.lazy');
  REACT_BLOCK_TYPE = symbolFor('react.block');
  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
  REACT_SCOPE_TYPE = symbolFor('react.scope');
  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
}

// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

var enableScopeAPI = false; // Experimental Create Event Handle API.

function isValidElementType(type) {
  if (typeof type === 'string' || typeof type === 'function') {
    return true;
  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {
    return true;
  }

  if (typeof type === 'object' && type !== null) {
    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
      return true;
    }
  }

  return false;
}

function typeOf(object) {
  if (typeof object === 'object' && object !== null) {
    var $$typeof = object.$$typeof;

    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        var type = object.type;

        switch (type) {
          case REACT_FRAGMENT_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_SUSPENSE_TYPE:
          case REACT_SUSPENSE_LIST_TYPE:
            return type;

          default:
            var $$typeofType = type && type.$$typeof;

            switch ($$typeofType) {
              case REACT_CONTEXT_TYPE:
              case REACT_FORWARD_REF_TYPE:
              case REACT_LAZY_TYPE:
              case REACT_MEMO_TYPE:
              case REACT_PROVIDER_TYPE:
                return $$typeofType;

              default:
                return $$typeof;
            }

        }

      case REACT_PORTAL_TYPE:
        return $$typeof;
    }
  }

  return undefined;
}
var ContextConsumer = REACT_CONTEXT_TYPE;
var ContextProvider = REACT_PROVIDER_TYPE;
var Element = REACT_ELEMENT_TYPE;
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Fragment = REACT_FRAGMENT_TYPE;
var Lazy = REACT_LAZY_TYPE;
var Memo = REACT_MEMO_TYPE;
var Portal = REACT_PORTAL_TYPE;
var Profiler = REACT_PROFILER_TYPE;
var StrictMode = REACT_STRICT_MODE_TYPE;
var Suspense = REACT_SUSPENSE_TYPE;
var hasWarnedAboutDeprecatedIsAsyncMode = false;
var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated

function isAsyncMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
    }
  }

  return false;
}
function isConcurrentMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
      hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint

      console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
    }
  }

  return false;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isContextProvider(object) {
  return typeOf(object) === REACT_PROVIDER_TYPE;
}
function isElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function isForwardRef(object) {
  return typeOf(object) === REACT_FORWARD_REF_TYPE;
}
function isFragment(object) {
  return typeOf(object) === REACT_FRAGMENT_TYPE;
}
function isLazy(object) {
  return typeOf(object) === REACT_LAZY_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function isPortal(object) {
  return typeOf(object) === REACT_PORTAL_TYPE;
}
function isProfiler(object) {
  return typeOf(object) === REACT_PROFILER_TYPE;
}
function isStrictMode(object) {
  return typeOf(object) === REACT_STRICT_MODE_TYPE;
}
function isSuspense(object) {
  return typeOf(object) === REACT_SUSPENSE_TYPE;
}

exports.ContextConsumer = ContextConsumer;
exports.ContextProvider = ContextProvider;
exports.Element = Element;
exports.ForwardRef = ForwardRef;
exports.Fragment = Fragment;
exports.Lazy = Lazy;
exports.Memo = Memo;
exports.Portal = Portal;
exports.Profiler = Profiler;
exports.StrictMode = StrictMode;
exports.Suspense = Suspense;
exports.isAsyncMode = isAsyncMode;
exports.isConcurrentMode = isConcurrentMode;
exports.isContextConsumer = isContextConsumer;
exports.isContextProvider = isContextProvider;
exports.isElement = isElement;
exports.isForwardRef = isForwardRef;
exports.isFragment = isFragment;
exports.isLazy = isLazy;
exports.isMemo = isMemo;
exports.isPortal = isPortal;
exports.isProfiler = isProfiler;
exports.isStrictMode = isStrictMode;
exports.isSuspense = isSuspense;
exports.isValidElementType = isValidElementType;
exports.typeOf = typeOf;
  })();
}
});

var reactIs$1 = createCommonjsModule(function (module) {

if (process.env.NODE_ENV === 'production') {
  module.exports = reactIs_production_min$1;
} else {
  module.exports = reactIs_development$1;
}
});

var getDisplayName_1 = createCommonjsModule(function (module, exports) {



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFunctionName = getFunctionName;
exports.default = getDisplayName;

var _typeof2 = interopRequireDefault(_typeof_1);



// Simplified polyfill for IE 11 support
// https://github.com/JamesMGreene/Function.name/blob/58b314d4a983110c3682f1228f845d39ccca1817/Function.name.js#L3
var fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;

function getFunctionName(fn) {
  var match = "".concat(fn).match(fnNameMatchRegex);
  var name = match && match[1];
  return name || '';
}
/**
 * @param {function} Component
 * @param {string} fallback
 * @returns {string | undefined}
 */


function getFunctionComponentName(Component) {
  var fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return Component.displayName || Component.name || getFunctionName(Component) || fallback;
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = getFunctionComponentName(innerType);
  return outerType.displayName || (functionName !== '' ? "".concat(wrapperName, "(").concat(functionName, ")") : wrapperName);
}
/**
 * cherry-pick from
 * https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/getComponentName.js
 * originally forked from recompose/getDisplayName with added IE 11 support
 *
 * @param {React.ReactType} Component
 * @returns {string | undefined}
 */


function getDisplayName(Component) {
  if (Component == null) {
    return undefined;
  }

  if (typeof Component === 'string') {
    return Component;
  }

  if (typeof Component === 'function') {
    return getFunctionComponentName(Component, 'Component');
  }

  if ((0, _typeof2.default)(Component) === 'object') {
    switch (Component.$$typeof) {
      case reactIs$1.ForwardRef:
        return getWrappedName(Component, Component.render, 'ForwardRef');

      case reactIs$1.Memo:
        return getWrappedName(Component, Component.type, 'memo');

      default:
        return undefined;
    }
  }

  return undefined;
}
});

var HTMLElementType_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = HTMLElementType;

function HTMLElementType(props, propName, componentName, location, propFullName) {
  if (process.env.NODE_ENV === 'production') {
    return null;
  }

  var propValue = props[propName];
  var safePropName = propFullName || propName;

  if (propValue == null) {
    return null;
  }

  if (propValue && propValue.nodeType !== 1) {
    return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an HTMLElement.");
  }

  return null;
}
});

var ponyfillGlobal = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/* eslint-disable */
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var _default = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();

exports.default = _default;
});

var refType_1 = createCommonjsModule(function (module, exports) {



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = interopRequireDefault(propTypes);

var refType = _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]);

var _default = refType;
exports.default = _default;
});

var utils = createCommonjsModule(function (module, exports) {



Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "chainPropTypes", {
  enumerable: true,
  get: function get() {
    return _chainPropTypes.default;
  }
});
Object.defineProperty(exports, "deepmerge", {
  enumerable: true,
  get: function get() {
    return _deepmerge.default;
  }
});
Object.defineProperty(exports, "elementAcceptingRef", {
  enumerable: true,
  get: function get() {
    return _elementAcceptingRef.default;
  }
});
Object.defineProperty(exports, "elementTypeAcceptingRef", {
  enumerable: true,
  get: function get() {
    return _elementTypeAcceptingRef.default;
  }
});
Object.defineProperty(exports, "exactProp", {
  enumerable: true,
  get: function get() {
    return _exactProp.default;
  }
});
Object.defineProperty(exports, "formatMuiErrorMessage", {
  enumerable: true,
  get: function get() {
    return _formatMuiErrorMessage.default;
  }
});
Object.defineProperty(exports, "getDisplayName", {
  enumerable: true,
  get: function get() {
    return _getDisplayName.default;
  }
});
Object.defineProperty(exports, "HTMLElementType", {
  enumerable: true,
  get: function get() {
    return _HTMLElementType.default;
  }
});
Object.defineProperty(exports, "ponyfillGlobal", {
  enumerable: true,
  get: function get() {
    return _ponyfillGlobal.default;
  }
});
Object.defineProperty(exports, "refType", {
  enumerable: true,
  get: function get() {
    return _refType.default;
  }
});

var _chainPropTypes = interopRequireDefault(chainPropTypes_1);

var _deepmerge = interopRequireDefault(deepmerge_1);

var _elementAcceptingRef = interopRequireDefault(elementAcceptingRef_1);

var _elementTypeAcceptingRef = interopRequireDefault(elementTypeAcceptingRef_1);

var _exactProp = interopRequireDefault(exactProp_1);

var _formatMuiErrorMessage = interopRequireDefault(formatMuiErrorMessage_1);

var _getDisplayName = interopRequireDefault(getDisplayName_1);

var _HTMLElementType = interopRequireDefault(HTMLElementType_1);

var _ponyfillGlobal = interopRequireDefault(ponyfillGlobal);

var _refType = interopRequireDefault(refType_1);
});

/* eslint-disable no-use-before-define */

/**
 * Returns a number whose value is limited to the given range.
 *
 * @param {number} value The value to be clamped
 * @param {number} min The lower boundary of the output range
 * @param {number} max The upper boundary of the output range
 * @returns {number} A number in the range [min, max]
 */
function clamp(value) {
  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

  if (process.env.NODE_ENV !== 'production') {
    if (value < min || value > max) {
      console.error("Material-UI: The value provided ".concat(value, " is out of range [").concat(min, ", ").concat(max, "]."));
    }
  }

  return Math.min(Math.max(min, value), max);
}
/**
 * Converts a color from CSS hex format to CSS rgb format.
 *
 * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
 * @returns {string} A CSS rgb color string
 */


function hexToRgb(color) {
  color = color.substr(1);
  var re = new RegExp(".{1,".concat(color.length >= 6 ? 2 : 1, "}"), 'g');
  var colors = color.match(re);

  if (colors && colors[0].length === 1) {
    colors = colors.map(function (n) {
      return n + n;
    });
  }

  return colors ? "rgb".concat(colors.length === 4 ? 'a' : '', "(").concat(colors.map(function (n, index) {
    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
  }).join(', '), ")") : '';
}
/**
 * Converts a color from hsl format to rgb format.
 *
 * @param {string} color - HSL color values
 * @returns {string} rgb color values
 */

function hslToRgb(color) {
  color = decomposeColor(color);
  var _color = color,
      values = _color.values;
  var h = values[0];
  var s = values[1] / 100;
  var l = values[2] / 100;
  var a = s * Math.min(l, 1 - l);

  var f = function f(n) {
    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;
    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
  };

  var type = 'rgb';
  var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];

  if (color.type === 'hsla') {
    type += 'a';
    rgb.push(values[3]);
  }

  return recomposeColor({
    type: type,
    values: rgb
  });
}
/**
 * Returns an object with the type and values of a color.
 *
 * Note: Does not support rgb % values.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @returns {object} - A MUI color object: {type: string, values: number[]}
 */

function decomposeColor(color) {
  // Idempotent
  if (color.type) {
    return color;
  }

  if (color.charAt(0) === '#') {
    return decomposeColor(hexToRgb(color));
  }

  var marker = color.indexOf('(');
  var type = color.substring(0, marker);

  if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {
    throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: Unsupported `".concat(color, "` color.\nWe support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().") : utils.formatMuiErrorMessage(3, color));
  }

  var values = color.substring(marker + 1, color.length - 1).split(',');
  values = values.map(function (value) {
    return parseFloat(value);
  });
  return {
    type: type,
    values: values
  };
}
/**
 * Converts a color object with type and values to a string.
 *
 * @param {object} color - Decomposed color
 * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'
 * @param {array} color.values - [n,n,n] or [n,n,n,n]
 * @returns {string} A CSS color string
 */

function recomposeColor(color) {
  var type = color.type;
  var values = color.values;

  if (type.indexOf('rgb') !== -1) {
    // Only convert the first 3 values to int (i.e. not alpha)
    values = values.map(function (n, i) {
      return i < 3 ? parseInt(n, 10) : n;
    });
  } else if (type.indexOf('hsl') !== -1) {
    values[1] = "".concat(values[1], "%");
    values[2] = "".concat(values[2], "%");
  }

  return "".concat(type, "(").concat(values.join(', '), ")");
}
/**
 * Calculates the contrast ratio between two colors.
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 *
 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @returns {number} A contrast ratio value in the range 0 - 21.
 */

function getContrastRatio(foreground, background) {
  var lumA = getLuminance(foreground);
  var lumB = getLuminance(background);
  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
}
/**
 * The relative brightness of any point in a color space,
 * normalized to 0 for darkest black and 1 for lightest white.
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @returns {number} The relative brightness of the color in the range 0 - 1
 */

function getLuminance(color) {
  color = decomposeColor(color);
  var rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;
  rgb = rgb.map(function (val) {
    val /= 255; // normalized

    return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
  }); // Truncate at 3 digits

  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
}
/**
 * Set the absolute transparency of a color.
 * Any existing alpha values are overwritten.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {number} value - value to set the alpha channel to in the range 0 -1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */

function fade(color, value) {
  color = decomposeColor(color);
  value = clamp(value);

  if (color.type === 'rgb' || color.type === 'hsl') {
    color.type += 'a';
  }

  color.values[3] = value;
  return recomposeColor(color);
}
/**
 * Darkens a color.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {number} coefficient - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */

function darken(color, coefficient) {
  color = decomposeColor(color);
  coefficient = clamp(coefficient);

  if (color.type.indexOf('hsl') !== -1) {
    color.values[2] *= 1 - coefficient;
  } else if (color.type.indexOf('rgb') !== -1) {
    for (var i = 0; i < 3; i += 1) {
      color.values[i] *= 1 - coefficient;
    }
  }

  return recomposeColor(color);
}
/**
 * Lightens a color.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {number} coefficient - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */

function lighten(color, coefficient) {
  color = decomposeColor(color);
  coefficient = clamp(coefficient);

  if (color.type.indexOf('hsl') !== -1) {
    color.values[2] += (100 - color.values[2]) * coefficient;
  } else if (color.type.indexOf('rgb') !== -1) {
    for (var i = 0; i < 3; i += 1) {
      color.values[i] += (255 - color.values[i]) * coefficient;
    }
  }

  return recomposeColor(color);
}

function _defineProperty$1(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutPropertiesLoose$2(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties$1(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose$2(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _extends$1() {
  _extends$1 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$1.apply(this, arguments);
}

// Sorted ASC by size. That's important.
// It can't be configured as it's used statically for propTypes.
var keys = ['xs', 'sm', 'md', 'lg', 'xl']; // Keep in mind that @media is inclusive by the CSS specification.

function createBreakpoints(breakpoints) {
  var _breakpoints$values = breakpoints.values,
      values = _breakpoints$values === void 0 ? {
    xs: 0,
    sm: 600,
    md: 960,
    lg: 1280,
    xl: 1920
  } : _breakpoints$values,
      _breakpoints$unit = breakpoints.unit,
      unit = _breakpoints$unit === void 0 ? 'px' : _breakpoints$unit,
      _breakpoints$step = breakpoints.step,
      step = _breakpoints$step === void 0 ? 5 : _breakpoints$step,
      other = _objectWithoutProperties$1(breakpoints, ["values", "unit", "step"]);

  function up(key) {
    var value = typeof values[key] === 'number' ? values[key] : key;
    return "@media (min-width:".concat(value).concat(unit, ")");
  }

  function down(key) {
    var endIndex = keys.indexOf(key) + 1;
    var upperbound = values[keys[endIndex]];

    if (endIndex === keys.length) {
      // xl down applies to all sizes
      return up('xs');
    }

    var value = typeof upperbound === 'number' && endIndex > 0 ? upperbound : key;
    return "@media (max-width:".concat(value - step / 100).concat(unit, ")");
  }

  function between(start, end) {
    var endIndex = keys.indexOf(end);

    if (endIndex === keys.length - 1) {
      return up(start);
    }

    return "@media (min-width:".concat(typeof values[start] === 'number' ? values[start] : start).concat(unit, ") and ") + "(max-width:".concat((endIndex !== -1 && typeof values[keys[endIndex + 1]] === 'number' ? values[keys[endIndex + 1]] : end) - step / 100).concat(unit, ")");
  }

  function only(key) {
    return between(key, key);
  }

  function width(key) {
    return values[key];
  }

  return _extends$1({
    keys: keys,
    values: values,
    up: up,
    down: down,
    between: between,
    only: only,
    width: width
  }, other);
}

function createMixins(breakpoints, spacing, mixins) {
  var _toolbar;

  return _extends$1({
    gutters: function gutters() {
      var styles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      // To deprecate in v4.1
      //       warning(
      //         false,
      //         [
      //           'Material-UI: Theme.mixins.gutters() is deprecated.',
      //           'You can use the source of the mixin directly:',
      //           `
      // paddingLeft: theme.spacing(2),
      // paddingRight: theme.spacing(2),
      // [theme.breakpoints.up('sm')]: {
      //   paddingLeft: theme.spacing(3),
      //   paddingRight: theme.spacing(3),
      // },
      // `,
      //         ].join('\n'),
      //       );
      return _extends$1({
        paddingLeft: spacing(2),
        paddingRight: spacing(2)
      }, styles, _defineProperty$1({}, breakpoints.up('sm'), _extends$1({
        paddingLeft: spacing(3),
        paddingRight: spacing(3)
      }, styles[breakpoints.up('sm')])));
    },
    toolbar: (_toolbar = {
      minHeight: 56
    }, _defineProperty$1(_toolbar, "".concat(breakpoints.up('xs'), " and (orientation: landscape)"), {
      minHeight: 48
    }), _defineProperty$1(_toolbar, breakpoints.up('sm'), {
      minHeight: 64
    }), _toolbar)
  }, mixins);
}

var common = {
  black: '#000',
  white: '#fff'
};

var grey = {
  50: '#fafafa',
  100: '#f5f5f5',
  200: '#eeeeee',
  300: '#e0e0e0',
  400: '#bdbdbd',
  500: '#9e9e9e',
  600: '#757575',
  700: '#616161',
  800: '#424242',
  900: '#212121',
  A100: '#d5d5d5',
  A200: '#aaaaaa',
  A400: '#303030',
  A700: '#616161'
};

var indigo = {
  50: '#e8eaf6',
  100: '#c5cae9',
  200: '#9fa8da',
  300: '#7986cb',
  400: '#5c6bc0',
  500: '#3f51b5',
  600: '#3949ab',
  700: '#303f9f',
  800: '#283593',
  900: '#1a237e',
  A100: '#8c9eff',
  A200: '#536dfe',
  A400: '#3d5afe',
  A700: '#304ffe'
};

var pink = {
  50: '#fce4ec',
  100: '#f8bbd0',
  200: '#f48fb1',
  300: '#f06292',
  400: '#ec407a',
  500: '#e91e63',
  600: '#d81b60',
  700: '#c2185b',
  800: '#ad1457',
  900: '#880e4f',
  A100: '#ff80ab',
  A200: '#ff4081',
  A400: '#f50057',
  A700: '#c51162'
};

var red = {
  50: '#ffebee',
  100: '#ffcdd2',
  200: '#ef9a9a',
  300: '#e57373',
  400: '#ef5350',
  500: '#f44336',
  600: '#e53935',
  700: '#d32f2f',
  800: '#c62828',
  900: '#b71c1c',
  A100: '#ff8a80',
  A200: '#ff5252',
  A400: '#ff1744',
  A700: '#d50000'
};

var orange = {
  50: '#fff3e0',
  100: '#ffe0b2',
  200: '#ffcc80',
  300: '#ffb74d',
  400: '#ffa726',
  500: '#ff9800',
  600: '#fb8c00',
  700: '#f57c00',
  800: '#ef6c00',
  900: '#e65100',
  A100: '#ffd180',
  A200: '#ffab40',
  A400: '#ff9100',
  A700: '#ff6d00'
};

var blue = {
  50: '#e3f2fd',
  100: '#bbdefb',
  200: '#90caf9',
  300: '#64b5f6',
  400: '#42a5f5',
  500: '#2196f3',
  600: '#1e88e5',
  700: '#1976d2',
  800: '#1565c0',
  900: '#0d47a1',
  A100: '#82b1ff',
  A200: '#448aff',
  A400: '#2979ff',
  A700: '#2962ff'
};

var green = {
  50: '#e8f5e9',
  100: '#c8e6c9',
  200: '#a5d6a7',
  300: '#81c784',
  400: '#66bb6a',
  500: '#4caf50',
  600: '#43a047',
  700: '#388e3c',
  800: '#2e7d32',
  900: '#1b5e20',
  A100: '#b9f6ca',
  A200: '#69f0ae',
  A400: '#00e676',
  A700: '#00c853'
};

var light = {
  // The colors used to style the text.
  text: {
    // The most important text.
    primary: 'rgba(0, 0, 0, 0.87)',
    // Secondary text.
    secondary: 'rgba(0, 0, 0, 0.54)',
    // Disabled text have even lower visual prominence.
    disabled: 'rgba(0, 0, 0, 0.38)',
    // Text hints.
    hint: 'rgba(0, 0, 0, 0.38)'
  },
  // The color used to divide different elements.
  divider: 'rgba(0, 0, 0, 0.12)',
  // The background colors used to style the surfaces.
  // Consistency between these values is important.
  background: {
    paper: common.white,
    default: grey[50]
  },
  // The colors used to style the action elements.
  action: {
    // The color of an active action like an icon button.
    active: 'rgba(0, 0, 0, 0.54)',
    // The color of an hovered action.
    hover: 'rgba(0, 0, 0, 0.04)',
    hoverOpacity: 0.04,
    // The color of a selected action.
    selected: 'rgba(0, 0, 0, 0.08)',
    selectedOpacity: 0.08,
    // The color of a disabled action.
    disabled: 'rgba(0, 0, 0, 0.26)',
    // The background color of a disabled action.
    disabledBackground: 'rgba(0, 0, 0, 0.12)',
    disabledOpacity: 0.38,
    focus: 'rgba(0, 0, 0, 0.12)',
    focusOpacity: 0.12,
    activatedOpacity: 0.12
  }
};
var dark = {
  text: {
    primary: common.white,
    secondary: 'rgba(255, 255, 255, 0.7)',
    disabled: 'rgba(255, 255, 255, 0.5)',
    hint: 'rgba(255, 255, 255, 0.5)',
    icon: 'rgba(255, 255, 255, 0.5)'
  },
  divider: 'rgba(255, 255, 255, 0.12)',
  background: {
    paper: grey[800],
    default: '#303030'
  },
  action: {
    active: common.white,
    hover: 'rgba(255, 255, 255, 0.08)',
    hoverOpacity: 0.08,
    selected: 'rgba(255, 255, 255, 0.16)',
    selectedOpacity: 0.16,
    disabled: 'rgba(255, 255, 255, 0.3)',
    disabledBackground: 'rgba(255, 255, 255, 0.12)',
    disabledOpacity: 0.38,
    focus: 'rgba(255, 255, 255, 0.12)',
    focusOpacity: 0.12,
    activatedOpacity: 0.24
  }
};

function addLightOrDark(intent, direction, shade, tonalOffset) {
  var tonalOffsetLight = tonalOffset.light || tonalOffset;
  var tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;

  if (!intent[direction]) {
    if (intent.hasOwnProperty(shade)) {
      intent[direction] = intent[shade];
    } else if (direction === 'light') {
      intent.light = lighten(intent.main, tonalOffsetLight);
    } else if (direction === 'dark') {
      intent.dark = darken(intent.main, tonalOffsetDark);
    }
  }
}

function createPalette(palette) {
  var _palette$primary = palette.primary,
      primary = _palette$primary === void 0 ? {
    light: indigo[300],
    main: indigo[500],
    dark: indigo[700]
  } : _palette$primary,
      _palette$secondary = palette.secondary,
      secondary = _palette$secondary === void 0 ? {
    light: pink.A200,
    main: pink.A400,
    dark: pink.A700
  } : _palette$secondary,
      _palette$error = palette.error,
      error = _palette$error === void 0 ? {
    light: red[300],
    main: red[500],
    dark: red[700]
  } : _palette$error,
      _palette$warning = palette.warning,
      warning = _palette$warning === void 0 ? {
    light: orange[300],
    main: orange[500],
    dark: orange[700]
  } : _palette$warning,
      _palette$info = palette.info,
      info = _palette$info === void 0 ? {
    light: blue[300],
    main: blue[500],
    dark: blue[700]
  } : _palette$info,
      _palette$success = palette.success,
      success = _palette$success === void 0 ? {
    light: green[300],
    main: green[500],
    dark: green[700]
  } : _palette$success,
      _palette$type = palette.type,
      type = _palette$type === void 0 ? 'light' : _palette$type,
      _palette$contrastThre = palette.contrastThreshold,
      contrastThreshold = _palette$contrastThre === void 0 ? 3 : _palette$contrastThre,
      _palette$tonalOffset = palette.tonalOffset,
      tonalOffset = _palette$tonalOffset === void 0 ? 0.2 : _palette$tonalOffset,
      other = _objectWithoutProperties$1(palette, ["primary", "secondary", "error", "warning", "info", "success", "type", "contrastThreshold", "tonalOffset"]); // Use the same logic as
  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54


  function getContrastText(background) {
    var contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;

    if (process.env.NODE_ENV !== 'production') {
      var contrast = getContrastRatio(background, contrastText);

      if (contrast < 3) {
        console.error(["Material-UI: The contrast ratio of ".concat(contrast, ":1 for ").concat(contrastText, " on ").concat(background), 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\n'));
      }
    }

    return contrastText;
  }

  var augmentColor = function augmentColor(color) {
    var mainShade = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
    var lightShade = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 300;
    var darkShade = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 700;
    color = _extends$1({}, color);

    if (!color.main && color[mainShade]) {
      color.main = color[mainShade];
    }

    if (!color.main) {
      throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: The color provided to augmentColor(color) is invalid.\nThe color object needs to have a `main` property or a `".concat(mainShade, "` property.") : utils.formatMuiErrorMessage(4, mainShade));
    }

    if (typeof color.main !== 'string') {
      throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: The color provided to augmentColor(color) is invalid.\n`color.main` should be a string, but `".concat(JSON.stringify(color.main), "` was provided instead.\n\nDid you intend to use one of the following approaches?\n\nimport {\xA0green } from \"@material-ui/core/colors\";\n\nconst theme1 = createMuiTheme({ palette: {\n  primary: green,\n} });\n\nconst theme2 = createMuiTheme({ palette: {\n  primary: { main: green[500] },\n} });") : utils.formatMuiErrorMessage(5, JSON.stringify(color.main)));
    }

    addLightOrDark(color, 'light', lightShade, tonalOffset);
    addLightOrDark(color, 'dark', darkShade, tonalOffset);

    if (!color.contrastText) {
      color.contrastText = getContrastText(color.main);
    }

    return color;
  };

  var types = {
    dark: dark,
    light: light
  };

  if (process.env.NODE_ENV !== 'production') {
    if (!types[type]) {
      console.error("Material-UI: The palette type `".concat(type, "` is not supported."));
    }
  }

  var paletteOutput = utils.deepmerge(_extends$1({
    // A collection of common colors.
    common: common,
    // The palette type, can be light or dark.
    type: type,
    // The colors used to represent primary interface elements for a user.
    primary: augmentColor(primary),
    // The colors used to represent secondary interface elements for a user.
    secondary: augmentColor(secondary, 'A400', 'A200', 'A700'),
    // The colors used to represent interface elements that the user should be made aware of.
    error: augmentColor(error),
    // The colors used to represent potentially dangerous actions or important messages.
    warning: augmentColor(warning),
    // The colors used to present information to the user that is neutral and not necessarily important.
    info: augmentColor(info),
    // The colors used to indicate the successful completion of an action that user triggered.
    success: augmentColor(success),
    // The grey colors.
    grey: grey,
    // Used by `getContrastText()` to maximize the contrast between
    // the background and the text.
    contrastThreshold: contrastThreshold,
    // Takes a background color and returns the text color that maximizes the contrast.
    getContrastText: getContrastText,
    // Generate a rich color object.
    augmentColor: augmentColor,
    // Used by the functions below to shift a color's luminance by approximately
    // two indexes within its tonal palette.
    // E.g., shift from Red 500 to Red 300 or Red 700.
    tonalOffset: tonalOffset
  }, types[type]), other);
  return paletteOutput;
}

function round(value) {
  return Math.round(value * 1e5) / 1e5;
}

var caseAllCaps = {
  textTransform: 'uppercase'
};
var defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
/**
 * @see @link{https://material.io/design/typography/the-type-system.html}
 * @see @link{https://material.io/design/typography/understanding-typography.html}
 */

function createTypography(palette, typography) {
  var _ref = typeof typography === 'function' ? typography(palette) : typography,
      _ref$fontFamily = _ref.fontFamily,
      fontFamily = _ref$fontFamily === void 0 ? defaultFontFamily : _ref$fontFamily,
      _ref$fontSize = _ref.fontSize,
      fontSize = _ref$fontSize === void 0 ? 14 : _ref$fontSize,
      _ref$fontWeightLight = _ref.fontWeightLight,
      fontWeightLight = _ref$fontWeightLight === void 0 ? 300 : _ref$fontWeightLight,
      _ref$fontWeightRegula = _ref.fontWeightRegular,
      fontWeightRegular = _ref$fontWeightRegula === void 0 ? 400 : _ref$fontWeightRegula,
      _ref$fontWeightMedium = _ref.fontWeightMedium,
      fontWeightMedium = _ref$fontWeightMedium === void 0 ? 500 : _ref$fontWeightMedium,
      _ref$fontWeightBold = _ref.fontWeightBold,
      fontWeightBold = _ref$fontWeightBold === void 0 ? 700 : _ref$fontWeightBold,
      _ref$htmlFontSize = _ref.htmlFontSize,
      htmlFontSize = _ref$htmlFontSize === void 0 ? 16 : _ref$htmlFontSize,
      allVariants = _ref.allVariants,
      pxToRem2 = _ref.pxToRem,
      other = _objectWithoutProperties$1(_ref, ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"]);

  if (process.env.NODE_ENV !== 'production') {
    if (typeof fontSize !== 'number') {
      console.error('Material-UI: `fontSize` is required to be a number.');
    }

    if (typeof htmlFontSize !== 'number') {
      console.error('Material-UI: `htmlFontSize` is required to be a number.');
    }
  }

  var coef = fontSize / 14;

  var pxToRem = pxToRem2 || function (size) {
    return "".concat(size / htmlFontSize * coef, "rem");
  };

  var buildVariant = function buildVariant(fontWeight, size, lineHeight, letterSpacing, casing) {
    return _extends$1({
      fontFamily: fontFamily,
      fontWeight: fontWeight,
      fontSize: pxToRem(size),
      // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
      lineHeight: lineHeight
    }, fontFamily === defaultFontFamily ? {
      letterSpacing: "".concat(round(letterSpacing / size), "em")
    } : {}, casing, allVariants);
  };

  var variants = {
    h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
    h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
    h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
    h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
    h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
  };
  return utils.deepmerge(_extends$1({
    htmlFontSize: htmlFontSize,
    pxToRem: pxToRem,
    round: round,
    // TODO v5: remove
    fontFamily: fontFamily,
    fontSize: fontSize,
    fontWeightLight: fontWeightLight,
    fontWeightRegular: fontWeightRegular,
    fontWeightMedium: fontWeightMedium,
    fontWeightBold: fontWeightBold
  }, variants), other, {
    clone: false // No need to clone deep

  });
}

var shadowKeyUmbraOpacity = 0.2;
var shadowKeyPenumbraOpacity = 0.14;
var shadowAmbientShadowOpacity = 0.12;

function createShadow() {
  return ["".concat(arguments.length <= 0 ? undefined : arguments[0], "px ").concat(arguments.length <= 1 ? undefined : arguments[1], "px ").concat(arguments.length <= 2 ? undefined : arguments[2], "px ").concat(arguments.length <= 3 ? undefined : arguments[3], "px rgba(0,0,0,").concat(shadowKeyUmbraOpacity, ")"), "".concat(arguments.length <= 4 ? undefined : arguments[4], "px ").concat(arguments.length <= 5 ? undefined : arguments[5], "px ").concat(arguments.length <= 6 ? undefined : arguments[6], "px ").concat(arguments.length <= 7 ? undefined : arguments[7], "px rgba(0,0,0,").concat(shadowKeyPenumbraOpacity, ")"), "".concat(arguments.length <= 8 ? undefined : arguments[8], "px ").concat(arguments.length <= 9 ? undefined : arguments[9], "px ").concat(arguments.length <= 10 ? undefined : arguments[10], "px ").concat(arguments.length <= 11 ? undefined : arguments[11], "px rgba(0,0,0,").concat(shadowAmbientShadowOpacity, ")")].join(',');
} // Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss


var shadows = ['none', createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];

var shape = {
  borderRadius: 4
};

var responsivePropType = process.env.NODE_ENV !== 'production' ? propTypes.oneOfType([propTypes.number, propTypes.string, propTypes.object, propTypes.array]) : {};

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function merge(acc, item) {
  if (!item) {
    return acc;
  }

  return utils.deepmerge(acc, item, {
    clone: false // No need to clone deep, it's way faster.

  });
}

// For instance with the first breakpoint xs: [xs, sm[.

var values = {
  xs: 0,
  sm: 600,
  md: 960,
  lg: 1280,
  xl: 1920
};
var defaultBreakpoints = {
  // Sorted ASC by size. That's important.
  // It can't be configured as it's used statically for propTypes.
  keys: ['xs', 'sm', 'md', 'lg', 'xl'],
  up: function up(key) {
    return "@media (min-width:".concat(values[key], "px)");
  }
};
function handleBreakpoints(props, propValue, styleFromPropValue) {
  if (process.env.NODE_ENV !== 'production') {
    if (!props.theme) {
      console.error('Material-UI: You are calling a style function without a theme value.');
    }
  }

  if (Array.isArray(propValue)) {
    var themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;
    return propValue.reduce(function (acc, item, index) {
      acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
      return acc;
    }, {});
  }

  if (_typeof(propValue) === 'object') {
    var _themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;

    return Object.keys(propValue).reduce(function (acc, breakpoint) {
      acc[_themeBreakpoints.up(breakpoint)] = styleFromPropValue(propValue[breakpoint]);
      return acc;
    }, {});
  }

  var output = styleFromPropValue(propValue);
  return output;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function memoize(fn) {
  var cache = {};
  return function (arg) {
    if (cache[arg] === undefined) {
      cache[arg] = fn(arg);
    }

    return cache[arg];
  };
}

var properties = {
  m: 'margin',
  p: 'padding'
};
var directions = {
  t: 'Top',
  r: 'Right',
  b: 'Bottom',
  l: 'Left',
  x: ['Left', 'Right'],
  y: ['Top', 'Bottom']
};
var aliases = {
  marginX: 'mx',
  marginY: 'my',
  paddingX: 'px',
  paddingY: 'py'
}; // memoize() impact:
// From 300,000 ops/sec
// To 350,000 ops/sec

var getCssProperties = memoize(function (prop) {
  // It's not a shorthand notation.
  if (prop.length > 2) {
    if (aliases[prop]) {
      prop = aliases[prop];
    } else {
      return [prop];
    }
  }

  var _prop$split = prop.split(''),
      _prop$split2 = _slicedToArray(_prop$split, 2),
      a = _prop$split2[0],
      b = _prop$split2[1];

  var property = properties[a];
  var direction = directions[b] || '';
  return Array.isArray(direction) ? direction.map(function (dir) {
    return property + dir;
  }) : [property + direction];
});
var spacingKeys = ['m', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'p', 'pt', 'pr', 'pb', 'pl', 'px', 'py', 'margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'paddingX', 'paddingY'];
function createUnarySpacing(theme) {
  var themeSpacing = theme.spacing || 8;

  if (typeof themeSpacing === 'number') {
    return function (abs) {
      if (process.env.NODE_ENV !== 'production') {
        if (typeof abs !== 'number') {
          console.error("Material-UI: Expected spacing argument to be a number, got ".concat(abs, "."));
        }
      }

      return themeSpacing * abs;
    };
  }

  if (Array.isArray(themeSpacing)) {
    return function (abs) {
      if (process.env.NODE_ENV !== 'production') {
        if (abs > themeSpacing.length - 1) {
          console.error(["Material-UI: The value provided (".concat(abs, ") overflows."), "The supported values are: ".concat(JSON.stringify(themeSpacing), "."), "".concat(abs, " > ").concat(themeSpacing.length - 1, ", you need to add the missing values.")].join('\n'));
        }
      }

      return themeSpacing[abs];
    };
  }

  if (typeof themeSpacing === 'function') {
    return themeSpacing;
  }

  if (process.env.NODE_ENV !== 'production') {
    console.error(["Material-UI: The `theme.spacing` value (".concat(themeSpacing, ") is invalid."), 'It should be a number, an array or a function.'].join('\n'));
  }

  return function () {
    return undefined;
  };
}

function getValue(transformer, propValue) {
  if (typeof propValue === 'string') {
    return propValue;
  }

  var abs = Math.abs(propValue);
  var transformed = transformer(abs);

  if (propValue >= 0) {
    return transformed;
  }

  if (typeof transformed === 'number') {
    return -transformed;
  }

  return "-".concat(transformed);
}

function getStyleFromPropValue(cssProperties, transformer) {
  return function (propValue) {
    return cssProperties.reduce(function (acc, cssProperty) {
      acc[cssProperty] = getValue(transformer, propValue);
      return acc;
    }, {});
  };
}

function spacing(props) {
  var theme = props.theme;
  var transformer = createUnarySpacing(theme);
  return Object.keys(props).map(function (prop) {
    // Using a hash computation over an array iteration could be faster, but with only 28 items,
    // it's doesn't worth the bundle size.
    if (spacingKeys.indexOf(prop) === -1) {
      return null;
    }

    var cssProperties = getCssProperties(prop);
    var styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
    var propValue = props[prop];
    return handleBreakpoints(props, propValue, styleFromPropValue);
  }).reduce(merge, {});
}

spacing.propTypes = process.env.NODE_ENV !== 'production' ? spacingKeys.reduce(function (obj, key) {
  obj[key] = responsivePropType;
  return obj;
}, {}) : {};
spacing.filterProps = spacingKeys;

var warnOnce;
function createSpacing() {
  var spacingInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;

  // Already transformed.
  if (spacingInput.mui) {
    return spacingInput;
  } // Material Design layouts are visually balanced. Most measurements align to an 8dp grid applied, which aligns both spacing and the overall layout.
  // Smaller components, such as icons and type, can align to a 4dp grid.
  // https://material.io/design/layout/understanding-layout.html#usage


  var transform = createUnarySpacing({
    spacing: spacingInput
  });

  var spacing = function spacing() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (process.env.NODE_ENV !== 'production') {
      if (!(args.length <= 4)) {
        console.error("Material-UI: Too many arguments provided, expected between 0 and 4, got ".concat(args.length));
      }
    }

    if (args.length === 0) {
      return transform(1);
    }

    if (args.length === 1) {
      return transform(args[0]);
    }

    return args.map(function (argument) {
      if (typeof argument === 'string') {
        return argument;
      }

      var output = transform(argument);
      return typeof output === 'number' ? "".concat(output, "px") : output;
    }).join(' ');
  }; // Backward compatibility, to remove in v5.


  Object.defineProperty(spacing, 'unit', {
    get: function get() {
      if (process.env.NODE_ENV !== 'production') {
        if (!warnOnce || process.env.NODE_ENV === 'test') {
          console.error(['Material-UI: theme.spacing.unit usage has been deprecated.', 'It will be removed in v5.', 'You can replace `theme.spacing.unit * y` with `theme.spacing(y)`.', '', 'You can use the `https://github.com/mui-org/material-ui/tree/master/packages/material-ui-codemod/README.md#theme-spacing-api` migration helper to make the process smoother.'].join('\n'));
        }

        warnOnce = true;
      }

      return spacingInput;
    }
  });
  spacing.mui = true;
  return spacing;
}

// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
// to learn the context in which each easing should be used.
var easing = {
  // This is the most common easing curve.
  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
  // Objects enter the screen at full velocity from off-screen and
  // slowly decelerate to a resting point.
  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
  // Objects leave the screen at full velocity. They do not decelerate when off-screen.
  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
  // The sharp curve is used by objects that may return to the screen at any time.
  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
}; // Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
// to learn when use what timing

var duration = {
  shortest: 150,
  shorter: 200,
  short: 250,
  // most basic recommended timing
  standard: 300,
  // this is to be used in complex animations
  complex: 375,
  // recommended when something is entering screen
  enteringScreen: 225,
  // recommended when something is leaving screen
  leavingScreen: 195
};

function formatMs(milliseconds) {
  return "".concat(Math.round(milliseconds), "ms");
}
/**
 * @param {string|Array} props
 * @param {object} param
 * @param {string} param.prop
 * @param {number} param.duration
 * @param {string} param.easing
 * @param {number} param.delay
 */


var transitions = {
  easing: easing,
  duration: duration,
  create: function create() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['all'];
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var _options$duration = options.duration,
        durationOption = _options$duration === void 0 ? duration.standard : _options$duration,
        _options$easing = options.easing,
        easingOption = _options$easing === void 0 ? easing.easeInOut : _options$easing,
        _options$delay = options.delay,
        delay = _options$delay === void 0 ? 0 : _options$delay,
        other = _objectWithoutProperties$1(options, ["duration", "easing", "delay"]);

    if (process.env.NODE_ENV !== 'production') {
      var isString = function isString(value) {
        return typeof value === 'string';
      };

      var isNumber = function isNumber(value) {
        return !isNaN(parseFloat(value));
      };

      if (!isString(props) && !Array.isArray(props)) {
        console.error('Material-UI: Argument "props" must be a string or Array.');
      }

      if (!isNumber(durationOption) && !isString(durationOption)) {
        console.error("Material-UI: Argument \"duration\" must be a number or a string but found ".concat(durationOption, "."));
      }

      if (!isString(easingOption)) {
        console.error('Material-UI: Argument "easing" must be a string.');
      }

      if (!isNumber(delay) && !isString(delay)) {
        console.error('Material-UI: Argument "delay" must be a number or a string.');
      }

      if (Object.keys(other).length !== 0) {
        console.error("Material-UI: Unrecognized argument(s) [".concat(Object.keys(other).join(','), "]."));
      }
    }

    return (Array.isArray(props) ? props : [props]).map(function (animatedProp) {
      return "".concat(animatedProp, " ").concat(typeof durationOption === 'string' ? durationOption : formatMs(durationOption), " ").concat(easingOption, " ").concat(typeof delay === 'string' ? delay : formatMs(delay));
    }).join(',');
  },
  getAutoHeightDuration: function getAutoHeightDuration(height) {
    if (!height) {
      return 0;
    }

    var constant = height / 36; // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10

    return Math.round((4 + 15 * Math.pow(constant, 0.25) + constant / 5) * 10);
  }
};

// We need to centralize the zIndex definitions as they work
// like global values in the browser.
var zIndex = {
  mobileStepper: 1000,
  speedDial: 1050,
  appBar: 1100,
  drawer: 1200,
  modal: 1300,
  snackbar: 1400,
  tooltip: 1500
};

function createMuiTheme() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _options$breakpoints = options.breakpoints,
      breakpointsInput = _options$breakpoints === void 0 ? {} : _options$breakpoints,
      _options$mixins = options.mixins,
      mixinsInput = _options$mixins === void 0 ? {} : _options$mixins,
      _options$palette = options.palette,
      paletteInput = _options$palette === void 0 ? {} : _options$palette,
      spacingInput = options.spacing,
      _options$typography = options.typography,
      typographyInput = _options$typography === void 0 ? {} : _options$typography,
      other = _objectWithoutProperties$1(options, ["breakpoints", "mixins", "palette", "spacing", "typography"]);

  var palette = createPalette(paletteInput);
  var breakpoints = createBreakpoints(breakpointsInput);
  var spacing = createSpacing(spacingInput);
  var muiTheme = utils.deepmerge({
    breakpoints: breakpoints,
    direction: 'ltr',
    mixins: createMixins(breakpoints, spacing, mixinsInput),
    overrides: {},
    // Inject custom styles
    palette: palette,
    props: {},
    // Provide default props
    shadows: shadows,
    typography: createTypography(palette, typographyInput),
    spacing: spacing,
    shape: shape,
    transitions: transitions,
    zIndex: zIndex
  }, other);

  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  muiTheme = args.reduce(function (acc, argument) {
    return utils.deepmerge(acc, argument);
  }, muiTheme);

  if (process.env.NODE_ENV !== 'production') {
    var pseudoClasses = ['checked', 'disabled', 'error', 'focused', 'focusVisible', 'required', 'expanded', 'selected'];

    var traverse = function traverse(node, parentKey) {
      var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var key; // eslint-disable-next-line guard-for-in, no-restricted-syntax

      for (key in node) {
        var child = node[key];

        if (depth === 1) {
          if (key.indexOf('Mui') === 0 && child) {
            traverse(child, key, depth + 1);
          }
        } else if (pseudoClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
          if (process.env.NODE_ENV !== 'production') {
            console.error(["Material-UI: The `".concat(parentKey, "` component increases ") + "the CSS specificity of the `".concat(key, "` internal state."), 'You can not override it like this: ', JSON.stringify(node, null, 2), '', 'Instead, you need to use the $ruleName syntax:', JSON.stringify({
              root: _defineProperty$1({}, "&$".concat(key), child)
            }, null, 2), '', 'https://material-ui.com/r/pseudo-classes-guide'].join('\n'));
          } // Remove the style to prevent global conflicts.


          node[key] = {};
        }
      }
    };

    traverse(muiTheme.overrides);
  }

  return muiTheme;
}

var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var nested = hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';

/**
 * This is the list of the style rule name we use as drop in replacement for the built-in
 * pseudo classes (:checked, :disabled, :focused, etc.).
 *
 * Why do they exist in the first place?
 * These classes are used at a specificity of 2.
 * It allows them to override previously definied styles as well as
 * being untouched by simple user overrides.
 */

var pseudoClasses = ['checked', 'disabled', 'error', 'focused', 'focusVisible', 'required', 'expanded', 'selected']; // Returns a function which generates unique class names based on counters.
// When new generator function is created, rule counter is reset.
// We need to reset the rule counter for SSR for each request.
//
// It's inspired by
// https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js

function createGenerateClassName() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _options$disableGloba = options.disableGlobal,
      disableGlobal = _options$disableGloba === void 0 ? false : _options$disableGloba,
      _options$productionPr = options.productionPrefix,
      productionPrefix = _options$productionPr === void 0 ? 'jss' : _options$productionPr,
      _options$seed = options.seed,
      seed = _options$seed === void 0 ? '' : _options$seed;
  var seedPrefix = seed === '' ? '' : "".concat(seed, "-");
  var ruleCounter = 0;

  var getNextCounterId = function getNextCounterId() {
    ruleCounter += 1;

    if (process.env.NODE_ENV !== 'production') {
      if (ruleCounter >= 1e10) {
        console.warn(['Material-UI: You might have a memory leak.', 'The ruleCounter is not supposed to grow that much.'].join(''));
      }
    }

    return ruleCounter;
  };

  return function (rule, styleSheet) {
    var name = styleSheet.options.name; // Is a global static MUI style?

    if (name && name.indexOf('Mui') === 0 && !styleSheet.options.link && !disableGlobal) {
      // We can use a shorthand class name, we never use the keys to style the components.
      if (pseudoClasses.indexOf(rule.key) !== -1) {
        return "Mui-".concat(rule.key);
      }

      var prefix = "".concat(seedPrefix).concat(name, "-").concat(rule.key);

      if (!styleSheet.options.theme[nested] || seed !== '') {
        return prefix;
      }

      return "".concat(prefix, "-").concat(getNextCounterId());
    }

    if (process.env.NODE_ENV === 'production') {
      return "".concat(seedPrefix).concat(productionPrefix).concat(getNextCounterId());
    }

    var suffix = "".concat(rule.key, "-").concat(getNextCounterId()); // Help with debuggability.

    if (styleSheet.options.classNamePrefix) {
      return "".concat(seedPrefix).concat(styleSheet.options.classNamePrefix, "-").concat(suffix);
    }

    return "".concat(seedPrefix).concat(suffix);
  };
}

/* eslint-disable no-restricted-syntax */
function getThemeProps(params) {
  var theme = params.theme,
      name = params.name,
      props = params.props;

  if (!theme || !theme.props || !theme.props[name]) {
    return props;
  } // Resolve default props, code borrow from React source.
  // https://github.com/facebook/react/blob/15a8f031838a553e41c0b66eb1bcf1da8448104d/packages/react/src/ReactElement.js#L221


  var defaultProps = theme.props[name];
  var propName;

  for (propName in defaultProps) {
    if (props[propName] === undefined) {
      props[propName] = defaultProps[propName];
    }
  }

  return props;
}

var isProduction = process.env.NODE_ENV === 'production';
function warning(condition, message) {
  if (!isProduction) {
    if (condition) {
      return;
    }

    var text = "Warning: " + message;

    if (typeof console !== 'undefined') {
      console.warn(text);
    }

    try {
      throw Error(text);
    } catch (x) {}
  }
}

function _extends$2() {
  _extends$2 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$2.apply(this, arguments);
}

var _typeof$1 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var isBrowser = (typeof window === "undefined" ? "undefined" : _typeof$1(window)) === "object" && (typeof document === "undefined" ? "undefined" : _typeof$1(document)) === 'object' && document.nodeType === 9;

function _defineProperties$1(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass$1(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties$1(Constructor, staticProps);
  return Constructor;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _objectWithoutPropertiesLoose$3(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var plainObjectConstrurctor = {}.constructor;
function cloneStyle(style) {
  if (style == null || typeof style !== 'object') return style;
  if (Array.isArray(style)) return style.map(cloneStyle);
  if (style.constructor !== plainObjectConstrurctor) return style;
  var newStyle = {};

  for (var name in style) {
    newStyle[name] = cloneStyle(style[name]);
  }

  return newStyle;
}

/**
 * Create a rule instance.
 */

function createRule(name, decl, options) {
  if (name === void 0) {
    name = 'unnamed';
  }

  var jss = options.jss;
  var declCopy = cloneStyle(decl);
  var rule = jss.plugins.onCreateRule(name, declCopy, options);
  if (rule) return rule; // It is an at-rule and it has no instance.

  if (name[0] === '@') {
    process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Unknown rule " + name) : void 0;
  }

  return null;
}

var join = function join(value, by) {
  var result = '';

  for (var i = 0; i < value.length; i++) {
    // Remove !important from the value, it will be readded later.
    if (value[i] === '!important') break;
    if (result) result += by;
    result += value[i];
  }

  return result;
};

/**
 * Converts array values to string.
 *
 * `margin: [['5px', '10px']]` > `margin: 5px 10px;`
 * `border: ['1px', '2px']` > `border: 1px, 2px;`
 * `margin: [['5px', '10px'], '!important']` > `margin: 5px 10px !important;`
 * `color: ['red', !important]` > `color: red !important;`
 */
var toCssValue = function toCssValue(value, ignoreImportant) {
  if (ignoreImportant === void 0) {
    ignoreImportant = false;
  }

  if (!Array.isArray(value)) return value;
  var cssValue = ''; // Support space separated values via `[['5px', '10px']]`.

  if (Array.isArray(value[0])) {
    for (var i = 0; i < value.length; i++) {
      if (value[i] === '!important') break;
      if (cssValue) cssValue += ', ';
      cssValue += join(value[i], ' ');
    }
  } else cssValue = join(value, ', '); // Add !important, because it was ignored.


  if (!ignoreImportant && value[value.length - 1] === '!important') {
    cssValue += ' !important';
  }

  return cssValue;
};

/**
 * Indent a string.
 * http://jsperf.com/array-join-vs-for
 */
function indentStr(str, indent) {
  var result = '';

  for (var index = 0; index < indent; index++) {
    result += '  ';
  }

  return result + str;
}
/**
 * Converts a Rule to CSS string.
 */


function toCss(selector, style, options) {
  if (options === void 0) {
    options = {};
  }

  var result = '';
  if (!style) return result;
  var _options = options,
      _options$indent = _options.indent,
      indent = _options$indent === void 0 ? 0 : _options$indent;
  var fallbacks = style.fallbacks;
  if (selector) indent++; // Apply fallbacks first.

  if (fallbacks) {
    // Array syntax {fallbacks: [{prop: value}]}
    if (Array.isArray(fallbacks)) {
      for (var index = 0; index < fallbacks.length; index++) {
        var fallback = fallbacks[index];

        for (var prop in fallback) {
          var value = fallback[prop];

          if (value != null) {
            if (result) result += '\n';
            result += "" + indentStr(prop + ": " + toCssValue(value) + ";", indent);
          }
        }
      }
    } else {
      // Object syntax {fallbacks: {prop: value}}
      for (var _prop in fallbacks) {
        var _value = fallbacks[_prop];

        if (_value != null) {
          if (result) result += '\n';
          result += "" + indentStr(_prop + ": " + toCssValue(_value) + ";", indent);
        }
      }
    }
  }

  for (var _prop2 in style) {
    var _value2 = style[_prop2];

    if (_value2 != null && _prop2 !== 'fallbacks') {
      if (result) result += '\n';
      result += "" + indentStr(_prop2 + ": " + toCssValue(_value2) + ";", indent);
    }
  } // Allow empty style in this case, because properties will be added dynamically.


  if (!result && !options.allowEmpty) return result; // When rule is being stringified before selector was defined.

  if (!selector) return result;
  indent--;
  if (result) result = "\n" + result + "\n";
  return indentStr(selector + " {" + result, indent) + indentStr('}', indent);
}

var escapeRegex = /([[\].#*$><+~=|^:(),"'`\s])/g;
var nativeEscape = typeof CSS !== 'undefined' && CSS.escape;
var escape = (function (str) {
  return nativeEscape ? nativeEscape(str) : str.replace(escapeRegex, '\\$1');
});

var BaseStyleRule =
/*#__PURE__*/
function () {
  function BaseStyleRule(key, style, options) {
    this.type = 'style';
    this.key = void 0;
    this.isProcessed = false;
    this.style = void 0;
    this.renderer = void 0;
    this.renderable = void 0;
    this.options = void 0;
    var sheet = options.sheet,
        Renderer = options.Renderer;
    this.key = key;
    this.options = options;
    this.style = style;
    if (sheet) this.renderer = sheet.renderer;else if (Renderer) this.renderer = new Renderer();
  }
  /**
   * Get or set a style property.
   */


  var _proto = BaseStyleRule.prototype;

  _proto.prop = function prop(name, value, options) {
    // It's a getter.
    if (value === undefined) return this.style[name]; // Don't do anything if the value has not changed.

    var force = options ? options.force : false;
    if (!force && this.style[name] === value) return this;
    var newValue = value;

    if (!options || options.process !== false) {
      newValue = this.options.jss.plugins.onChangeValue(value, name, this);
    }

    var isEmpty = newValue == null || newValue === false;
    var isDefined = name in this.style; // Value is empty and wasn't defined before.

    if (isEmpty && !isDefined && !force) return this; // We are going to remove this value.

    var remove = isEmpty && isDefined;
    if (remove) delete this.style[name];else this.style[name] = newValue; // Renderable is defined if StyleSheet option `link` is true.

    if (this.renderable && this.renderer) {
      if (remove) this.renderer.removeProperty(this.renderable, name);else this.renderer.setProperty(this.renderable, name, newValue);
      return this;
    }

    var sheet = this.options.sheet;

    if (sheet && sheet.attached) {
      process.env.NODE_ENV !== "production" ? warning(false, '[JSS] Rule is not linked. Missing sheet option "link: true".') : void 0;
    }

    return this;
  };

  return BaseStyleRule;
}();
var StyleRule =
/*#__PURE__*/
function (_BaseStyleRule) {
  _inheritsLoose(StyleRule, _BaseStyleRule);

  function StyleRule(key, style, options) {
    var _this;

    _this = _BaseStyleRule.call(this, key, style, options) || this;
    _this.selectorText = void 0;
    _this.id = void 0;
    _this.renderable = void 0;
    var selector = options.selector,
        scoped = options.scoped,
        sheet = options.sheet,
        generateId = options.generateId;

    if (selector) {
      _this.selectorText = selector;
    } else if (scoped !== false) {
      _this.id = generateId(_assertThisInitialized(_assertThisInitialized(_this)), sheet);
      _this.selectorText = "." + escape(_this.id);
    }

    return _this;
  }
  /**
   * Set selector string.
   * Attention: use this with caution. Most browsers didn't implement
   * selectorText setter, so this may result in rerendering of entire Style Sheet.
   */


  var _proto2 = StyleRule.prototype;

  /**
   * Apply rule to an element inline.
   */
  _proto2.applyTo = function applyTo(renderable) {
    var renderer = this.renderer;

    if (renderer) {
      var json = this.toJSON();

      for (var prop in json) {
        renderer.setProperty(renderable, prop, json[prop]);
      }
    }

    return this;
  }
  /**
   * Returns JSON representation of the rule.
   * Fallbacks are not supported.
   * Useful for inline styles.
   */
  ;

  _proto2.toJSON = function toJSON() {
    var json = {};

    for (var prop in this.style) {
      var value = this.style[prop];
      if (typeof value !== 'object') json[prop] = value;else if (Array.isArray(value)) json[prop] = toCssValue(value);
    }

    return json;
  }
  /**
   * Generates a CSS string.
   */
  ;

  _proto2.toString = function toString(options) {
    var sheet = this.options.sheet;
    var link = sheet ? sheet.options.link : false;
    var opts = link ? _extends$2({}, options, {
      allowEmpty: true
    }) : options;
    return toCss(this.selectorText, this.style, opts);
  };

  _createClass$1(StyleRule, [{
    key: "selector",
    set: function set(selector) {
      if (selector === this.selectorText) return;
      this.selectorText = selector;
      var renderer = this.renderer,
          renderable = this.renderable;
      if (!renderable || !renderer) return;
      var hasChanged = renderer.setSelector(renderable, selector); // If selector setter is not implemented, rerender the rule.

      if (!hasChanged) {
        renderer.replaceRule(renderable, this);
      }
    }
    /**
     * Get selector string.
     */
    ,
    get: function get() {
      return this.selectorText;
    }
  }]);

  return StyleRule;
}(BaseStyleRule);
var pluginStyleRule = {
  onCreateRule: function onCreateRule(name, style, options) {
    if (name[0] === '@' || options.parent && options.parent.type === 'keyframes') {
      return null;
    }

    return new StyleRule(name, style, options);
  }
};

var defaultToStringOptions = {
  indent: 1,
  children: true
};
var atRegExp = /@([\w-]+)/;
/**
 * Conditional rule for @media, @supports
 */

var ConditionalRule =
/*#__PURE__*/
function () {
  function ConditionalRule(key, styles, options) {
    this.type = 'conditional';
    this.at = void 0;
    this.key = void 0;
    this.query = void 0;
    this.rules = void 0;
    this.options = void 0;
    this.isProcessed = false;
    this.renderable = void 0;
    this.key = key;
    var atMatch = key.match(atRegExp);
    this.at = atMatch ? atMatch[1] : 'unknown'; // Key might contain a unique suffix in case the `name` passed by user was duplicate.

    this.query = options.name || "@" + this.at;
    this.options = options;
    this.rules = new RuleList(_extends$2({}, options, {
      parent: this
    }));

    for (var name in styles) {
      this.rules.add(name, styles[name]);
    }

    this.rules.process();
  }
  /**
   * Get a rule.
   */


  var _proto = ConditionalRule.prototype;

  _proto.getRule = function getRule(name) {
    return this.rules.get(name);
  }
  /**
   * Get index of a rule.
   */
  ;

  _proto.indexOf = function indexOf(rule) {
    return this.rules.indexOf(rule);
  }
  /**
   * Create and register rule, run plugins.
   */
  ;

  _proto.addRule = function addRule(name, style, options) {
    var rule = this.rules.add(name, style, options);
    if (!rule) return null;
    this.options.jss.plugins.onProcessRule(rule);
    return rule;
  }
  /**
   * Generates a CSS string.
   */
  ;

  _proto.toString = function toString(options) {
    if (options === void 0) {
      options = defaultToStringOptions;
    }

    if (options.indent == null) options.indent = defaultToStringOptions.indent;
    if (options.children == null) options.children = defaultToStringOptions.children;

    if (options.children === false) {
      return this.query + " {}";
    }

    var children = this.rules.toString(options);
    return children ? this.query + " {\n" + children + "\n}" : '';
  };

  return ConditionalRule;
}();
var keyRegExp = /@media|@supports\s+/;
var pluginConditionalRule = {
  onCreateRule: function onCreateRule(key, styles, options) {
    return keyRegExp.test(key) ? new ConditionalRule(key, styles, options) : null;
  }
};

var defaultToStringOptions$1 = {
  indent: 1,
  children: true
};
var nameRegExp = /@keyframes\s+([\w-]+)/;
/**
 * Rule for @keyframes
 */

var KeyframesRule =
/*#__PURE__*/
function () {
  function KeyframesRule(key, frames, options) {
    this.type = 'keyframes';
    this.at = '@keyframes';
    this.key = void 0;
    this.name = void 0;
    this.id = void 0;
    this.rules = void 0;
    this.options = void 0;
    this.isProcessed = false;
    this.renderable = void 0;
    var nameMatch = key.match(nameRegExp);

    if (nameMatch && nameMatch[1]) {
      this.name = nameMatch[1];
    } else {
      this.name = 'noname';
      process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Bad keyframes name " + key) : void 0;
    }

    this.key = this.type + "-" + this.name;
    this.options = options;
    var scoped = options.scoped,
        sheet = options.sheet,
        generateId = options.generateId;
    this.id = scoped === false ? this.name : escape(generateId(this, sheet));
    this.rules = new RuleList(_extends$2({}, options, {
      parent: this
    }));

    for (var name in frames) {
      this.rules.add(name, frames[name], _extends$2({}, options, {
        parent: this
      }));
    }

    this.rules.process();
  }
  /**
   * Generates a CSS string.
   */


  var _proto = KeyframesRule.prototype;

  _proto.toString = function toString(options) {
    if (options === void 0) {
      options = defaultToStringOptions$1;
    }

    if (options.indent == null) options.indent = defaultToStringOptions$1.indent;
    if (options.children == null) options.children = defaultToStringOptions$1.children;

    if (options.children === false) {
      return this.at + " " + this.id + " {}";
    }

    var children = this.rules.toString(options);
    if (children) children = "\n" + children + "\n";
    return this.at + " " + this.id + " {" + children + "}";
  };

  return KeyframesRule;
}();
var keyRegExp$1 = /@keyframes\s+/;
var refRegExp = /\$([\w-]+)/g;

var findReferencedKeyframe = function findReferencedKeyframe(val, keyframes) {
  if (typeof val === 'string') {
    return val.replace(refRegExp, function (match, name) {
      if (name in keyframes) {
        return keyframes[name];
      }

      process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Referenced keyframes rule \"" + name + "\" is not defined.") : void 0;
      return match;
    });
  }

  return val;
};
/**
 * Replace the reference for a animation name.
 */


var replaceRef = function replaceRef(style, prop, keyframes) {
  var value = style[prop];
  var refKeyframe = findReferencedKeyframe(value, keyframes);

  if (refKeyframe !== value) {
    style[prop] = refKeyframe;
  }
};

var plugin = {
  onCreateRule: function onCreateRule(key, frames, options) {
    return typeof key === 'string' && keyRegExp$1.test(key) ? new KeyframesRule(key, frames, options) : null;
  },
  // Animation name ref replacer.
  onProcessStyle: function onProcessStyle(style, rule, sheet) {
    if (rule.type !== 'style' || !sheet) return style;
    if ('animation-name' in style) replaceRef(style, 'animation-name', sheet.keyframes);
    if ('animation' in style) replaceRef(style, 'animation', sheet.keyframes);
    return style;
  },
  onChangeValue: function onChangeValue(val, prop, rule) {
    var sheet = rule.options.sheet;

    if (!sheet) {
      return val;
    }

    switch (prop) {
      case 'animation':
        return findReferencedKeyframe(val, sheet.keyframes);

      case 'animation-name':
        return findReferencedKeyframe(val, sheet.keyframes);

      default:
        return val;
    }
  }
};

var KeyframeRule =
/*#__PURE__*/
function (_BaseStyleRule) {
  _inheritsLoose(KeyframeRule, _BaseStyleRule);

  function KeyframeRule() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _BaseStyleRule.call.apply(_BaseStyleRule, [this].concat(args)) || this;
    _this.renderable = void 0;
    return _this;
  }

  var _proto = KeyframeRule.prototype;

  /**
   * Generates a CSS string.
   */
  _proto.toString = function toString(options) {
    var sheet = this.options.sheet;
    var link = sheet ? sheet.options.link : false;
    var opts = link ? _extends$2({}, options, {
      allowEmpty: true
    }) : options;
    return toCss(this.key, this.style, opts);
  };

  return KeyframeRule;
}(BaseStyleRule);
var pluginKeyframeRule = {
  onCreateRule: function onCreateRule(key, style, options) {
    if (options.parent && options.parent.type === 'keyframes') {
      return new KeyframeRule(key, style, options);
    }

    return null;
  }
};

var FontFaceRule =
/*#__PURE__*/
function () {
  function FontFaceRule(key, style, options) {
    this.type = 'font-face';
    this.at = '@font-face';
    this.key = void 0;
    this.style = void 0;
    this.options = void 0;
    this.isProcessed = false;
    this.renderable = void 0;
    this.key = key;
    this.style = style;
    this.options = options;
  }
  /**
   * Generates a CSS string.
   */


  var _proto = FontFaceRule.prototype;

  _proto.toString = function toString(options) {
    if (Array.isArray(this.style)) {
      var str = '';

      for (var index = 0; index < this.style.length; index++) {
        str += toCss(this.at, this.style[index]);
        if (this.style[index + 1]) str += '\n';
      }

      return str;
    }

    return toCss(this.at, this.style, options);
  };

  return FontFaceRule;
}();
var keyRegExp$2 = /@font-face/;
var pluginFontFaceRule = {
  onCreateRule: function onCreateRule(key, style, options) {
    return keyRegExp$2.test(key) ? new FontFaceRule(key, style, options) : null;
  }
};

var ViewportRule =
/*#__PURE__*/
function () {
  function ViewportRule(key, style, options) {
    this.type = 'viewport';
    this.at = '@viewport';
    this.key = void 0;
    this.style = void 0;
    this.options = void 0;
    this.isProcessed = false;
    this.renderable = void 0;
    this.key = key;
    this.style = style;
    this.options = options;
  }
  /**
   * Generates a CSS string.
   */


  var _proto = ViewportRule.prototype;

  _proto.toString = function toString(options) {
    return toCss(this.key, this.style, options);
  };

  return ViewportRule;
}();
var pluginViewportRule = {
  onCreateRule: function onCreateRule(key, style, options) {
    return key === '@viewport' || key === '@-ms-viewport' ? new ViewportRule(key, style, options) : null;
  }
};

var SimpleRule =
/*#__PURE__*/
function () {
  function SimpleRule(key, value, options) {
    this.type = 'simple';
    this.key = void 0;
    this.value = void 0;
    this.options = void 0;
    this.isProcessed = false;
    this.renderable = void 0;
    this.key = key;
    this.value = value;
    this.options = options;
  }
  /**
   * Generates a CSS string.
   */
  // eslint-disable-next-line no-unused-vars


  var _proto = SimpleRule.prototype;

  _proto.toString = function toString(options) {
    if (Array.isArray(this.value)) {
      var str = '';

      for (var index = 0; index < this.value.length; index++) {
        str += this.key + " " + this.value[index] + ";";
        if (this.value[index + 1]) str += '\n';
      }

      return str;
    }

    return this.key + " " + this.value + ";";
  };

  return SimpleRule;
}();
var keysMap = {
  '@charset': true,
  '@import': true,
  '@namespace': true
};
var pluginSimpleRule = {
  onCreateRule: function onCreateRule(key, value, options) {
    return key in keysMap ? new SimpleRule(key, value, options) : null;
  }
};

var plugins = [pluginStyleRule, pluginConditionalRule, plugin, pluginKeyframeRule, pluginFontFaceRule, pluginViewportRule, pluginSimpleRule];

var defaultUpdateOptions = {
  process: true
};
var forceUpdateOptions = {
  force: true,
  process: true
  /**
   * Contains rules objects and allows adding/removing etc.
   * Is used for e.g. by `StyleSheet` or `ConditionalRule`.
   */

};

var RuleList =
/*#__PURE__*/
function () {
  // Rules registry for access by .get() method.
  // It contains the same rule registered by name and by selector.
  // Original styles object.
  // Used to ensure correct rules order.
  function RuleList(options) {
    this.map = {};
    this.raw = {};
    this.index = [];
    this.counter = 0;
    this.options = void 0;
    this.classes = void 0;
    this.keyframes = void 0;
    this.options = options;
    this.classes = options.classes;
    this.keyframes = options.keyframes;
  }
  /**
   * Create and register rule.
   *
   * Will not render after Style Sheet was rendered the first time.
   */


  var _proto = RuleList.prototype;

  _proto.add = function add(name, decl, ruleOptions) {
    var _this$options = this.options,
        parent = _this$options.parent,
        sheet = _this$options.sheet,
        jss = _this$options.jss,
        Renderer = _this$options.Renderer,
        generateId = _this$options.generateId,
        scoped = _this$options.scoped;

    var options = _extends$2({
      classes: this.classes,
      parent: parent,
      sheet: sheet,
      jss: jss,
      Renderer: Renderer,
      generateId: generateId,
      scoped: scoped,
      name: name,
      keyframes: this.keyframes,
      selector: undefined
    }, ruleOptions); // When user uses .createStyleSheet(), duplicate names are not possible, but
    // `sheet.addRule()` opens the door for any duplicate rule name. When this happens
    // we need to make the key unique within this RuleList instance scope.


    var key = name;

    if (name in this.raw) {
      key = name + "-d" + this.counter++;
    } // We need to save the original decl before creating the rule
    // because cache plugin needs to use it as a key to return a cached rule.


    this.raw[key] = decl;

    if (key in this.classes) {
      // E.g. rules inside of @media container
      options.selector = "." + escape(this.classes[key]);
    }

    var rule = createRule(key, decl, options);
    if (!rule) return null;
    this.register(rule);
    var index = options.index === undefined ? this.index.length : options.index;
    this.index.splice(index, 0, rule);
    return rule;
  }
  /**
   * Get a rule.
   */
  ;

  _proto.get = function get(name) {
    return this.map[name];
  }
  /**
   * Delete a rule.
   */
  ;

  _proto.remove = function remove(rule) {
    this.unregister(rule);
    delete this.raw[rule.key];
    this.index.splice(this.index.indexOf(rule), 1);
  }
  /**
   * Get index of a rule.
   */
  ;

  _proto.indexOf = function indexOf(rule) {
    return this.index.indexOf(rule);
  }
  /**
   * Run `onProcessRule()` plugins on every rule.
   */
  ;

  _proto.process = function process() {
    var plugins = this.options.jss.plugins; // We need to clone array because if we modify the index somewhere else during a loop
    // we end up with very hard-to-track-down side effects.

    this.index.slice(0).forEach(plugins.onProcessRule, plugins);
  }
  /**
   * Register a rule in `.map`, `.classes` and `.keyframes` maps.
   */
  ;

  _proto.register = function register(rule) {
    this.map[rule.key] = rule;

    if (rule instanceof StyleRule) {
      this.map[rule.selector] = rule;
      if (rule.id) this.classes[rule.key] = rule.id;
    } else if (rule instanceof KeyframesRule && this.keyframes) {
      this.keyframes[rule.name] = rule.id;
    }
  }
  /**
   * Unregister a rule.
   */
  ;

  _proto.unregister = function unregister(rule) {
    delete this.map[rule.key];

    if (rule instanceof StyleRule) {
      delete this.map[rule.selector];
      delete this.classes[rule.key];
    } else if (rule instanceof KeyframesRule) {
      delete this.keyframes[rule.name];
    }
  }
  /**
   * Update the function values with a new data.
   */
  ;

  _proto.update = function update() {
    var name;
    var data;
    var options;

    if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'string') {
      name = arguments.length <= 0 ? undefined : arguments[0]; // $FlowFixMe[invalid-tuple-index]

      data = arguments.length <= 1 ? undefined : arguments[1]; // $FlowFixMe[invalid-tuple-index]

      options = arguments.length <= 2 ? undefined : arguments[2];
    } else {
      data = arguments.length <= 0 ? undefined : arguments[0]; // $FlowFixMe[invalid-tuple-index]

      options = arguments.length <= 1 ? undefined : arguments[1];
      name = null;
    }

    if (name) {
      this.updateOne(this.map[name], data, options);
    } else {
      for (var index = 0; index < this.index.length; index++) {
        this.updateOne(this.index[index], data, options);
      }
    }
  }
  /**
   * Execute plugins, update rule props.
   */
  ;

  _proto.updateOne = function updateOne(rule, data, options) {
    if (options === void 0) {
      options = defaultUpdateOptions;
    }

    var _this$options2 = this.options,
        plugins = _this$options2.jss.plugins,
        sheet = _this$options2.sheet; // It is a rules container like for e.g. ConditionalRule.

    if (rule.rules instanceof RuleList) {
      rule.rules.update(data, options);
      return;
    }

    var styleRule = rule;
    var style = styleRule.style;
    plugins.onUpdate(data, rule, sheet, options); // We rely on a new `style` ref in case it was mutated during onUpdate hook.

    if (options.process && style && style !== styleRule.style) {
      // We need to run the plugins in case new `style` relies on syntax plugins.
      plugins.onProcessStyle(styleRule.style, styleRule, sheet); // Update and add props.

      for (var prop in styleRule.style) {
        var nextValue = styleRule.style[prop];
        var prevValue = style[prop]; // We need to use `force: true` because `rule.style` has been updated during onUpdate hook, so `rule.prop()` will not update the CSSOM rule.
        // We do this comparison to avoid unneeded `rule.prop()` calls, since we have the old `style` object here.

        if (nextValue !== prevValue) {
          styleRule.prop(prop, nextValue, forceUpdateOptions);
        }
      } // Remove props.


      for (var _prop in style) {
        var _nextValue = styleRule.style[_prop];
        var _prevValue = style[_prop]; // We need to use `force: true` because `rule.style` has been updated during onUpdate hook, so `rule.prop()` will not update the CSSOM rule.
        // We do this comparison to avoid unneeded `rule.prop()` calls, since we have the old `style` object here.

        if (_nextValue == null && _nextValue !== _prevValue) {
          styleRule.prop(_prop, null, forceUpdateOptions);
        }
      }
    }
  }
  /**
   * Convert rules to a CSS string.
   */
  ;

  _proto.toString = function toString(options) {
    var str = '';
    var sheet = this.options.sheet;
    var link = sheet ? sheet.options.link : false;

    for (var index = 0; index < this.index.length; index++) {
      var rule = this.index[index];
      var css = rule.toString(options); // No need to render an empty rule.

      if (!css && !link) continue;
      if (str) str += '\n';
      str += css;
    }

    return str;
  };

  return RuleList;
}();

var StyleSheet =
/*#__PURE__*/
function () {
  function StyleSheet(styles, options) {
    this.options = void 0;
    this.deployed = void 0;
    this.attached = void 0;
    this.rules = void 0;
    this.renderer = void 0;
    this.classes = void 0;
    this.keyframes = void 0;
    this.queue = void 0;
    this.attached = false;
    this.deployed = false;
    this.classes = {};
    this.keyframes = {};
    this.options = _extends$2({}, options, {
      sheet: this,
      parent: this,
      classes: this.classes,
      keyframes: this.keyframes
    });

    if (options.Renderer) {
      this.renderer = new options.Renderer(this);
    }

    this.rules = new RuleList(this.options);

    for (var name in styles) {
      this.rules.add(name, styles[name]);
    }

    this.rules.process();
  }
  /**
   * Attach renderable to the render tree.
   */


  var _proto = StyleSheet.prototype;

  _proto.attach = function attach() {
    if (this.attached) return this;
    if (this.renderer) this.renderer.attach();
    this.attached = true; // Order is important, because we can't use insertRule API if style element is not attached.

    if (!this.deployed) this.deploy();
    return this;
  }
  /**
   * Remove renderable from render tree.
   */
  ;

  _proto.detach = function detach() {
    if (!this.attached) return this;
    if (this.renderer) this.renderer.detach();
    this.attached = false;
    return this;
  }
  /**
   * Add a rule to the current stylesheet.
   * Will insert a rule also after the stylesheet has been rendered first time.
   */
  ;

  _proto.addRule = function addRule(name, decl, options) {
    var queue = this.queue; // Plugins can create rules.
    // In order to preserve the right order, we need to queue all `.addRule` calls,
    // which happen after the first `rules.add()` call.

    if (this.attached && !queue) this.queue = [];
    var rule = this.rules.add(name, decl, options);
    if (!rule) return null;
    this.options.jss.plugins.onProcessRule(rule);

    if (this.attached) {
      if (!this.deployed) return rule; // Don't insert rule directly if there is no stringified version yet.
      // It will be inserted all together when .attach is called.

      if (queue) queue.push(rule);else {
        this.insertRule(rule);

        if (this.queue) {
          this.queue.forEach(this.insertRule, this);
          this.queue = undefined;
        }
      }
      return rule;
    } // We can't add rules to a detached style node.
    // We will redeploy the sheet once user will attach it.


    this.deployed = false;
    return rule;
  }
  /**
   * Insert rule into the StyleSheet
   */
  ;

  _proto.insertRule = function insertRule(rule) {
    if (this.renderer) {
      this.renderer.insertRule(rule);
    }
  }
  /**
   * Create and add rules.
   * Will render also after Style Sheet was rendered the first time.
   */
  ;

  _proto.addRules = function addRules(styles, options) {
    var added = [];

    for (var name in styles) {
      var rule = this.addRule(name, styles[name], options);
      if (rule) added.push(rule);
    }

    return added;
  }
  /**
   * Get a rule by name.
   */
  ;

  _proto.getRule = function getRule(name) {
    return this.rules.get(name);
  }
  /**
   * Delete a rule by name.
   * Returns `true`: if rule has been deleted from the DOM.
   */
  ;

  _proto.deleteRule = function deleteRule(name) {
    var rule = typeof name === 'object' ? name : this.rules.get(name);

    if (!rule || // Style sheet was created without link: true and attached, in this case we
    // won't be able to remove the CSS rule from the DOM.
    this.attached && !rule.renderable) {
      return false;
    }

    this.rules.remove(rule);

    if (this.attached && rule.renderable && this.renderer) {
      return this.renderer.deleteRule(rule.renderable);
    }

    return true;
  }
  /**
   * Get index of a rule.
   */
  ;

  _proto.indexOf = function indexOf(rule) {
    return this.rules.indexOf(rule);
  }
  /**
   * Deploy pure CSS string to a renderable.
   */
  ;

  _proto.deploy = function deploy() {
    if (this.renderer) this.renderer.deploy();
    this.deployed = true;
    return this;
  }
  /**
   * Update the function values with a new data.
   */
  ;

  _proto.update = function update() {
    var _this$rules;

    (_this$rules = this.rules).update.apply(_this$rules, arguments);

    return this;
  }
  /**
   * Updates a single rule.
   */
  ;

  _proto.updateOne = function updateOne(rule, data, options) {
    this.rules.updateOne(rule, data, options);
    return this;
  }
  /**
   * Convert rules to a CSS string.
   */
  ;

  _proto.toString = function toString(options) {
    return this.rules.toString(options);
  };

  return StyleSheet;
}();

var PluginsRegistry =
/*#__PURE__*/
function () {
  function PluginsRegistry() {
    this.plugins = {
      internal: [],
      external: []
    };
    this.registry = void 0;
  }

  var _proto = PluginsRegistry.prototype;

  /**
   * Call `onCreateRule` hooks and return an object if returned by a hook.
   */
  _proto.onCreateRule = function onCreateRule(name, decl, options) {
    for (var i = 0; i < this.registry.onCreateRule.length; i++) {
      var rule = this.registry.onCreateRule[i](name, decl, options);
      if (rule) return rule;
    }

    return null;
  }
  /**
   * Call `onProcessRule` hooks.
   */
  ;

  _proto.onProcessRule = function onProcessRule(rule) {
    if (rule.isProcessed) return;
    var sheet = rule.options.sheet;

    for (var i = 0; i < this.registry.onProcessRule.length; i++) {
      this.registry.onProcessRule[i](rule, sheet);
    }

    if (rule.style) this.onProcessStyle(rule.style, rule, sheet);
    rule.isProcessed = true;
  }
  /**
   * Call `onProcessStyle` hooks.
   */
  ;

  _proto.onProcessStyle = function onProcessStyle(style, rule, sheet) {
    for (var i = 0; i < this.registry.onProcessStyle.length; i++) {
      // $FlowFixMe[prop-missing]
      rule.style = this.registry.onProcessStyle[i](rule.style, rule, sheet);
    }
  }
  /**
   * Call `onProcessSheet` hooks.
   */
  ;

  _proto.onProcessSheet = function onProcessSheet(sheet) {
    for (var i = 0; i < this.registry.onProcessSheet.length; i++) {
      this.registry.onProcessSheet[i](sheet);
    }
  }
  /**
   * Call `onUpdate` hooks.
   */
  ;

  _proto.onUpdate = function onUpdate(data, rule, sheet, options) {
    for (var i = 0; i < this.registry.onUpdate.length; i++) {
      this.registry.onUpdate[i](data, rule, sheet, options);
    }
  }
  /**
   * Call `onChangeValue` hooks.
   */
  ;

  _proto.onChangeValue = function onChangeValue(value, prop, rule) {
    var processedValue = value;

    for (var i = 0; i < this.registry.onChangeValue.length; i++) {
      processedValue = this.registry.onChangeValue[i](processedValue, prop, rule);
    }

    return processedValue;
  }
  /**
   * Register a plugin.
   */
  ;

  _proto.use = function use(newPlugin, options) {
    if (options === void 0) {
      options = {
        queue: 'external'
      };
    }

    var plugins = this.plugins[options.queue]; // Avoids applying same plugin twice, at least based on ref.

    if (plugins.indexOf(newPlugin) !== -1) {
      return;
    }

    plugins.push(newPlugin);
    this.registry = [].concat(this.plugins.external, this.plugins.internal).reduce(function (registry, plugin) {
      for (var name in plugin) {
        if (name in registry) {
          registry[name].push(plugin[name]);
        } else {
          process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Unknown hook \"" + name + "\".") : void 0;
        }
      }

      return registry;
    }, {
      onCreateRule: [],
      onProcessRule: [],
      onProcessStyle: [],
      onProcessSheet: [],
      onChangeValue: [],
      onUpdate: []
    });
  };

  return PluginsRegistry;
}();

/**
 * Sheets registry to access them all at one place.
 */
var SheetsRegistry =
/*#__PURE__*/
function () {
  function SheetsRegistry() {
    this.registry = [];
  }

  var _proto = SheetsRegistry.prototype;

  /**
   * Register a Style Sheet.
   */
  _proto.add = function add(sheet) {
    var registry = this.registry;
    var index = sheet.options.index;
    if (registry.indexOf(sheet) !== -1) return;

    if (registry.length === 0 || index >= this.index) {
      registry.push(sheet);
      return;
    } // Find a position.


    for (var i = 0; i < registry.length; i++) {
      if (registry[i].options.index > index) {
        registry.splice(i, 0, sheet);
        return;
      }
    }
  }
  /**
   * Reset the registry.
   */
  ;

  _proto.reset = function reset() {
    this.registry = [];
  }
  /**
   * Remove a Style Sheet.
   */
  ;

  _proto.remove = function remove(sheet) {
    var index = this.registry.indexOf(sheet);
    this.registry.splice(index, 1);
  }
  /**
   * Convert all attached sheets to a CSS string.
   */
  ;

  _proto.toString = function toString(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        attached = _ref.attached,
        options = _objectWithoutPropertiesLoose$3(_ref, ["attached"]);

    var css = '';

    for (var i = 0; i < this.registry.length; i++) {
      var sheet = this.registry[i];

      if (attached != null && sheet.attached !== attached) {
        continue;
      }

      if (css) css += '\n';
      css += sheet.toString(options);
    }

    return css;
  };

  _createClass$1(SheetsRegistry, [{
    key: "index",

    /**
     * Current highest index number.
     */
    get: function get() {
      return this.registry.length === 0 ? 0 : this.registry[this.registry.length - 1].options.index;
    }
  }]);

  return SheetsRegistry;
}();

/**
 * This is a global sheets registry. Only DomRenderer will add sheets to it.
 * On the server one should use an own SheetsRegistry instance and add the
 * sheets to it, because you need to make sure to create a new registry for
 * each request in order to not leak sheets across requests.
 */

var registry = new SheetsRegistry();

/* eslint-disable */
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var globalThis = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();

var ns = '2f1acc6c3a606b082e5eef5e54414ffb';
if (globalThis[ns] == null) globalThis[ns] = 0; // Bundle may contain multiple JSS versions at the same time. In order to identify
// the current version with just one short number and use it for classes generation
// we use a counter. Also it is more accurate, because user can manually reevaluate
// the module.

var moduleId = globalThis[ns]++;

var maxRules = 1e10;

/**
 * Returns a function which generates unique class names based on counters.
 * When new generator function is created, rule counter is reseted.
 * We need to reset the rule counter for SSR for each request.
 */
var createGenerateId = function createGenerateId(options) {
  if (options === void 0) {
    options = {};
  }

  var ruleCounter = 0;
  return function (rule, sheet) {
    ruleCounter += 1;

    if (ruleCounter > maxRules) {
      process.env.NODE_ENV !== "production" ? warning(false, "[JSS] You might have a memory leak. Rule counter is at " + ruleCounter + ".") : void 0;
    }

    var jssId = '';
    var prefix = '';

    if (sheet) {
      if (sheet.options.classNamePrefix) {
        prefix = sheet.options.classNamePrefix;
      }

      if (sheet.options.jss.id != null) {
        jssId = String(sheet.options.jss.id);
      }
    }

    if (options.minify) {
      // Using "c" because a number can't be the first char in a class name.
      return "" + (prefix || 'c') + moduleId + jssId + ruleCounter;
    }

    return prefix + rule.key + "-" + moduleId + (jssId ? "-" + jssId : '') + "-" + ruleCounter;
  };
};

/**
 * Cache the value from the first time a function is called.
 */
var memoize$1 = function memoize(fn) {
  var value;
  return function () {
    if (!value) value = fn();
    return value;
  };
};

/**
 * Get a style property value.
 */
var getPropertyValue = function getPropertyValue(cssRule, prop) {
  try {
    // Support CSSTOM.
    if (cssRule.attributeStyleMap) {
      return cssRule.attributeStyleMap.get(prop);
    }

    return cssRule.style.getPropertyValue(prop);
  } catch (err) {
    // IE may throw if property is unknown.
    return '';
  }
};

/**
 * Set a style property.
 */
var setProperty = function setProperty(cssRule, prop, value) {
  try {
    var cssValue = value;

    if (Array.isArray(value)) {
      cssValue = toCssValue(value, true);

      if (value[value.length - 1] === '!important') {
        cssRule.style.setProperty(prop, cssValue, 'important');
        return true;
      }
    } // Support CSSTOM.


    if (cssRule.attributeStyleMap) {
      cssRule.attributeStyleMap.set(prop, cssValue);
    } else {
      cssRule.style.setProperty(prop, cssValue);
    }
  } catch (err) {
    // IE may throw if property is unknown.
    return false;
  }

  return true;
};

/**
 * Remove a style property.
 */
var removeProperty = function removeProperty(cssRule, prop) {
  try {
    // Support CSSTOM.
    if (cssRule.attributeStyleMap) {
      cssRule.attributeStyleMap.delete(prop);
    } else {
      cssRule.style.removeProperty(prop);
    }
  } catch (err) {
    process.env.NODE_ENV !== "production" ? warning(false, "[JSS] DOMException \"" + err.message + "\" was thrown. Tried to remove property \"" + prop + "\".") : void 0;
  }
};

/**
 * Set the selector.
 */
var setSelector = function setSelector(cssRule, selectorText) {
  cssRule.selectorText = selectorText; // Return false if setter was not successful.
  // Currently works in chrome only.

  return cssRule.selectorText === selectorText;
};
/**
 * Gets the `head` element upon the first call and caches it.
 * We assume it can't be null.
 */


var getHead = memoize$1(function () {
  return document.querySelector('head');
});
/**
 * Find attached sheet with an index higher than the passed one.
 */

function findHigherSheet(registry, options) {
  for (var i = 0; i < registry.length; i++) {
    var sheet = registry[i];

    if (sheet.attached && sheet.options.index > options.index && sheet.options.insertionPoint === options.insertionPoint) {
      return sheet;
    }
  }

  return null;
}
/**
 * Find attached sheet with the highest index.
 */


function findHighestSheet(registry, options) {
  for (var i = registry.length - 1; i >= 0; i--) {
    var sheet = registry[i];

    if (sheet.attached && sheet.options.insertionPoint === options.insertionPoint) {
      return sheet;
    }
  }

  return null;
}
/**
 * Find a comment with "jss" inside.
 */


function findCommentNode(text) {
  var head = getHead();

  for (var i = 0; i < head.childNodes.length; i++) {
    var node = head.childNodes[i];

    if (node.nodeType === 8 && node.nodeValue.trim() === text) {
      return node;
    }
  }

  return null;
}

/**
 * Find a node before which we can insert the sheet.
 */
function findPrevNode(options) {
  var registry$1 = registry.registry;

  if (registry$1.length > 0) {
    // Try to insert before the next higher sheet.
    var sheet = findHigherSheet(registry$1, options);

    if (sheet && sheet.renderer) {
      return {
        parent: sheet.renderer.element.parentNode,
        node: sheet.renderer.element
      };
    } // Otherwise insert after the last attached.


    sheet = findHighestSheet(registry$1, options);

    if (sheet && sheet.renderer) {
      return {
        parent: sheet.renderer.element.parentNode,
        node: sheet.renderer.element.nextSibling
      };
    }
  } // Try to find a comment placeholder if registry is empty.


  var insertionPoint = options.insertionPoint;

  if (insertionPoint && typeof insertionPoint === 'string') {
    var comment = findCommentNode(insertionPoint);

    if (comment) {
      return {
        parent: comment.parentNode,
        node: comment.nextSibling
      };
    } // If user specifies an insertion point and it can't be found in the document -
    // bad specificity issues may appear.


    process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Insertion point \"" + insertionPoint + "\" not found.") : void 0;
  }

  return false;
}
/**
 * Insert style element into the DOM.
 */


function insertStyle(style, options) {
  var insertionPoint = options.insertionPoint;
  var nextNode = findPrevNode(options);

  if (nextNode !== false && nextNode.parent) {
    nextNode.parent.insertBefore(style, nextNode.node);
    return;
  } // Works with iframes and any node types.


  if (insertionPoint && typeof insertionPoint.nodeType === 'number') {
    // https://stackoverflow.com/questions/41328728/force-casting-in-flow
    var insertionPointElement = insertionPoint;
    var parentNode = insertionPointElement.parentNode;
    if (parentNode) parentNode.insertBefore(style, insertionPointElement.nextSibling);else process.env.NODE_ENV !== "production" ? warning(false, '[JSS] Insertion point is not in the DOM.') : void 0;
    return;
  }

  getHead().appendChild(style);
}
/**
 * Read jss nonce setting from the page if the user has set it.
 */


var getNonce = memoize$1(function () {
  var node = document.querySelector('meta[property="csp-nonce"]');
  return node ? node.getAttribute('content') : null;
});

var _insertRule = function insertRule(container, rule, index) {
  try {
    if ('insertRule' in container) {
      var c = container;
      c.insertRule(rule, index);
    } // Keyframes rule.
    else if ('appendRule' in container) {
        var _c = container;

        _c.appendRule(rule);
      }
  } catch (err) {
    process.env.NODE_ENV !== "production" ? warning(false, "[JSS] " + err.message) : void 0;
    return false;
  }

  return container.cssRules[index];
};

var getValidRuleInsertionIndex = function getValidRuleInsertionIndex(container, index) {
  var maxIndex = container.cssRules.length; // In case previous insertion fails, passed index might be wrong

  if (index === undefined || index > maxIndex) {
    // eslint-disable-next-line no-param-reassign
    return maxIndex;
  }

  return index;
};

var createStyle = function createStyle() {
  var el = document.createElement('style'); // Without it, IE will have a broken source order specificity if we
  // insert rules after we insert the style tag.
  // It seems to kick-off the source order specificity algorithm.

  el.textContent = '\n';
  return el;
};

var DomRenderer =
/*#__PURE__*/
function () {
  // HTMLStyleElement needs fixing https://github.com/facebook/flow/issues/2696
  // Will be empty if link: true option is not set, because
  // it is only for use together with insertRule API.
  function DomRenderer(sheet) {
    this.getPropertyValue = getPropertyValue;
    this.setProperty = setProperty;
    this.removeProperty = removeProperty;
    this.setSelector = setSelector;
    this.element = void 0;
    this.sheet = void 0;
    this.hasInsertedRules = false;
    this.cssRules = [];
    // There is no sheet when the renderer is used from a standalone StyleRule.
    if (sheet) registry.add(sheet);
    this.sheet = sheet;

    var _ref = this.sheet ? this.sheet.options : {},
        media = _ref.media,
        meta = _ref.meta,
        element = _ref.element;

    this.element = element || createStyle();
    this.element.setAttribute('data-jss', '');
    if (media) this.element.setAttribute('media', media);
    if (meta) this.element.setAttribute('data-meta', meta);
    var nonce = getNonce();
    if (nonce) this.element.setAttribute('nonce', nonce);
  }
  /**
   * Insert style element into render tree.
   */


  var _proto = DomRenderer.prototype;

  _proto.attach = function attach() {
    // In the case the element node is external and it is already in the DOM.
    if (this.element.parentNode || !this.sheet) return;
    insertStyle(this.element, this.sheet.options); // When rules are inserted using `insertRule` API, after `sheet.detach().attach()`
    // most browsers create a new CSSStyleSheet, except of all IEs.

    var deployed = Boolean(this.sheet && this.sheet.deployed);

    if (this.hasInsertedRules && deployed) {
      this.hasInsertedRules = false;
      this.deploy();
    }
  }
  /**
   * Remove style element from render tree.
   */
  ;

  _proto.detach = function detach() {
    if (!this.sheet) return;
    var parentNode = this.element.parentNode;
    if (parentNode) parentNode.removeChild(this.element); // In the most browsers, rules inserted using insertRule() API will be lost when style element is removed.
    // Though IE will keep them and we need a consistent behavior.

    if (this.sheet.options.link) {
      this.cssRules = [];
      this.element.textContent = '\n';
    }
  }
  /**
   * Inject CSS string into element.
   */
  ;

  _proto.deploy = function deploy() {
    var sheet = this.sheet;
    if (!sheet) return;

    if (sheet.options.link) {
      this.insertRules(sheet.rules);
      return;
    }

    this.element.textContent = "\n" + sheet.toString() + "\n";
  }
  /**
   * Insert RuleList into an element.
   */
  ;

  _proto.insertRules = function insertRules(rules, nativeParent) {
    for (var i = 0; i < rules.index.length; i++) {
      this.insertRule(rules.index[i], i, nativeParent);
    }
  }
  /**
   * Insert a rule into element.
   */
  ;

  _proto.insertRule = function insertRule(rule, index, nativeParent) {
    if (nativeParent === void 0) {
      nativeParent = this.element.sheet;
    }

    if (rule.rules) {
      var parent = rule;
      var latestNativeParent = nativeParent;

      if (rule.type === 'conditional' || rule.type === 'keyframes') {
        var _insertionIndex = getValidRuleInsertionIndex(nativeParent, index); // We need to render the container without children first.


        latestNativeParent = _insertRule(nativeParent, parent.toString({
          children: false
        }), _insertionIndex);

        if (latestNativeParent === false) {
          return false;
        }

        this.refCssRule(rule, _insertionIndex, latestNativeParent);
      }

      this.insertRules(parent.rules, latestNativeParent);
      return latestNativeParent;
    }

    var ruleStr = rule.toString();
    if (!ruleStr) return false;
    var insertionIndex = getValidRuleInsertionIndex(nativeParent, index);

    var nativeRule = _insertRule(nativeParent, ruleStr, insertionIndex);

    if (nativeRule === false) {
      return false;
    }

    this.hasInsertedRules = true;
    this.refCssRule(rule, insertionIndex, nativeRule);
    return nativeRule;
  };

  _proto.refCssRule = function refCssRule(rule, index, cssRule) {
    rule.renderable = cssRule; // We only want to reference the top level rules, deleteRule API doesn't support removing nested rules
    // like rules inside media queries or keyframes

    if (rule.options.parent instanceof StyleSheet) {
      this.cssRules[index] = cssRule;
    }
  }
  /**
   * Delete a rule.
   */
  ;

  _proto.deleteRule = function deleteRule(cssRule) {
    var sheet = this.element.sheet;
    var index = this.indexOf(cssRule);
    if (index === -1) return false;
    sheet.deleteRule(index);
    this.cssRules.splice(index, 1);
    return true;
  }
  /**
   * Get index of a CSS Rule.
   */
  ;

  _proto.indexOf = function indexOf(cssRule) {
    return this.cssRules.indexOf(cssRule);
  }
  /**
   * Generate a new CSS rule and replace the existing one.
   *
   * Only used for some old browsers because they can't set a selector.
   */
  ;

  _proto.replaceRule = function replaceRule(cssRule, rule) {
    var index = this.indexOf(cssRule);
    if (index === -1) return false;
    this.element.sheet.deleteRule(index);
    this.cssRules.splice(index, 1);
    return this.insertRule(rule, index);
  }
  /**
   * Get all rules elements.
   */
  ;

  _proto.getRules = function getRules() {
    return this.element.sheet.cssRules;
  };

  return DomRenderer;
}();

var instanceCounter = 0;

var Jss =
/*#__PURE__*/
function () {
  function Jss(options) {
    this.id = instanceCounter++;
    this.version = "10.5.0";
    this.plugins = new PluginsRegistry();
    this.options = {
      id: {
        minify: false
      },
      createGenerateId: createGenerateId,
      Renderer: isBrowser ? DomRenderer : null,
      plugins: []
    };
    this.generateId = createGenerateId({
      minify: false
    });

    for (var i = 0; i < plugins.length; i++) {
      this.plugins.use(plugins[i], {
        queue: 'internal'
      });
    }

    this.setup(options);
  }
  /**
   * Prepares various options, applies plugins.
   * Should not be used twice on the same instance, because there is no plugins
   * deduplication logic.
   */


  var _proto = Jss.prototype;

  _proto.setup = function setup(options) {
    if (options === void 0) {
      options = {};
    }

    if (options.createGenerateId) {
      this.options.createGenerateId = options.createGenerateId;
    }

    if (options.id) {
      this.options.id = _extends$2({}, this.options.id, options.id);
    }

    if (options.createGenerateId || options.id) {
      this.generateId = this.options.createGenerateId(this.options.id);
    }

    if (options.insertionPoint != null) this.options.insertionPoint = options.insertionPoint;

    if ('Renderer' in options) {
      this.options.Renderer = options.Renderer;
    } // eslint-disable-next-line prefer-spread


    if (options.plugins) this.use.apply(this, options.plugins);
    return this;
  }
  /**
   * Create a Style Sheet.
   */
  ;

  _proto.createStyleSheet = function createStyleSheet(styles, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        index = _options.index;

    if (typeof index !== 'number') {
      index = registry.index === 0 ? 0 : registry.index + 1;
    }

    var sheet = new StyleSheet(styles, _extends$2({}, options, {
      jss: this,
      generateId: options.generateId || this.generateId,
      insertionPoint: this.options.insertionPoint,
      Renderer: this.options.Renderer,
      index: index
    }));
    this.plugins.onProcessSheet(sheet);
    return sheet;
  }
  /**
   * Detach the Style Sheet and remove it from the registry.
   */
  ;

  _proto.removeStyleSheet = function removeStyleSheet(sheet) {
    sheet.detach();
    registry.remove(sheet);
    return this;
  }
  /**
   * Create a rule without a Style Sheet.
   * [Deprecated] will be removed in the next major version.
   */
  ;

  _proto.createRule = function createRule$1(name, style, options) {
    if (style === void 0) {
      style = {};
    }

    if (options === void 0) {
      options = {};
    }

    // Enable rule without name for inline styles.
    if (typeof name === 'object') {
      // $FlowFixMe[incompatible-call]
      return this.createRule(undefined, name, style);
    } // $FlowFixMe[incompatible-type]


    var ruleOptions = _extends$2({}, options, {
      name: name,
      jss: this,
      Renderer: this.options.Renderer
    });

    if (!ruleOptions.generateId) ruleOptions.generateId = this.generateId;
    if (!ruleOptions.classes) ruleOptions.classes = {};
    if (!ruleOptions.keyframes) ruleOptions.keyframes = {};

    var rule = createRule(name, style, ruleOptions);

    if (rule) this.plugins.onProcessRule(rule);
    return rule;
  }
  /**
   * Register plugin. Passed function will be invoked with a rule instance.
   */
  ;

  _proto.use = function use() {
    var _this = this;

    for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
      plugins[_key] = arguments[_key];
    }

    plugins.forEach(function (plugin) {
      _this.plugins.use(plugin);
    });
    return this;
  };

  return Jss;
}();

/**
 * Extracts a styles object with only props that contain function values.
 */
function getDynamicStyles(styles) {
  var to = null;

  for (var key in styles) {
    var value = styles[key];
    var type = typeof value;

    if (type === 'function') {
      if (!to) to = {};
      to[key] = value;
    } else if (type === 'object' && value !== null && !Array.isArray(value)) {
      var extracted = getDynamicStyles(value);

      if (extracted) {
        if (!to) to = {};
        to[key] = extracted;
      }
    }
  }

  return to;
}

/**
 * A better abstraction over CSS.
 *
 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
 * @website https://github.com/cssinjs/jss
 * @license MIT
 */

/**
 * Export a constant indicating if this browser has CSSTOM support.
 * https://developers.google.com/web/updates/2018/03/cssom
 */
var hasCSSTOMSupport = typeof CSS === 'object' && CSS != null && 'number' in CSS;
/**
 * Creates a new instance of Jss.
 */

var create = function create(options) {
  return new Jss(options);
};
/**
 * A global Jss instance.
 */

var jss = create();

var now = Date.now();
var fnValuesNs = "fnValues" + now;
var fnRuleNs = "fnStyle" + ++now;

var functionPlugin = function functionPlugin() {
  return {
    onCreateRule: function onCreateRule(name, decl, options) {
      if (typeof decl !== 'function') return null;
      var rule = createRule(name, {}, options);
      rule[fnRuleNs] = decl;
      return rule;
    },
    onProcessStyle: function onProcessStyle(style, rule) {
      // We need to extract function values from the declaration, so that we can keep core unaware of them.
      // We need to do that only once.
      // We don't need to extract functions on each style update, since this can happen only once.
      // We don't support function values inside of function rules.
      if (fnValuesNs in rule || fnRuleNs in rule) return style;
      var fnValues = {};

      for (var prop in style) {
        var value = style[prop];
        if (typeof value !== 'function') continue;
        delete style[prop];
        fnValues[prop] = value;
      } // $FlowFixMe[prop-missing]


      rule[fnValuesNs] = fnValues;
      return style;
    },
    onUpdate: function onUpdate(data, rule, sheet, options) {
      var styleRule = rule; // $FlowFixMe[prop-missing]

      var fnRule = styleRule[fnRuleNs]; // If we have a style function, the entire rule is dynamic and style object
      // will be returned from that function.

      if (fnRule) {
        // Empty object will remove all currently defined props
        // in case function rule returns a falsy value.
        styleRule.style = fnRule(data) || {};

        if (process.env.NODE_ENV === 'development') {
          for (var prop in styleRule.style) {
            if (typeof styleRule.style[prop] === 'function') {
              process.env.NODE_ENV !== "production" ? warning(false, '[JSS] Function values inside function rules are not supported.') : void 0;
              break;
            }
          }
        }
      } // $FlowFixMe[prop-missing]


      var fnValues = styleRule[fnValuesNs]; // If we have a fn values map, it is a rule with function values.

      if (fnValues) {
        for (var _prop in fnValues) {
          styleRule.prop(_prop, fnValues[_prop](data), options);
        }
      }
    }
  };
};

function _extends$3() {
  _extends$3 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$3.apply(this, arguments);
}

var at = '@global';
var atPrefix = '@global ';

var GlobalContainerRule =
/*#__PURE__*/
function () {
  function GlobalContainerRule(key, styles, options) {
    this.type = 'global';
    this.at = at;
    this.rules = void 0;
    this.options = void 0;
    this.key = void 0;
    this.isProcessed = false;
    this.key = key;
    this.options = options;
    this.rules = new RuleList(_extends$3({}, options, {
      parent: this
    }));

    for (var selector in styles) {
      this.rules.add(selector, styles[selector]);
    }

    this.rules.process();
  }
  /**
   * Get a rule.
   */


  var _proto = GlobalContainerRule.prototype;

  _proto.getRule = function getRule(name) {
    return this.rules.get(name);
  }
  /**
   * Create and register rule, run plugins.
   */
  ;

  _proto.addRule = function addRule(name, style, options) {
    var rule = this.rules.add(name, style, options);
    if (rule) this.options.jss.plugins.onProcessRule(rule);
    return rule;
  }
  /**
   * Get index of a rule.
   */
  ;

  _proto.indexOf = function indexOf(rule) {
    return this.rules.indexOf(rule);
  }
  /**
   * Generates a CSS string.
   */
  ;

  _proto.toString = function toString() {
    return this.rules.toString();
  };

  return GlobalContainerRule;
}();

var GlobalPrefixedRule =
/*#__PURE__*/
function () {
  function GlobalPrefixedRule(key, style, options) {
    this.type = 'global';
    this.at = at;
    this.options = void 0;
    this.rule = void 0;
    this.isProcessed = false;
    this.key = void 0;
    this.key = key;
    this.options = options;
    var selector = key.substr(atPrefix.length);
    this.rule = options.jss.createRule(selector, style, _extends$3({}, options, {
      parent: this
    }));
  }

  var _proto2 = GlobalPrefixedRule.prototype;

  _proto2.toString = function toString(options) {
    return this.rule ? this.rule.toString(options) : '';
  };

  return GlobalPrefixedRule;
}();

var separatorRegExp = /\s*,\s*/g;

function addScope(selector, scope) {
  var parts = selector.split(separatorRegExp);
  var scoped = '';

  for (var i = 0; i < parts.length; i++) {
    scoped += scope + " " + parts[i].trim();
    if (parts[i + 1]) scoped += ', ';
  }

  return scoped;
}

function handleNestedGlobalContainerRule(rule, sheet) {
  var options = rule.options,
      style = rule.style;
  var rules = style ? style[at] : null;
  if (!rules) return;

  for (var name in rules) {
    sheet.addRule(name, rules[name], _extends$3({}, options, {
      selector: addScope(name, rule.selector)
    }));
  }

  delete style[at];
}

function handlePrefixedGlobalRule(rule, sheet) {
  var options = rule.options,
      style = rule.style;

  for (var prop in style) {
    if (prop[0] !== '@' || prop.substr(0, at.length) !== at) continue;
    var selector = addScope(prop.substr(at.length), rule.selector);
    sheet.addRule(selector, style[prop], _extends$3({}, options, {
      selector: selector
    }));
    delete style[prop];
  }
}
/**
 * Convert nested rules to separate, remove them from original styles.
 *
 * @param {Rule} rule
 * @api public
 */


function jssGlobal() {
  function onCreateRule(name, styles, options) {
    if (!name) return null;

    if (name === at) {
      return new GlobalContainerRule(name, styles, options);
    }

    if (name[0] === '@' && name.substr(0, atPrefix.length) === atPrefix) {
      return new GlobalPrefixedRule(name, styles, options);
    }

    var parent = options.parent;

    if (parent) {
      if (parent.type === 'global' || parent.options.parent && parent.options.parent.type === 'global') {
        options.scoped = false;
      }
    }

    if (options.scoped === false) {
      options.selector = name;
    }

    return null;
  }

  function onProcessRule(rule, sheet) {
    if (rule.type !== 'style' || !sheet) return;
    handleNestedGlobalContainerRule(rule, sheet);
    handlePrefixedGlobalRule(rule, sheet);
  }

  return {
    onCreateRule: onCreateRule,
    onProcessRule: onProcessRule
  };
}

function _extends$4() {
  _extends$4 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$4.apply(this, arguments);
}

var separatorRegExp$1 = /\s*,\s*/g;
var parentRegExp = /&/g;
var refRegExp$1 = /\$([\w-]+)/g;
/**
 * Convert nested rules to separate, remove them from original styles.
 *
 * @param {Rule} rule
 * @api public
 */

function jssNested() {
  // Get a function to be used for $ref replacement.
  function getReplaceRef(container, sheet) {
    return function (match, key) {
      var rule = container.getRule(key) || sheet && sheet.getRule(key);

      if (rule) {
        rule = rule;
        return rule.selector;
      }

      process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Could not find the referenced rule \"" + key + "\" in \"" + (container.options.meta || container.toString()) + "\".") : void 0;
      return key;
    };
  }

  function replaceParentRefs(nestedProp, parentProp) {
    var parentSelectors = parentProp.split(separatorRegExp$1);
    var nestedSelectors = nestedProp.split(separatorRegExp$1);
    var result = '';

    for (var i = 0; i < parentSelectors.length; i++) {
      var parent = parentSelectors[i];

      for (var j = 0; j < nestedSelectors.length; j++) {
        var nested = nestedSelectors[j];
        if (result) result += ', '; // Replace all & by the parent or prefix & with the parent.

        result += nested.indexOf('&') !== -1 ? nested.replace(parentRegExp, parent) : parent + " " + nested;
      }
    }

    return result;
  }

  function getOptions(rule, container, prevOptions) {
    // Options has been already created, now we only increase index.
    if (prevOptions) return _extends$4({}, prevOptions, {
      index: prevOptions.index + 1 // $FlowFixMe[prop-missing]

    });
    var nestingLevel = rule.options.nestingLevel;
    nestingLevel = nestingLevel === undefined ? 1 : nestingLevel + 1;

    var options = _extends$4({}, rule.options, {
      nestingLevel: nestingLevel,
      index: container.indexOf(rule) + 1 // We don't need the parent name to be set options for chlid.

    });

    delete options.name;
    return options;
  }

  function onProcessStyle(style, rule, sheet) {
    if (rule.type !== 'style') return style;
    var styleRule = rule;
    var container = styleRule.options.parent;
    var options;
    var replaceRef;

    for (var prop in style) {
      var isNested = prop.indexOf('&') !== -1;
      var isNestedConditional = prop[0] === '@';
      if (!isNested && !isNestedConditional) continue;
      options = getOptions(styleRule, container, options);

      if (isNested) {
        var selector = replaceParentRefs(prop, styleRule.selector); // Lazily create the ref replacer function just once for
        // all nested rules within the sheet.

        if (!replaceRef) replaceRef = getReplaceRef(container, sheet); // Replace all $refs.

        selector = selector.replace(refRegExp$1, replaceRef);
        container.addRule(selector, style[prop], _extends$4({}, options, {
          selector: selector
        }));
      } else if (isNestedConditional) {
        // Place conditional right after the parent rule to ensure right ordering.
        container.addRule(prop, {}, options) // Flow expects more options but they aren't required
        // And flow doesn't know this will always be a StyleRule which has the addRule method
        // $FlowFixMe[incompatible-use]
        // $FlowFixMe[prop-missing]
        .addRule(styleRule.key, style[prop], {
          selector: styleRule.selector
        });
      }

      delete style[prop];
    }

    return style;
  }

  return {
    onProcessStyle: onProcessStyle
  };
}

/* eslint-disable no-var, prefer-template */
var uppercasePattern = /[A-Z]/g;
var msPattern = /^ms-/;
var cache = {};

function toHyphenLower(match) {
  return '-' + match.toLowerCase()
}

function hyphenateStyleName(name) {
  if (cache.hasOwnProperty(name)) {
    return cache[name]
  }

  var hName = name.replace(uppercasePattern, toHyphenLower);
  return (cache[name] = msPattern.test(hName) ? '-' + hName : hName)
}

/**
 * Convert camel cased property names to dash separated.
 *
 * @param {Object} style
 * @return {Object}
 */

function convertCase(style) {
  var converted = {};

  for (var prop in style) {
    var key = prop.indexOf('--') === 0 ? prop : hyphenateStyleName(prop);
    converted[key] = style[prop];
  }

  if (style.fallbacks) {
    if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map(convertCase);else converted.fallbacks = convertCase(style.fallbacks);
  }

  return converted;
}
/**
 * Allow camel cased property names by converting them back to dasherized.
 *
 * @param {Rule} rule
 */


function camelCase() {
  function onProcessStyle(style) {
    if (Array.isArray(style)) {
      // Handle rules like @font-face, which can have multiple styles in an array
      for (var index = 0; index < style.length; index++) {
        style[index] = convertCase(style[index]);
      }

      return style;
    }

    return convertCase(style);
  }

  function onChangeValue(value, prop, rule) {
    if (prop.indexOf('--') === 0) {
      return value;
    }

    var hyphenatedProp = hyphenateStyleName(prop); // There was no camel case in place

    if (prop === hyphenatedProp) return value;
    rule.prop(hyphenatedProp, value); // Core will ignore that property value we set the proper one above.

    return null;
  }

  return {
    onProcessStyle: onProcessStyle,
    onChangeValue: onChangeValue
  };
}

var px = hasCSSTOMSupport && CSS ? CSS.px : 'px';
var ms = hasCSSTOMSupport && CSS ? CSS.ms : 'ms';
var percent = hasCSSTOMSupport && CSS ? CSS.percent : '%';
/**
 * Generated jss-plugin-default-unit CSS property units
 *
 * @type object
 */

var defaultUnits = {
  // Animation properties
  'animation-delay': ms,
  'animation-duration': ms,
  // Background properties
  'background-position': px,
  'background-position-x': px,
  'background-position-y': px,
  'background-size': px,
  // Border Properties
  border: px,
  'border-bottom': px,
  'border-bottom-left-radius': px,
  'border-bottom-right-radius': px,
  'border-bottom-width': px,
  'border-left': px,
  'border-left-width': px,
  'border-radius': px,
  'border-right': px,
  'border-right-width': px,
  'border-top': px,
  'border-top-left-radius': px,
  'border-top-right-radius': px,
  'border-top-width': px,
  'border-width': px,
  'border-block': px,
  'border-block-end': px,
  'border-block-end-width': px,
  'border-block-start': px,
  'border-block-start-width': px,
  'border-block-width': px,
  'border-inline': px,
  'border-inline-end': px,
  'border-inline-end-width': px,
  'border-inline-start': px,
  'border-inline-start-width': px,
  'border-inline-width': px,
  'border-start-start-radius': px,
  'border-start-end-radius': px,
  'border-end-start-radius': px,
  'border-end-end-radius': px,
  // Margin properties
  margin: px,
  'margin-bottom': px,
  'margin-left': px,
  'margin-right': px,
  'margin-top': px,
  'margin-block': px,
  'margin-block-end': px,
  'margin-block-start': px,
  'margin-inline': px,
  'margin-inline-end': px,
  'margin-inline-start': px,
  // Padding properties
  padding: px,
  'padding-bottom': px,
  'padding-left': px,
  'padding-right': px,
  'padding-top': px,
  'padding-block': px,
  'padding-block-end': px,
  'padding-block-start': px,
  'padding-inline': px,
  'padding-inline-end': px,
  'padding-inline-start': px,
  // Mask properties
  'mask-position-x': px,
  'mask-position-y': px,
  'mask-size': px,
  // Width and height properties
  height: px,
  width: px,
  'min-height': px,
  'max-height': px,
  'min-width': px,
  'max-width': px,
  // Position properties
  bottom: px,
  left: px,
  top: px,
  right: px,
  inset: px,
  'inset-block': px,
  'inset-block-end': px,
  'inset-block-start': px,
  'inset-inline': px,
  'inset-inline-end': px,
  'inset-inline-start': px,
  // Shadow properties
  'box-shadow': px,
  'text-shadow': px,
  // Column properties
  'column-gap': px,
  'column-rule': px,
  'column-rule-width': px,
  'column-width': px,
  // Font and text properties
  'font-size': px,
  'font-size-delta': px,
  'letter-spacing': px,
  'text-indent': px,
  'text-stroke': px,
  'text-stroke-width': px,
  'word-spacing': px,
  // Motion properties
  motion: px,
  'motion-offset': px,
  // Outline properties
  outline: px,
  'outline-offset': px,
  'outline-width': px,
  // Perspective properties
  perspective: px,
  'perspective-origin-x': percent,
  'perspective-origin-y': percent,
  // Transform properties
  'transform-origin': percent,
  'transform-origin-x': percent,
  'transform-origin-y': percent,
  'transform-origin-z': percent,
  // Transition properties
  'transition-delay': ms,
  'transition-duration': ms,
  // Alignment properties
  'vertical-align': px,
  'flex-basis': px,
  // Some random properties
  'shape-margin': px,
  size: px,
  gap: px,
  // Grid properties
  grid: px,
  'grid-gap': px,
  'grid-row-gap': px,
  'grid-column-gap': px,
  'grid-template-rows': px,
  'grid-template-columns': px,
  'grid-auto-rows': px,
  'grid-auto-columns': px,
  // Not existing properties.
  // Used to avoid issues with jss-plugin-expand integration.
  'box-shadow-x': px,
  'box-shadow-y': px,
  'box-shadow-blur': px,
  'box-shadow-spread': px,
  'font-line-height': px,
  'text-shadow-x': px,
  'text-shadow-y': px,
  'text-shadow-blur': px
};

/**
 * Clones the object and adds a camel cased property version.
 */
function addCamelCasedVersion(obj) {
  var regExp = /(-[a-z])/g;

  var replace = function replace(str) {
    return str[1].toUpperCase();
  };

  var newObj = {};

  for (var _key in obj) {
    newObj[_key] = obj[_key];
    newObj[_key.replace(regExp, replace)] = obj[_key];
  }

  return newObj;
}

var units = addCamelCasedVersion(defaultUnits);
/**
 * Recursive deep style passing function
 */

function iterate(prop, value, options) {
  if (value == null) return value;

  if (Array.isArray(value)) {
    for (var i = 0; i < value.length; i++) {
      value[i] = iterate(prop, value[i], options);
    }
  } else if (typeof value === 'object') {
    if (prop === 'fallbacks') {
      for (var innerProp in value) {
        value[innerProp] = iterate(innerProp, value[innerProp], options);
      }
    } else {
      for (var _innerProp in value) {
        value[_innerProp] = iterate(prop + "-" + _innerProp, value[_innerProp], options);
      }
    }
  } else if (typeof value === 'number') {
    var unit = options[prop] || units[prop]; // Add the unit if available, except for the special case of 0px.

    if (unit && !(value === 0 && unit === px)) {
      return typeof unit === 'function' ? unit(value).toString() : "" + value + unit;
    }

    return value.toString();
  }

  return value;
}
/**
 * Add unit to numeric values.
 */


function defaultUnit(options) {
  if (options === void 0) {
    options = {};
  }

  var camelCasedOptions = addCamelCasedVersion(options);

  function onProcessStyle(style, rule) {
    if (rule.type !== 'style') return style;

    for (var prop in style) {
      style[prop] = iterate(prop, style[prop], camelCasedOptions);
    }

    return style;
  }

  function onChangeValue(value, prop) {
    return iterate(prop, value, camelCasedOptions);
  }

  return {
    onProcessStyle: onProcessStyle,
    onChangeValue: onChangeValue
  };
}

function _arrayLikeToArray$1(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _unsupportedIterableToArray$1(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(n);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread();
}

// Export javascript style and css style vendor prefixes.
var js = '';
var css = '';
var vendor = '';
var browser = '';
var isTouch = isBrowser && 'ontouchstart' in document.documentElement; // We should not do anything if required serverside.

if (isBrowser) {
  // Order matters. We need to check Webkit the last one because
  // other vendors use to add Webkit prefixes to some properties
  var jsCssMap = {
    Moz: '-moz-',
    ms: '-ms-',
    O: '-o-',
    Webkit: '-webkit-'
  };

  var _document$createEleme = document.createElement('p'),
      style = _document$createEleme.style;

  var testProp = 'Transform';

  for (var key in jsCssMap) {
    if (key + testProp in style) {
      js = key;
      css = jsCssMap[key];
      break;
    }
  } // Correctly detect the Edge browser.


  if (js === 'Webkit' && 'msHyphens' in style) {
    js = 'ms';
    css = jsCssMap.ms;
    browser = 'edge';
  } // Correctly detect the Safari browser.


  if (js === 'Webkit' && '-apple-trailing-word' in style) {
    vendor = 'apple';
  }
}
/**
 * Vendor prefix string for the current browser.
 *
 * @type {{js: String, css: String, vendor: String, browser: String}}
 * @api public
 */


var prefix = {
  js: js,
  css: css,
  vendor: vendor,
  browser: browser,
  isTouch: isTouch
};

/**
 * Test if a keyframe at-rule should be prefixed or not
 *
 * @param {String} vendor prefix string for the current browser.
 * @return {String}
 * @api public
 */

function supportedKeyframes(key) {
  // Keyframes is already prefixed. e.g. key = '@-webkit-keyframes a'
  if (key[1] === '-') return key; // No need to prefix IE/Edge. Older browsers will ignore unsupported rules.
  // https://caniuse.com/#search=keyframes

  if (prefix.js === 'ms') return key;
  return "@" + prefix.css + "keyframes" + key.substr(10);
}

// https://caniuse.com/#search=appearance

var appearence = {
  noPrefill: ['appearance'],
  supportedProperty: function supportedProperty(prop) {
    if (prop !== 'appearance') return false;
    if (prefix.js === 'ms') return "-webkit-" + prop;
    return prefix.css + prop;
  }
};

// https://caniuse.com/#search=color-adjust

var colorAdjust = {
  noPrefill: ['color-adjust'],
  supportedProperty: function supportedProperty(prop) {
    if (prop !== 'color-adjust') return false;
    if (prefix.js === 'Webkit') return prefix.css + "print-" + prop;
    return prop;
  }
};

var regExp = /[-\s]+(.)?/g;
/**
 * Replaces the letter with the capital letter
 *
 * @param {String} match
 * @param {String} c
 * @return {String}
 * @api private
 */

function toUpper(match, c) {
  return c ? c.toUpperCase() : '';
}
/**
 * Convert dash separated strings to camel-cased.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */


function camelize(str) {
  return str.replace(regExp, toUpper);
}

/**
 * Convert dash separated strings to pascal cased.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

function pascalize(str) {
  return camelize("-" + str);
}

// but we can use a longhand property instead.
// https://caniuse.com/#search=mask

var mask = {
  noPrefill: ['mask'],
  supportedProperty: function supportedProperty(prop, style) {
    if (!/^mask/.test(prop)) return false;

    if (prefix.js === 'Webkit') {
      var longhand = 'mask-image';

      if (camelize(longhand) in style) {
        return prop;
      }

      if (prefix.js + pascalize(longhand) in style) {
        return prefix.css + prop;
      }
    }

    return prop;
  }
};

// https://caniuse.com/#search=text-orientation

var textOrientation = {
  noPrefill: ['text-orientation'],
  supportedProperty: function supportedProperty(prop) {
    if (prop !== 'text-orientation') return false;

    if (prefix.vendor === 'apple' && !prefix.isTouch) {
      return prefix.css + prop;
    }

    return prop;
  }
};

// https://caniuse.com/#search=transform

var transform = {
  noPrefill: ['transform'],
  supportedProperty: function supportedProperty(prop, style, options) {
    if (prop !== 'transform') return false;

    if (options.transform) {
      return prop;
    }

    return prefix.css + prop;
  }
};

// https://caniuse.com/#search=transition

var transition = {
  noPrefill: ['transition'],
  supportedProperty: function supportedProperty(prop, style, options) {
    if (prop !== 'transition') return false;

    if (options.transition) {
      return prop;
    }

    return prefix.css + prop;
  }
};

// https://caniuse.com/#search=writing-mode

var writingMode = {
  noPrefill: ['writing-mode'],
  supportedProperty: function supportedProperty(prop) {
    if (prop !== 'writing-mode') return false;

    if (prefix.js === 'Webkit' || prefix.js === 'ms' && prefix.browser !== 'edge') {
      return prefix.css + prop;
    }

    return prop;
  }
};

// https://caniuse.com/#search=user-select

var userSelect = {
  noPrefill: ['user-select'],
  supportedProperty: function supportedProperty(prop) {
    if (prop !== 'user-select') return false;

    if (prefix.js === 'Moz' || prefix.js === 'ms' || prefix.vendor === 'apple') {
      return prefix.css + prop;
    }

    return prop;
  }
};

// https://caniuse.com/#search=multicolumn
// https://github.com/postcss/autoprefixer/issues/491
// https://github.com/postcss/autoprefixer/issues/177

var breakPropsOld = {
  supportedProperty: function supportedProperty(prop, style) {
    if (!/^break-/.test(prop)) return false;

    if (prefix.js === 'Webkit') {
      var jsProp = "WebkitColumn" + pascalize(prop);
      return jsProp in style ? prefix.css + "column-" + prop : false;
    }

    if (prefix.js === 'Moz') {
      var _jsProp = "page" + pascalize(prop);

      return _jsProp in style ? "page-" + prop : false;
    }

    return false;
  }
};

// See https://github.com/postcss/autoprefixer/issues/324.

var inlineLogicalOld = {
  supportedProperty: function supportedProperty(prop, style) {
    if (!/^(border|margin|padding)-inline/.test(prop)) return false;
    if (prefix.js === 'Moz') return prop;
    var newProp = prop.replace('-inline', '');
    return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
  }
};

// Camelization is required because we can't test using.
// CSS syntax for e.g. in FF.

var unprefixed = {
  supportedProperty: function supportedProperty(prop, style) {
    return camelize(prop) in style ? prop : false;
  }
};

var prefixed = {
  supportedProperty: function supportedProperty(prop, style) {
    var pascalized = pascalize(prop); // Return custom CSS variable without prefixing.

    if (prop[0] === '-') return prop; // Return already prefixed value without prefixing.

    if (prop[0] === '-' && prop[1] === '-') return prop;
    if (prefix.js + pascalized in style) return prefix.css + prop; // Try webkit fallback.

    if (prefix.js !== 'Webkit' && "Webkit" + pascalized in style) return "-webkit-" + prop;
    return false;
  }
};

// https://caniuse.com/#search=scroll-snap

var scrollSnap = {
  supportedProperty: function supportedProperty(prop) {
    if (prop.substring(0, 11) !== 'scroll-snap') return false;

    if (prefix.js === 'ms') {
      return "" + prefix.css + prop;
    }

    return prop;
  }
};

// https://caniuse.com/#search=overscroll-behavior

var overscrollBehavior = {
  supportedProperty: function supportedProperty(prop) {
    if (prop !== 'overscroll-behavior') return false;

    if (prefix.js === 'ms') {
      return prefix.css + "scroll-chaining";
    }

    return prop;
  }
};

var propMap = {
  'flex-grow': 'flex-positive',
  'flex-shrink': 'flex-negative',
  'flex-basis': 'flex-preferred-size',
  'justify-content': 'flex-pack',
  order: 'flex-order',
  'align-items': 'flex-align',
  'align-content': 'flex-line-pack' // 'align-self' is handled by 'align-self' plugin.

}; // Support old flex spec from 2012.

var flex2012 = {
  supportedProperty: function supportedProperty(prop, style) {
    var newProp = propMap[prop];
    if (!newProp) return false;
    return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
  }
};

var propMap$1 = {
  flex: 'box-flex',
  'flex-grow': 'box-flex',
  'flex-direction': ['box-orient', 'box-direction'],
  order: 'box-ordinal-group',
  'align-items': 'box-align',
  'flex-flow': ['box-orient', 'box-direction'],
  'justify-content': 'box-pack'
};
var propKeys = Object.keys(propMap$1);

var prefixCss = function prefixCss(p) {
  return prefix.css + p;
}; // Support old flex spec from 2009.


var flex2009 = {
  supportedProperty: function supportedProperty(prop, style, _ref) {
    var multiple = _ref.multiple;

    if (propKeys.indexOf(prop) > -1) {
      var newProp = propMap$1[prop];

      if (!Array.isArray(newProp)) {
        return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
      }

      if (!multiple) return false;

      for (var i = 0; i < newProp.length; i++) {
        if (!(prefix.js + pascalize(newProp[0]) in style)) {
          return false;
        }
      }

      return newProp.map(prefixCss);
    }

    return false;
  }
};

// plugins = [
//   ...plugins,
//    breakPropsOld,
//    inlineLogicalOld,
//    unprefixed,
//    prefixed,
//    scrollSnap,
//    flex2012,
//    flex2009
// ]
// Plugins without 'noPrefill' value, going last.
// 'flex-*' plugins should be at the bottom.
// 'flex2009' going after 'flex2012'.
// 'prefixed' going after 'unprefixed'

var plugins$1 = [appearence, colorAdjust, mask, textOrientation, transform, transition, writingMode, userSelect, breakPropsOld, inlineLogicalOld, unprefixed, prefixed, scrollSnap, overscrollBehavior, flex2012, flex2009];
var propertyDetectors = plugins$1.filter(function (p) {
  return p.supportedProperty;
}).map(function (p) {
  return p.supportedProperty;
});
var noPrefill = plugins$1.filter(function (p) {
  return p.noPrefill;
}).reduce(function (a, p) {
  a.push.apply(a, _toConsumableArray(p.noPrefill));
  return a;
}, []);

var el;
var cache$1 = {};

if (isBrowser) {
  el = document.createElement('p'); // We test every property on vendor prefix requirement.
  // Once tested, result is cached. It gives us up to 70% perf boost.
  // http://jsperf.com/element-style-object-access-vs-plain-object
  //
  // Prefill cache with known css properties to reduce amount of
  // properties we need to feature test at runtime.
  // http://davidwalsh.name/vendor-prefix

  var computed = window.getComputedStyle(document.documentElement, '');

  for (var key$1 in computed) {
    // eslint-disable-next-line no-restricted-globals
    if (!isNaN(key$1)) cache$1[computed[key$1]] = computed[key$1];
  } // Properties that cannot be correctly detected using the
  // cache prefill method.


  noPrefill.forEach(function (x) {
    return delete cache$1[x];
  });
}
/**
 * Test if a property is supported, returns supported property with vendor
 * prefix if required. Returns `false` if not supported.
 *
 * @param {String} prop dash separated
 * @param {Object} [options]
 * @return {String|Boolean}
 * @api public
 */


function supportedProperty(prop, options) {
  if (options === void 0) {
    options = {};
  }

  // For server-side rendering.
  if (!el) return prop; // Remove cache for benchmark tests or return property from the cache.

  if (process.env.NODE_ENV !== 'benchmark' && cache$1[prop] != null) {
    return cache$1[prop];
  } // Check if 'transition' or 'transform' natively supported in browser.


  if (prop === 'transition' || prop === 'transform') {
    options[prop] = prop in el.style;
  } // Find a plugin for current prefix property.


  for (var i = 0; i < propertyDetectors.length; i++) {
    cache$1[prop] = propertyDetectors[i](prop, el.style, options); // Break loop, if value found.

    if (cache$1[prop]) break;
  } // Reset styles for current property.
  // Firefox can even throw an error for invalid properties, e.g., "0".


  try {
    el.style[prop] = '';
  } catch (err) {
    return false;
  }

  return cache$1[prop];
}

var cache$1$1 = {};
var transitionProperties = {
  transition: 1,
  'transition-property': 1,
  '-webkit-transition': 1,
  '-webkit-transition-property': 1
};
var transPropsRegExp = /(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;
var el$1;
/**
 * Returns prefixed value transition/transform if needed.
 *
 * @param {String} match
 * @param {String} p1
 * @param {String} p2
 * @return {String}
 * @api private
 */

function prefixTransitionCallback(match, p1, p2) {
  if (p1 === 'var') return 'var';
  if (p1 === 'all') return 'all';
  if (p2 === 'all') return ', all';
  var prefixedValue = p1 ? supportedProperty(p1) : ", " + supportedProperty(p2);
  if (!prefixedValue) return p1 || p2;
  return prefixedValue;
}

if (isBrowser) el$1 = document.createElement('p');
/**
 * Returns prefixed value if needed. Returns `false` if value is not supported.
 *
 * @param {String} property
 * @param {String} value
 * @return {String|Boolean}
 * @api public
 */

function supportedValue(property, value) {
  // For server-side rendering.
  var prefixedValue = value;
  if (!el$1 || property === 'content') return value; // It is a string or a number as a string like '1'.
  // We want only prefixable values here.
  // eslint-disable-next-line no-restricted-globals

  if (typeof prefixedValue !== 'string' || !isNaN(parseInt(prefixedValue, 10))) {
    return prefixedValue;
  } // Create cache key for current value.


  var cacheKey = property + prefixedValue; // Remove cache for benchmark tests or return value from cache.

  if (process.env.NODE_ENV !== 'benchmark' && cache$1$1[cacheKey] != null) {
    return cache$1$1[cacheKey];
  } // IE can even throw an error in some cases, for e.g. style.content = 'bar'.


  try {
    // Test value as it is.
    el$1.style[property] = prefixedValue;
  } catch (err) {
    // Return false if value not supported.
    cache$1$1[cacheKey] = false;
    return false;
  } // If 'transition' or 'transition-property' property.


  if (transitionProperties[property]) {
    prefixedValue = prefixedValue.replace(transPropsRegExp, prefixTransitionCallback);
  } else if (el$1.style[property] === '') {
    // Value with a vendor prefix.
    prefixedValue = prefix.css + prefixedValue; // Hardcode test to convert "flex" to "-ms-flexbox" for IE10.

    if (prefixedValue === '-ms-flex') el$1.style[property] = '-ms-flexbox'; // Test prefixed value.

    el$1.style[property] = prefixedValue; // Return false if value not supported.

    if (el$1.style[property] === '') {
      cache$1$1[cacheKey] = false;
      return false;
    }
  } // Reset styles for current property.


  el$1.style[property] = ''; // Write current value to cache.

  cache$1$1[cacheKey] = prefixedValue;
  return cache$1$1[cacheKey];
}

/**
 * Add vendor prefix to a property name when needed.
 *
 * @api public
 */

function jssVendorPrefixer() {
  function onProcessRule(rule) {
    if (rule.type === 'keyframes') {
      var atRule = rule;
      atRule.at = supportedKeyframes(atRule.at);
    }
  }

  function prefixStyle(style) {
    for (var prop in style) {
      var value = style[prop];

      if (prop === 'fallbacks' && Array.isArray(value)) {
        style[prop] = value.map(prefixStyle);
        continue;
      }

      var changeProp = false;
      var supportedProp = supportedProperty(prop);
      if (supportedProp && supportedProp !== prop) changeProp = true;
      var changeValue = false;
      var supportedValue$1 = supportedValue(supportedProp, toCssValue(value));
      if (supportedValue$1 && supportedValue$1 !== value) changeValue = true;

      if (changeProp || changeValue) {
        if (changeProp) delete style[prop];
        style[supportedProp || prop] = supportedValue$1 || value;
      }
    }

    return style;
  }

  function onProcessStyle(style, rule) {
    if (rule.type !== 'style') return style;
    return prefixStyle(style);
  }

  function onChangeValue(value, prop) {
    return supportedValue(prop, toCssValue(value)) || value;
  }

  return {
    onProcessRule: onProcessRule,
    onProcessStyle: onProcessStyle,
    onChangeValue: onChangeValue
  };
}

/**
 * Sort props by length.
 */
function jssPropsSort() {
  var sort = function sort(prop0, prop1) {
    if (prop0.length === prop1.length) {
      return prop0 > prop1 ? 1 : -1;
    }

    return prop0.length - prop1.length;
  };

  return {
    onProcessStyle: function onProcessStyle(style, rule) {
      if (rule.type !== 'style') return style;
      var newStyle = {};
      var props = Object.keys(style).sort(sort);

      for (var i = 0; i < props.length; i++) {
        newStyle[props[i]] = style[props[i]];
      }

      return newStyle;
    }
  };
}

function jssPreset() {
  return {
    plugins: [functionPlugin(), jssGlobal(), jssNested(), camelCase(), defaultUnit(), // Disable the vendor prefixer server-side, it does nothing.
    // This way, we can get a performance boost.
    // In the documentation, we are using `autoprefixer` to solve this problem.
    typeof window === 'undefined' ? null : jssVendorPrefixer(), jssPropsSort()]
  };
}

function _objectWithoutPropertiesLoose$4(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties$2(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose$4(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _extends$5() {
  _extends$5 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$5.apply(this, arguments);
}

function mergeClasses() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var baseClasses = options.baseClasses,
      newClasses = options.newClasses,
      Component = options.Component;

  if (!newClasses) {
    return baseClasses;
  }

  var nextClasses = _extends$5({}, baseClasses);

  if (process.env.NODE_ENV !== 'production') {
    if (typeof newClasses === 'string') {
      console.error(["Material-UI: The value `".concat(newClasses, "` ") + "provided to the classes prop of ".concat(utils.getDisplayName(Component), " is incorrect."), 'You might want to use the className prop instead.'].join('\n'));
      return baseClasses;
    }
  }

  Object.keys(newClasses).forEach(function (key) {
    if (process.env.NODE_ENV !== 'production') {
      if (!baseClasses[key] && newClasses[key]) {
        console.error(["Material-UI: The key `".concat(key, "` ") + "provided to the classes prop is not implemented in ".concat(utils.getDisplayName(Component), "."), "You can only override one of the following: ".concat(Object.keys(baseClasses).join(','), ".")].join('\n'));
      }

      if (newClasses[key] && typeof newClasses[key] !== 'string') {
        console.error(["Material-UI: The key `".concat(key, "` ") + "provided to the classes prop is not valid for ".concat(utils.getDisplayName(Component), "."), "You need to provide a non empty string instead of: ".concat(newClasses[key], ".")].join('\n'));
      }
    }

    if (newClasses[key]) {
      nextClasses[key] = "".concat(baseClasses[key], " ").concat(newClasses[key]);
    }
  });
  return nextClasses;
}

// Used https://github.com/thinkloop/multi-key-cache as inspiration
var multiKeyStore = {
  set: function set(cache, key1, key2, value) {
    var subCache = cache.get(key1);

    if (!subCache) {
      subCache = new Map();
      cache.set(key1, subCache);
    }

    subCache.set(key2, value);
  },
  get: function get(cache, key1, key2) {
    var subCache = cache.get(key1);
    return subCache ? subCache.get(key2) : undefined;
  },
  delete: function _delete(cache, key1, key2) {
    var subCache = cache.get(key1);
    subCache.delete(key2);
  }
};

var ThemeContext = React.createContext(null);

if (process.env.NODE_ENV !== 'production') {
  ThemeContext.displayName = 'ThemeContext';
}

function useTheme() {
  var theme = React.useContext(ThemeContext);

  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    React.useDebugValue(theme);
  }

  return theme;
}

var jss$1 = create(jssPreset()); // Use a singleton or the provided one by the context.
//
// The counter-based approach doesn't tolerate any mistake.
// It's much safer to use the same counter everywhere.

var generateClassName = createGenerateClassName(); // Exported for test purposes

var sheetsManager = new Map();
var defaultOptions = {
  disableGeneration: false,
  generateClassName: generateClassName,
  jss: jss$1,
  sheetsCache: null,
  sheetsManager: sheetsManager,
  sheetsRegistry: null
};
var StylesContext = React.createContext(defaultOptions);

if (process.env.NODE_ENV !== 'production') {
  StylesContext.displayName = 'StylesContext';
}

var injectFirstNode;
function StylesProvider(props) {
  var children = props.children,
      _props$injectFirst = props.injectFirst,
      injectFirst = _props$injectFirst === void 0 ? false : _props$injectFirst,
      _props$disableGenerat = props.disableGeneration,
      disableGeneration = _props$disableGenerat === void 0 ? false : _props$disableGenerat,
      localOptions = _objectWithoutProperties$2(props, ["children", "injectFirst", "disableGeneration"]);

  var outerOptions = React.useContext(StylesContext);

  var context = _extends$5({}, outerOptions, {
    disableGeneration: disableGeneration
  }, localOptions);

  if (process.env.NODE_ENV !== 'production') {
    if (typeof window === 'undefined' && !context.sheetsManager) {
      console.error('Material-UI: You need to use the ServerStyleSheets API when rendering on the server.');
    }
  }

  if (process.env.NODE_ENV !== 'production') {
    if (context.jss.options.insertionPoint && injectFirst) {
      console.error('Material-UI: You cannot use a custom insertionPoint and <StylesContext injectFirst> at the same time.');
    }
  }

  if (process.env.NODE_ENV !== 'production') {
    if (injectFirst && localOptions.jss) {
      console.error('Material-UI: You cannot use the jss and injectFirst props at the same time.');
    }
  }

  if (!context.jss.options.insertionPoint && injectFirst && typeof window !== 'undefined') {
    if (!injectFirstNode) {
      var head = document.head;
      injectFirstNode = document.createComment('mui-inject-first');
      head.insertBefore(injectFirstNode, head.firstChild);
    }

    context.jss = create({
      plugins: jssPreset().plugins,
      insertionPoint: injectFirstNode
    });
  }

  return /*#__PURE__*/React.createElement(StylesContext.Provider, {
    value: context
  }, children);
}
process.env.NODE_ENV !== "production" ? StylesProvider.propTypes = {
  /**
   * Your component tree.
   */
  children: propTypes.node.isRequired,

  /**
   * You can disable the generation of the styles with this option.
   * It can be useful when traversing the React tree outside of the HTML
   * rendering step on the server.
   * Let's say you are using react-apollo to extract all
   * the queries made by the interface server-side - you can significantly speed up the traversal with this prop.
   */
  disableGeneration: propTypes.bool,

  /**
   * JSS's class name generator.
   */
  generateClassName: propTypes.func,

  /**
   * By default, the styles are injected last in the <head> element of the page.
   * As a result, they gain more specificity than any other style sheet.
   * If you want to override Material-UI's styles, set this prop.
   */
  injectFirst: propTypes.bool,

  /**
   * JSS's instance.
   */
  jss: propTypes.object,

  /**
   * @ignore
   */
  serverGenerateClassName: propTypes.func,

  /**
   * @ignore
   *
   * Beta feature.
   *
   * Cache for the sheets.
   */
  sheetsCache: propTypes.object,

  /**
   * @ignore
   *
   * The sheetsManager is used to deduplicate style sheet injection in the page.
   * It's deduplicating using the (theme, styles) couple.
   * On the server, you should provide a new instance for each request.
   */
  sheetsManager: propTypes.object,

  /**
   * @ignore
   *
   * Collect the sheets.
   */
  sheetsRegistry: propTypes.object
} : void 0;

if (process.env.NODE_ENV !== 'production') {
  process.env.NODE_ENV !== "production" ? StylesProvider.propTypes = utils.exactProp(StylesProvider.propTypes) : void 0;
}

/* eslint-disable import/prefer-default-export */
// Global index counter to preserve source order.
// We create the style sheet during the creation of the component,
// children are handled after the parents, so the order of style elements would be parent->child.
// It is a problem though when a parent passes a className
// which needs to override any child's styles.
// StyleSheet of the child has a higher specificity, because of the source order.
// So our solution is to render sheets them in the reverse order child->sheet, so
// that parent has a higher specificity.
var indexCounter = -1e9;
function increment() {
  indexCounter += 1;

  if (process.env.NODE_ENV !== 'production') {
    if (indexCounter >= 0) {
      console.warn(['Material-UI: You might have a memory leak.', 'The indexCounter is not supposed to grow that much.'].join('\n'));
    }
  }

  return indexCounter;
}

function _typeof$2(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$2 = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof$2 = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof$2(obj);
}

// We use the same empty object to ref count the styles that don't need a theme object.
var noopTheme = {};

function getStylesCreator(stylesOrCreator) {
  var themingEnabled = typeof stylesOrCreator === 'function';

  if (process.env.NODE_ENV !== 'production') {
    if (_typeof$2(stylesOrCreator) !== 'object' && !themingEnabled) {
      console.error(['Material-UI: The `styles` argument provided is invalid.', 'You need to provide a function generating the styles or a styles object.'].join('\n'));
    }
  }

  return {
    create: function create(theme, name) {
      var styles;

      try {
        styles = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;
      } catch (err) {
        if (process.env.NODE_ENV !== 'production') {
          if (themingEnabled === true && theme === noopTheme) {
            // TODO: prepend error message/name instead
            console.error(['Material-UI: The `styles` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\n'));
          }
        }

        throw err;
      }

      if (!name || !theme.overrides || !theme.overrides[name]) {
        return styles;
      }

      var overrides = theme.overrides[name];

      var stylesWithOverrides = _extends$5({}, styles);

      Object.keys(overrides).forEach(function (key) {
        if (process.env.NODE_ENV !== 'production') {
          if (!stylesWithOverrides[key]) {
            console.warn(['Material-UI: You are trying to override a style that does not exist.', "Fix the `".concat(key, "` key of `theme.overrides.").concat(name, "`.")].join('\n'));
          }
        }

        stylesWithOverrides[key] = utils.deepmerge(stylesWithOverrides[key], overrides[key]);
      });
      return stylesWithOverrides;
    },
    options: {}
  };
}

function getClasses(_ref, classes, Component) {
  var state = _ref.state,
      stylesOptions = _ref.stylesOptions;

  if (stylesOptions.disableGeneration) {
    return classes || {};
  }

  if (!state.cacheClasses) {
    state.cacheClasses = {
      // Cache for the finalized classes value.
      value: null,
      // Cache for the last used classes prop pointer.
      lastProp: null,
      // Cache for the last used rendered classes pointer.
      lastJSS: {}
    };
  } // Tracks if either the rendered classes or classes prop has changed,
  // requiring the generation of a new finalized classes object.


  var generate = false;

  if (state.classes !== state.cacheClasses.lastJSS) {
    state.cacheClasses.lastJSS = state.classes;
    generate = true;
  }

  if (classes !== state.cacheClasses.lastProp) {
    state.cacheClasses.lastProp = classes;
    generate = true;
  }

  if (generate) {
    state.cacheClasses.value = mergeClasses({
      baseClasses: state.cacheClasses.lastJSS,
      newClasses: classes,
      Component: Component
    });
  }

  return state.cacheClasses.value;
}

function attach(_ref2, props) {
  var state = _ref2.state,
      theme = _ref2.theme,
      stylesOptions = _ref2.stylesOptions,
      stylesCreator = _ref2.stylesCreator,
      name = _ref2.name;

  if (stylesOptions.disableGeneration) {
    return;
  }

  var sheetManager = multiKeyStore.get(stylesOptions.sheetsManager, stylesCreator, theme);

  if (!sheetManager) {
    sheetManager = {
      refs: 0,
      staticSheet: null,
      dynamicStyles: null
    };
    multiKeyStore.set(stylesOptions.sheetsManager, stylesCreator, theme, sheetManager);
  }

  var options = _extends$5({}, stylesCreator.options, stylesOptions, {
    theme: theme,
    flip: typeof stylesOptions.flip === 'boolean' ? stylesOptions.flip : theme.direction === 'rtl'
  });

  options.generateId = options.serverGenerateClassName || options.generateClassName;
  var sheetsRegistry = stylesOptions.sheetsRegistry;

  if (sheetManager.refs === 0) {
    var staticSheet;

    if (stylesOptions.sheetsCache) {
      staticSheet = multiKeyStore.get(stylesOptions.sheetsCache, stylesCreator, theme);
    }

    var styles = stylesCreator.create(theme, name);

    if (!staticSheet) {
      staticSheet = stylesOptions.jss.createStyleSheet(styles, _extends$5({
        link: false
      }, options));
      staticSheet.attach();

      if (stylesOptions.sheetsCache) {
        multiKeyStore.set(stylesOptions.sheetsCache, stylesCreator, theme, staticSheet);
      }
    }

    if (sheetsRegistry) {
      sheetsRegistry.add(staticSheet);
    }

    sheetManager.staticSheet = staticSheet;
    sheetManager.dynamicStyles = getDynamicStyles(styles);
  }

  if (sheetManager.dynamicStyles) {
    var dynamicSheet = stylesOptions.jss.createStyleSheet(sheetManager.dynamicStyles, _extends$5({
      link: true
    }, options));
    dynamicSheet.update(props);
    dynamicSheet.attach();
    state.dynamicSheet = dynamicSheet;
    state.classes = mergeClasses({
      baseClasses: sheetManager.staticSheet.classes,
      newClasses: dynamicSheet.classes
    });

    if (sheetsRegistry) {
      sheetsRegistry.add(dynamicSheet);
    }
  } else {
    state.classes = sheetManager.staticSheet.classes;
  }

  sheetManager.refs += 1;
}

function update(_ref3, props) {
  var state = _ref3.state;

  if (state.dynamicSheet) {
    state.dynamicSheet.update(props);
  }
}

function detach(_ref4) {
  var state = _ref4.state,
      theme = _ref4.theme,
      stylesOptions = _ref4.stylesOptions,
      stylesCreator = _ref4.stylesCreator;

  if (stylesOptions.disableGeneration) {
    return;
  }

  var sheetManager = multiKeyStore.get(stylesOptions.sheetsManager, stylesCreator, theme);
  sheetManager.refs -= 1;
  var sheetsRegistry = stylesOptions.sheetsRegistry;

  if (sheetManager.refs === 0) {
    multiKeyStore.delete(stylesOptions.sheetsManager, stylesCreator, theme);
    stylesOptions.jss.removeStyleSheet(sheetManager.staticSheet);

    if (sheetsRegistry) {
      sheetsRegistry.remove(sheetManager.staticSheet);
    }
  }

  if (state.dynamicSheet) {
    stylesOptions.jss.removeStyleSheet(state.dynamicSheet);

    if (sheetsRegistry) {
      sheetsRegistry.remove(state.dynamicSheet);
    }
  }
}

function useSynchronousEffect(func, values) {
  var key = React.useRef([]);
  var output; // Store "generation" key. Just returns a new object every time

  var currentKey = React.useMemo(function () {
    return {};
  }, values); // eslint-disable-line react-hooks/exhaustive-deps
  // "the first render", or "memo dropped the value"

  if (key.current !== currentKey) {
    key.current = currentKey;
    output = func();
  }

  React.useEffect(function () {
    return function () {
      if (output) {
        output();
      }
    };
  }, [currentKey] // eslint-disable-line react-hooks/exhaustive-deps
  );
}

function makeStyles(stylesOrCreator) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var name = options.name,
      classNamePrefixOption = options.classNamePrefix,
      Component = options.Component,
      _options$defaultTheme = options.defaultTheme,
      defaultTheme = _options$defaultTheme === void 0 ? noopTheme : _options$defaultTheme,
      stylesOptions2 = _objectWithoutProperties$2(options, ["name", "classNamePrefix", "Component", "defaultTheme"]);

  var stylesCreator = getStylesCreator(stylesOrCreator);
  var classNamePrefix = name || classNamePrefixOption || 'makeStyles';
  stylesCreator.options = {
    index: increment(),
    name: name,
    meta: classNamePrefix,
    classNamePrefix: classNamePrefix
  };

  var useStyles = function useStyles() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var theme = useTheme() || defaultTheme;

    var stylesOptions = _extends$5({}, React.useContext(StylesContext), stylesOptions2);

    var instance = React.useRef();
    var shouldUpdate = React.useRef();
    useSynchronousEffect(function () {
      var current = {
        name: name,
        state: {},
        stylesCreator: stylesCreator,
        stylesOptions: stylesOptions,
        theme: theme
      };
      attach(current, props);
      shouldUpdate.current = false;
      instance.current = current;
      return function () {
        detach(current);
      };
    }, [theme, stylesCreator]);
    React.useEffect(function () {
      if (shouldUpdate.current) {
        update(instance.current, props);
      }

      shouldUpdate.current = true;
    });
    var classes = getClasses(instance.current, props.classes, Component);

    if (process.env.NODE_ENV !== 'production') {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      React.useDebugValue(classes);
    }

    return classes;
  };

  return useStyles;
}

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var b$1="function"===typeof Symbol&&Symbol.for,c$1=b$1?Symbol.for("react.element"):60103,d$1=b$1?Symbol.for("react.portal"):60106,e$1=b$1?Symbol.for("react.fragment"):60107,f$1=b$1?Symbol.for("react.strict_mode"):60108,g$1=b$1?Symbol.for("react.profiler"):60114,h$1=b$1?Symbol.for("react.provider"):60109,k$1=b$1?Symbol.for("react.context"):60110,l$1=b$1?Symbol.for("react.async_mode"):60111,m$1=b$1?Symbol.for("react.concurrent_mode"):60111,n$1=b$1?Symbol.for("react.forward_ref"):60112,p$1=b$1?Symbol.for("react.suspense"):60113,q$1=b$1?
Symbol.for("react.suspense_list"):60120,r$1=b$1?Symbol.for("react.memo"):60115,t=b$1?Symbol.for("react.lazy"):60116,v$1=b$1?Symbol.for("react.block"):60121,w$1=b$1?Symbol.for("react.fundamental"):60117,x$1=b$1?Symbol.for("react.responder"):60118,y$1=b$1?Symbol.for("react.scope"):60119;
function z$1(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c$1:switch(a=a.type,a){case l$1:case m$1:case e$1:case g$1:case f$1:case p$1:return a;default:switch(a=a&&a.$$typeof,a){case k$1:case n$1:case t:case r$1:case h$1:return a;default:return u}}case d$1:return u}}}function A$1(a){return z$1(a)===m$1}var AsyncMode=l$1;var ConcurrentMode=m$1;var ContextConsumer$1=k$1;var ContextProvider$1=h$1;var Element$2=c$1;var ForwardRef$1=n$1;var Fragment$1=e$1;var Lazy$1=t;var Memo$1=r$1;var Portal$1=d$1;
var Profiler$1=g$1;var StrictMode$1=f$1;var Suspense$1=p$1;var isAsyncMode$1=function(a){return A$1(a)||z$1(a)===l$1};var isConcurrentMode$1=A$1;var isContextConsumer$1=function(a){return z$1(a)===k$1};var isContextProvider$1=function(a){return z$1(a)===h$1};var isElement$1=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c$1};var isForwardRef$1=function(a){return z$1(a)===n$1};var isFragment$1=function(a){return z$1(a)===e$1};var isLazy$1=function(a){return z$1(a)===t};
var isMemo$1=function(a){return z$1(a)===r$1};var isPortal$1=function(a){return z$1(a)===d$1};var isProfiler$1=function(a){return z$1(a)===g$1};var isStrictMode$1=function(a){return z$1(a)===f$1};var isSuspense$1=function(a){return z$1(a)===p$1};
var isValidElementType$1=function(a){return "string"===typeof a||"function"===typeof a||a===e$1||a===m$1||a===g$1||a===f$1||a===p$1||a===q$1||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r$1||a.$$typeof===h$1||a.$$typeof===k$1||a.$$typeof===n$1||a.$$typeof===w$1||a.$$typeof===x$1||a.$$typeof===y$1||a.$$typeof===v$1)};var typeOf$1=z$1;

var reactIs_production_min$2 = {
	AsyncMode: AsyncMode,
	ConcurrentMode: ConcurrentMode,
	ContextConsumer: ContextConsumer$1,
	ContextProvider: ContextProvider$1,
	Element: Element$2,
	ForwardRef: ForwardRef$1,
	Fragment: Fragment$1,
	Lazy: Lazy$1,
	Memo: Memo$1,
	Portal: Portal$1,
	Profiler: Profiler$1,
	StrictMode: StrictMode$1,
	Suspense: Suspense$1,
	isAsyncMode: isAsyncMode$1,
	isConcurrentMode: isConcurrentMode$1,
	isContextConsumer: isContextConsumer$1,
	isContextProvider: isContextProvider$1,
	isElement: isElement$1,
	isForwardRef: isForwardRef$1,
	isFragment: isFragment$1,
	isLazy: isLazy$1,
	isMemo: isMemo$1,
	isPortal: isPortal$1,
	isProfiler: isProfiler$1,
	isStrictMode: isStrictMode$1,
	isSuspense: isSuspense$1,
	isValidElementType: isValidElementType$1,
	typeOf: typeOf$1
};

var reactIs_development$2 = createCommonjsModule(function (module, exports) {



if (process.env.NODE_ENV !== "production") {
  (function() {

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
// (unstable) APIs that have been removed. Can we remove the symbols?

var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
}

function typeOf(object) {
  if (typeof object === 'object' && object !== null) {
    var $$typeof = object.$$typeof;

    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        var type = object.type;

        switch (type) {
          case REACT_ASYNC_MODE_TYPE:
          case REACT_CONCURRENT_MODE_TYPE:
          case REACT_FRAGMENT_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_SUSPENSE_TYPE:
            return type;

          default:
            var $$typeofType = type && type.$$typeof;

            switch ($$typeofType) {
              case REACT_CONTEXT_TYPE:
              case REACT_FORWARD_REF_TYPE:
              case REACT_LAZY_TYPE:
              case REACT_MEMO_TYPE:
              case REACT_PROVIDER_TYPE:
                return $$typeofType;

              default:
                return $$typeof;
            }

        }

      case REACT_PORTAL_TYPE:
        return $$typeof;
    }
  }

  return undefined;
} // AsyncMode is deprecated along with isAsyncMode

var AsyncMode = REACT_ASYNC_MODE_TYPE;
var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
var ContextConsumer = REACT_CONTEXT_TYPE;
var ContextProvider = REACT_PROVIDER_TYPE;
var Element = REACT_ELEMENT_TYPE;
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Fragment = REACT_FRAGMENT_TYPE;
var Lazy = REACT_LAZY_TYPE;
var Memo = REACT_MEMO_TYPE;
var Portal = REACT_PORTAL_TYPE;
var Profiler = REACT_PROFILER_TYPE;
var StrictMode = REACT_STRICT_MODE_TYPE;
var Suspense = REACT_SUSPENSE_TYPE;
var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

function isAsyncMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    }
  }

  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
}
function isConcurrentMode(object) {
  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isContextProvider(object) {
  return typeOf(object) === REACT_PROVIDER_TYPE;
}
function isElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function isForwardRef(object) {
  return typeOf(object) === REACT_FORWARD_REF_TYPE;
}
function isFragment(object) {
  return typeOf(object) === REACT_FRAGMENT_TYPE;
}
function isLazy(object) {
  return typeOf(object) === REACT_LAZY_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function isPortal(object) {
  return typeOf(object) === REACT_PORTAL_TYPE;
}
function isProfiler(object) {
  return typeOf(object) === REACT_PROFILER_TYPE;
}
function isStrictMode(object) {
  return typeOf(object) === REACT_STRICT_MODE_TYPE;
}
function isSuspense(object) {
  return typeOf(object) === REACT_SUSPENSE_TYPE;
}

exports.AsyncMode = AsyncMode;
exports.ConcurrentMode = ConcurrentMode;
exports.ContextConsumer = ContextConsumer;
exports.ContextProvider = ContextProvider;
exports.Element = Element;
exports.ForwardRef = ForwardRef;
exports.Fragment = Fragment;
exports.Lazy = Lazy;
exports.Memo = Memo;
exports.Portal = Portal;
exports.Profiler = Profiler;
exports.StrictMode = StrictMode;
exports.Suspense = Suspense;
exports.isAsyncMode = isAsyncMode;
exports.isConcurrentMode = isConcurrentMode;
exports.isContextConsumer = isContextConsumer;
exports.isContextProvider = isContextProvider;
exports.isElement = isElement;
exports.isForwardRef = isForwardRef;
exports.isFragment = isFragment;
exports.isLazy = isLazy;
exports.isMemo = isMemo;
exports.isPortal = isPortal;
exports.isProfiler = isProfiler;
exports.isStrictMode = isStrictMode;
exports.isSuspense = isSuspense;
exports.isValidElementType = isValidElementType;
exports.typeOf = typeOf;
  })();
}
});

var reactIs$2 = createCommonjsModule(function (module) {

if (process.env.NODE_ENV === 'production') {
  module.exports = reactIs_production_min$2;
} else {
  module.exports = reactIs_development$2;
}
});

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
var REACT_STATICS = {
  childContextTypes: true,
  contextType: true,
  contextTypes: true,
  defaultProps: true,
  displayName: true,
  getDefaultProps: true,
  getDerivedStateFromError: true,
  getDerivedStateFromProps: true,
  mixins: true,
  propTypes: true,
  type: true
};
var KNOWN_STATICS = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true
};
var FORWARD_REF_STATICS = {
  '$$typeof': true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  '$$typeof': true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs$2.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs$2.Memo] = MEMO_STATICS;

function getStatics(component) {
  // React v16.11 and below
  if (reactIs$2.isMemo(component)) {
    return MEMO_STATICS;
  } // React v16.12 and above


  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}

var defineProperty$1 = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
  if (typeof sourceComponent !== 'string') {
    // don't hoist over string (html) components
    if (objectPrototype) {
      var inheritedComponent = getPrototypeOf(sourceComponent);

      if (inheritedComponent && inheritedComponent !== objectPrototype) {
        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
      }
    }

    var keys = getOwnPropertyNames(sourceComponent);

    if (getOwnPropertySymbols$1) {
      keys = keys.concat(getOwnPropertySymbols$1(sourceComponent));
    }

    var targetStatics = getStatics(targetComponent);
    var sourceStatics = getStatics(sourceComponent);

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];

      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

        try {
          // Avoid failures from read-only properties
          defineProperty$1(targetComponent, key, descriptor);
        } catch (e) {}
      }
    }
  }

  return targetComponent;
}

var hoistNonReactStatics_cjs = hoistNonReactStatics;

// It does not modify the component passed to it;
// instead, it returns a new component, with a `classes` property.

var withStyles = function withStyles(stylesOrCreator) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return function (Component) {
    var defaultTheme = options.defaultTheme,
        _options$withTheme = options.withTheme,
        withTheme = _options$withTheme === void 0 ? false : _options$withTheme,
        name = options.name,
        stylesOptions = _objectWithoutProperties$2(options, ["defaultTheme", "withTheme", "name"]);

    if (process.env.NODE_ENV !== 'production') {
      if (Component === undefined) {
        throw new Error(['You are calling withStyles(styles)(Component) with an undefined component.', 'You may have forgotten to import it.'].join('\n'));
      }
    }

    var classNamePrefix = name;

    if (process.env.NODE_ENV !== 'production') {
      if (!name) {
        // Provide a better DX outside production.
        var displayName = utils.getDisplayName(Component);

        if (displayName !== undefined) {
          classNamePrefix = displayName;
        }
      }
    }

    var useStyles = makeStyles(stylesOrCreator, _extends$5({
      defaultTheme: defaultTheme,
      Component: Component,
      name: name || Component.displayName,
      classNamePrefix: classNamePrefix
    }, stylesOptions));
    var WithStyles = /*#__PURE__*/React.forwardRef(function WithStyles(props, ref) {
      var classesProp = props.classes,
          innerRef = props.innerRef,
          other = _objectWithoutProperties$2(props, ["classes", "innerRef"]); // The wrapper receives only user supplied props, which could be a subset of
      // the actual props Component might receive due to merging with defaultProps.
      // So copying it here would give us the same result in the wrapper as well.


      var classes = useStyles(_extends$5({}, Component.defaultProps, props));
      var theme;
      var more = other;

      if (typeof name === 'string' || withTheme) {
        // name and withTheme are invariant in the outer scope
        // eslint-disable-next-line react-hooks/rules-of-hooks
        theme = useTheme() || defaultTheme;

        if (name) {
          more = getThemeProps({
            theme: theme,
            name: name,
            props: other
          });
        } // Provide the theme to the wrapped component.
        // So we don't have to use the `withTheme()` Higher-order Component.


        if (withTheme && !more.theme) {
          more.theme = theme;
        }
      }

      return /*#__PURE__*/React.createElement(Component, _extends$5({
        ref: innerRef || ref,
        classes: classes
      }, more));
    });
    process.env.NODE_ENV !== "production" ? WithStyles.propTypes = {
      /**
       * Override or extend the styles applied to the component.
       */
      classes: propTypes.object,

      /**
       * Use that prop to pass a ref to the decorated component.
       * @deprecated
       */
      innerRef: utils.chainPropTypes(propTypes.oneOfType([propTypes.func, propTypes.object]), function (props) {
        if (props.innerRef == null) {
          return null;
        }

        return null; // return new Error(
        //   'Material-UI: The `innerRef` prop is deprecated and will be removed in v5. ' +
        //     'Refs are now automatically forwarded to the inner component.',
        // );
      })
    } : void 0;

    if (process.env.NODE_ENV !== 'production') {
      WithStyles.displayName = "WithStyles(".concat(utils.getDisplayName(Component), ")");
    }

    hoistNonReactStatics_cjs(WithStyles, Component);

    if (process.env.NODE_ENV !== 'production') {
      // Exposed for test purposes.
      WithStyles.Naked = Component;
      WithStyles.options = options;
      WithStyles.useStyles = useStyles;
    }

    return WithStyles;
  };
};

var defaultTheme = createMuiTheme();

function useTheme$1() {
  var theme = useTheme() || defaultTheme;

  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    React.useDebugValue(theme);
  }

  return theme;
}

function withStyles$1(stylesOrCreator, options) {
  return withStyles(stylesOrCreator, _extends$1({
    defaultTheme: defaultTheme
  }, options));
}

function _arrayLikeToArray$2(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _arrayWithoutHoles$1(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray$2(arr);
}

function _iterableToArray$1(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _unsupportedIterableToArray$2(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray$2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);
}

function _nonIterableSpread$1() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toConsumableArray$1(arr) {
  return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$2(arr) || _nonIterableSpread$1();
}

function _arrayWithHoles$1(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit$1(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest$1() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray$1(arr, i) {
  return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _unsupportedIterableToArray$2(arr, i) || _nonIterableRest$1();
}

// It should to be noted that this function isn't equivalent to `text-transform: capitalize`.
//
// A strict capitalization should uppercase the first letter of each word a the sentence.
// We only handle the first word.
function capitalize(string) {
  if (typeof string !== 'string') {
    throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: capitalize(string) expects a string argument." : utils.formatMuiErrorMessage(7));
  }

  return string.charAt(0).toUpperCase() + string.slice(1);
}

/**
 * Safe chained function
 *
 * Will only create a new function if needed,
 * otherwise will pass back existing functions or null.
 *
 * @param {function} functions to chain
 * @returns {function|null}
 */
function createChainedFunction() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  return funcs.reduce(function (acc, func) {
    if (func == null) {
      return acc;
    }

    if (process.env.NODE_ENV !== 'production') {
      if (typeof func !== 'function') {
        console.error('Material-UI: Invalid Argument Type, must only provide functions, undefined, or null.');
      }
    }

    return function chainedFunction() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      acc.apply(this, args);
      func.apply(this, args);
    };
  }, function () {});
}

var styles = function styles(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      userSelect: 'none',
      width: '1em',
      height: '1em',
      display: 'inline-block',
      fill: 'currentColor',
      flexShrink: 0,
      fontSize: theme.typography.pxToRem(24),
      transition: theme.transitions.create('fill', {
        duration: theme.transitions.duration.shorter
      })
    },

    /* Styles applied to the root element if `color="primary"`. */
    colorPrimary: {
      color: theme.palette.primary.main
    },

    /* Styles applied to the root element if `color="secondary"`. */
    colorSecondary: {
      color: theme.palette.secondary.main
    },

    /* Styles applied to the root element if `color="action"`. */
    colorAction: {
      color: theme.palette.action.active
    },

    /* Styles applied to the root element if `color="error"`. */
    colorError: {
      color: theme.palette.error.main
    },

    /* Styles applied to the root element if `color="disabled"`. */
    colorDisabled: {
      color: theme.palette.action.disabled
    },

    /* Styles applied to the root element if `fontSize="inherit"`. */
    fontSizeInherit: {
      fontSize: 'inherit'
    },

    /* Styles applied to the root element if `fontSize="small"`. */
    fontSizeSmall: {
      fontSize: theme.typography.pxToRem(20)
    },

    /* Styles applied to the root element if `fontSize="large"`. */
    fontSizeLarge: {
      fontSize: theme.typography.pxToRem(35)
    }
  };
};
var SvgIcon = /*#__PURE__*/forwardRef(function SvgIcon(props, ref) {
  var children = props.children,
      classes = props.classes,
      className = props.className,
      _props$color = props.color,
      color = _props$color === void 0 ? 'inherit' : _props$color,
      _props$component = props.component,
      Component = _props$component === void 0 ? 'svg' : _props$component,
      _props$fontSize = props.fontSize,
      fontSize = _props$fontSize === void 0 ? 'default' : _props$fontSize,
      htmlColor = props.htmlColor,
      titleAccess = props.titleAccess,
      _props$viewBox = props.viewBox,
      viewBox = _props$viewBox === void 0 ? '0 0 24 24' : _props$viewBox,
      other = _objectWithoutProperties$1(props, ["children", "classes", "className", "color", "component", "fontSize", "htmlColor", "titleAccess", "viewBox"]);

  return /*#__PURE__*/createElement(Component, _extends$1({
    className: clsx(classes.root, className, color !== 'inherit' && classes["color".concat(capitalize(color))], fontSize !== 'default' && classes["fontSize".concat(capitalize(fontSize))]),
    focusable: "false",
    viewBox: viewBox,
    color: htmlColor,
    "aria-hidden": titleAccess ? undefined : true,
    role: titleAccess ? 'img' : undefined,
    ref: ref
  }, other), children, titleAccess ? /*#__PURE__*/createElement("title", null, titleAccess) : null);
});
process.env.NODE_ENV !== "production" ? SvgIcon.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * Node passed into the SVG element.
   */
  children: propTypes.node,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: propTypes.object,

  /**
   * @ignore
   */
  className: propTypes.string,

  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
   */
  color: propTypes.oneOf(['action', 'disabled', 'error', 'inherit', 'primary', 'secondary']),

  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: propTypes
  /* @typescript-to-proptypes-ignore */
  .elementType,

  /**
   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
   */
  fontSize: propTypes.oneOf(['default', 'inherit', 'large', 'small']),

  /**
   * Applies a color attribute to the SVG element.
   */
  htmlColor: propTypes.string,

  /**
   * The shape-rendering attribute. The behavior of the different options is described on the
   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
   * If you are having issues with blurry icons you should investigate this property.
   */
  shapeRendering: propTypes.string,

  /**
   * Provides a human-readable title for the element that contains it.
   * https://www.w3.org/TR/SVG-access/#Equivalent
   */
  titleAccess: propTypes.string,

  /**
   * Allows you to redefine what the coordinates without units mean inside an SVG element.
   * For example, if the SVG element is 500 (width) by 200 (height),
   * and you pass viewBox="0 0 50 20",
   * this means that the coordinates inside the SVG will go from the top left corner (0,0)
   * to bottom right (50,20) and each unit will be worth 10px.
   */
  viewBox: propTypes.string
} : void 0;
SvgIcon.muiName = 'SvgIcon';
var SvgIcon$1 = withStyles$1(styles, {
  name: 'MuiSvgIcon'
})(SvgIcon);

/**
 * Private module reserved for @material-ui/x packages.
 */

function createSvgIcon(path, displayName) {
  var Component = function Component(props, ref) {
    return /*#__PURE__*/React.createElement(SvgIcon$1, _extends$1({
      ref: ref
    }, props), path);
  };

  if (process.env.NODE_ENV !== 'production') {
    // Need to set `displayName` on the inner component for React.memo.
    // React prior to 16.14 ignores `displayName` on the wrapper.
    Component.displayName = "".concat(displayName, "Icon");
  }

  Component.muiName = SvgIcon$1.muiName;
  return /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Component));
}

// Corresponds to 10 frames at 60 Hz.
// A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.
function debounce(func) {
  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 166;
  var timeout;

  function debounced() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    // eslint-disable-next-line consistent-this
    var that = this;

    var later = function later() {
      func.apply(that, args);
    };

    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  }

  debounced.clear = function () {
    clearTimeout(timeout);
  };

  return debounced;
}

// TODO v5: consider to make it private
function setRef(ref, value) {
  if (typeof ref === 'function') {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
}

/* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */
function useControlled(_ref) {
  var controlled = _ref.controlled,
      defaultProp = _ref.default,
      name = _ref.name,
      _ref$state = _ref.state,
      state = _ref$state === void 0 ? 'value' : _ref$state;

  var _React$useRef = useRef(controlled !== undefined),
      isControlled = _React$useRef.current;

  var _React$useState = useState(defaultProp),
      valueState = _React$useState[0],
      setValue = _React$useState[1];

  var value = isControlled ? controlled : valueState;

  if (process.env.NODE_ENV !== 'production') {
    useEffect(function () {
      if (isControlled !== (controlled !== undefined)) {
        console.error(["Material-UI: A component is changing the ".concat(isControlled ? '' : 'un', "controlled ").concat(state, " state of ").concat(name, " to be ").concat(isControlled ? 'un' : '', "controlled."), 'Elements should not switch from uncontrolled to controlled (or vice versa).', "Decide between using a controlled or uncontrolled ".concat(name, " ") + 'element for the lifetime of the component.', "The nature of the state is determined during the first render, it's considered controlled if the value is not `undefined`.", 'More info: https://fb.me/react-controlled-components'].join('\n'));
      }
    }, [controlled]);

    var _React$useRef2 = useRef(defaultProp),
        defaultValue = _React$useRef2.current;

    useEffect(function () {
      if (!isControlled && defaultValue !== defaultProp) {
        console.error(["Material-UI: A component is changing the default ".concat(state, " state of an uncontrolled ").concat(name, " after being initialized. ") + "To suppress this warning opt to use a controlled ".concat(name, ".")].join('\n'));
      }
    }, [JSON.stringify(defaultProp)]);
  }

  var setValueIfUncontrolled = useCallback(function (newValue) {
    if (!isControlled) {
      setValue(newValue);
    }
  }, []);
  return [value, setValueIfUncontrolled];
}

var useEnhancedEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;
/**
 * https://github.com/facebook/react/issues/14099#issuecomment-440013892
 *
 * @param {function} fn
 */

function useEventCallback(fn) {
  var ref = useRef(fn);
  useEnhancedEffect(function () {
    ref.current = fn;
  });
  return useCallback(function () {
    return (ref.current).apply(void 0, arguments);
  }, []);
}

function useForkRef(refA, refB) {
  /**
   * This will create a new function if the ref props change and are defined.
   * This means react will call the old forkRef with `null` and the new forkRef
   * with the ref. Cleanup naturally emerges from this behavior
   */
  return useMemo(function () {
    if (refA == null && refB == null) {
      return null;
    }

    return function (refValue) {
      setRef(refA, refValue);
      setRef(refB, refValue);
    };
  }, [refA, refB]);
}

/**
 * Private module reserved for @material-ui/x packages.
 */

function useId(idOverride) {
  var _React$useState = useState(idOverride),
      defaultId = _React$useState[0],
      setDefaultId = _React$useState[1];

  var id = idOverride || defaultId;
  useEffect(function () {
    if (defaultId == null) {
      // Fallback to this default id when possible.
      // Use the random value for client-side rendering only.
      // We can't use it server-side.
      setDefaultId("mui-".concat(Math.round(Math.random() * 1e5)));
    }
  }, [defaultId]);
  return id;
}

// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js
var hadKeyboardEvent = true;
var hadFocusVisibleRecently = false;
var hadFocusVisibleRecentlyTimeout = null;
var inputTypesWhitelist = {
  text: true,
  search: true,
  url: true,
  tel: true,
  email: true,
  password: true,
  number: true,
  date: true,
  month: true,
  week: true,
  time: true,
  datetime: true,
  'datetime-local': true
};
/**
 * Computes whether the given element should automatically trigger the
 * `focus-visible` class being added, i.e. whether it should always match
 * `:focus-visible` when focused.
 * @param {Element} node
 * @return {boolean}
 */

function focusTriggersKeyboardModality(node) {
  var type = node.type,
      tagName = node.tagName;

  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {
    return true;
  }

  if (tagName === 'TEXTAREA' && !node.readOnly) {
    return true;
  }

  if (node.isContentEditable) {
    return true;
  }

  return false;
}
/**
 * Keep track of our keyboard modality state with `hadKeyboardEvent`.
 * If the most recent user interaction was via the keyboard;
 * and the key press did not include a meta, alt/option, or control key;
 * then the modality is keyboard. Otherwise, the modality is not keyboard.
 * @param {KeyboardEvent} event
 */


function handleKeyDown(event) {
  if (event.metaKey || event.altKey || event.ctrlKey) {
    return;
  }

  hadKeyboardEvent = true;
}
/**
 * If at any point a user clicks with a pointing device, ensure that we change
 * the modality away from keyboard.
 * This avoids the situation where a user presses a key on an already focused
 * element, and then clicks on a different element, focusing it with a
 * pointing device, while we still think we're in keyboard modality.
 */


function handlePointerDown() {
  hadKeyboardEvent = false;
}

function handleVisibilityChange() {
  if (this.visibilityState === 'hidden') {
    // If the tab becomes active again, the browser will handle calling focus
    // on the element (Safari actually calls it twice).
    // If this tab change caused a blur on an element with focus-visible,
    // re-apply the class when the user switches back to the tab.
    if (hadFocusVisibleRecently) {
      hadKeyboardEvent = true;
    }
  }
}

function prepare(doc) {
  doc.addEventListener('keydown', handleKeyDown, true);
  doc.addEventListener('mousedown', handlePointerDown, true);
  doc.addEventListener('pointerdown', handlePointerDown, true);
  doc.addEventListener('touchstart', handlePointerDown, true);
  doc.addEventListener('visibilitychange', handleVisibilityChange, true);
}

function isFocusVisible(event) {
  var target = event.target;

  try {
    return target.matches(':focus-visible');
  } catch (error) {} // browsers not implementing :focus-visible will throw a SyntaxError
  // we use our own heuristic for those browsers
  // rethrow might be better if it's not the expected error but do we really
  // want to crash if focus-visible malfunctioned?
  // no need for validFocusTarget check. the user does that by attaching it to
  // focusable events only


  return hadKeyboardEvent || focusTriggersKeyboardModality(target);
}
/**
 * Should be called if a blur event is fired on a focus-visible element
 */


function handleBlurVisible() {
  // To detect a tab/window switch, we look for a blur event followed
  // rapidly by a visibility change.
  // If we don't see a visibility change within 100ms, it's probably a
  // regular focus change.
  hadFocusVisibleRecently = true;
  window.clearTimeout(hadFocusVisibleRecentlyTimeout);
  hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {
    hadFocusVisibleRecently = false;
  }, 100);
}

function useIsFocusVisible() {
  var ref = useCallback(function (instance) {
    var node = findDOMNode(instance);

    if (node != null) {
      prepare(node.ownerDocument);
    }
  }, []);

  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useDebugValue(isFocusVisible);
  }

  return {
    isFocusVisible: isFocusVisible,
    onBlurVisible: handleBlurVisible,
    ref: ref
  };
}

function usePagination() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  // keep default values in sync with @default tags in Pagination.propTypes
  var _props$boundaryCount = props.boundaryCount,
      boundaryCount = _props$boundaryCount === void 0 ? 1 : _props$boundaryCount,
      _props$componentName = props.componentName,
      componentName = _props$componentName === void 0 ? 'usePagination' : _props$componentName,
      _props$count = props.count,
      count = _props$count === void 0 ? 1 : _props$count,
      _props$defaultPage = props.defaultPage,
      defaultPage = _props$defaultPage === void 0 ? 1 : _props$defaultPage,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$hideNextButton = props.hideNextButton,
      hideNextButton = _props$hideNextButton === void 0 ? false : _props$hideNextButton,
      _props$hidePrevButton = props.hidePrevButton,
      hidePrevButton = _props$hidePrevButton === void 0 ? false : _props$hidePrevButton,
      handleChange = props.onChange,
      pageProp = props.page,
      _props$showFirstButto = props.showFirstButton,
      showFirstButton = _props$showFirstButto === void 0 ? false : _props$showFirstButto,
      _props$showLastButton = props.showLastButton,
      showLastButton = _props$showLastButton === void 0 ? false : _props$showLastButton,
      _props$siblingCount = props.siblingCount,
      siblingCount = _props$siblingCount === void 0 ? 1 : _props$siblingCount,
      other = _objectWithoutProperties(props, ["boundaryCount", "componentName", "count", "defaultPage", "disabled", "hideNextButton", "hidePrevButton", "onChange", "page", "showFirstButton", "showLastButton", "siblingCount"]);

  var _useControlled = useControlled({
    controlled: pageProp,
    default: defaultPage,
    name: componentName,
    state: 'page'
  }),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      page = _useControlled2[0],
      setPageState = _useControlled2[1];

  var handleClick = function handleClick(event, value) {
    if (!pageProp) {
      setPageState(value);
    }

    if (handleChange) {
      handleChange(event, value);
    }
  }; // https://dev.to/namirsab/comment/2050


  var range = function range(start, end) {
    var length = end - start + 1;
    return Array.from({
      length: length
    }, function (_, i) {
      return start + i;
    });
  };

  var startPages = range(1, Math.min(boundaryCount, count));
  var endPages = range(Math.max(count - boundaryCount + 1, boundaryCount + 1), count);
  var siblingsStart = Math.max(Math.min( // Natural start
  page - siblingCount, // Lower boundary when page is high
  count - boundaryCount - siblingCount * 2 - 1), // Greater than startPages
  boundaryCount + 2);
  var siblingsEnd = Math.min(Math.max( // Natural end
  page + siblingCount, // Upper boundary when page is low
  boundaryCount + siblingCount * 2 + 2), // Less than endPages
  endPages[0] - 2); // Basic list of items to render
  // e.g. itemList = ['first', 'previous', 1, 'ellipsis', 4, 5, 6, 'ellipsis', 10, 'next', 'last']

  var itemList = [].concat(_toConsumableArray$1(showFirstButton ? ['first'] : []), _toConsumableArray$1(hidePrevButton ? [] : ['previous']), _toConsumableArray$1(startPages), _toConsumableArray$1(siblingsStart > boundaryCount + 2 ? ['start-ellipsis'] : boundaryCount + 1 < count - boundaryCount ? [boundaryCount + 1] : []), _toConsumableArray$1(range(siblingsStart, siblingsEnd)), _toConsumableArray$1(siblingsEnd < count - boundaryCount - 1 ? ['end-ellipsis'] : count - boundaryCount > boundaryCount ? [count - boundaryCount] : []), _toConsumableArray$1(endPages), _toConsumableArray$1(hideNextButton ? [] : ['next']), _toConsumableArray$1(showLastButton ? ['last'] : [])); // Map the button type to its page number

  var buttonPage = function buttonPage(type) {
    switch (type) {
      case 'first':
        return 1;

      case 'previous':
        return page - 1;

      case 'next':
        return page + 1;

      case 'last':
        return count;

      default:
        return null;
    }
  }; // Convert the basic item list to PaginationItem props objects


  var items = itemList.map(function (item) {
    return typeof item === 'number' ? {
      onClick: function onClick(event) {
        handleClick(event, item);
      },
      type: 'page',
      page: item,
      selected: item === page,
      disabled: disabled,
      'aria-current': item === page ? 'true' : undefined
    } : {
      onClick: function onClick(event) {
        handleClick(event, buttonPage(item));
      },
      type: item,
      page: buttonPage(item),
      selected: false,
      disabled: disabled || item.indexOf('ellipsis') === -1 && (item === 'next' || item === 'last' ? page >= count : page <= 1)
    };
  });
  return _extends({
    items: items
  }, other);
}

function _arrayLikeToArray$3(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _arrayWithoutHoles$2(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray$3(arr);
}

function _iterableToArray$2(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _unsupportedIterableToArray$3(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray$3(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen);
}

function _nonIterableSpread$2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toConsumableArray$2(arr) {
  return _arrayWithoutHoles$2(arr) || _iterableToArray$2(arr) || _unsupportedIterableToArray$3(arr) || _nonIterableSpread$2();
}

function _extends$6() {
  _extends$6 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$6.apply(this, arguments);
}

function _objectWithoutPropertiesLoose$5(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _inheritsLoose$1(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

var config = {
  disabled: false
};

var timeoutsShape = process.env.NODE_ENV !== 'production' ? propTypes.oneOfType([propTypes.number, propTypes.shape({
  enter: propTypes.number,
  exit: propTypes.number,
  appear: propTypes.number
}).isRequired]) : null;
var classNamesShape = process.env.NODE_ENV !== 'production' ? propTypes.oneOfType([propTypes.string, propTypes.shape({
  enter: propTypes.string,
  exit: propTypes.string,
  active: propTypes.string
}), propTypes.shape({
  enter: propTypes.string,
  enterDone: propTypes.string,
  enterActive: propTypes.string,
  exit: propTypes.string,
  exitDone: propTypes.string,
  exitActive: propTypes.string
})]) : null;

var TransitionGroupContext = React.createContext(null);

var UNMOUNTED = 'unmounted';
var EXITED = 'exited';
var ENTERING = 'entering';
var ENTERED = 'entered';
var EXITING = 'exiting';
/**
 * The Transition component lets you describe a transition from one component
 * state to another _over time_ with a simple declarative API. Most commonly
 * it's used to animate the mounting and unmounting of a component, but can also
 * be used to describe in-place transition states as well.
 *
 * ---
 *
 * **Note**: `Transition` is a platform-agnostic base component. If you're using
 * transitions in CSS, you'll probably want to use
 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
 * instead. It inherits all the features of `Transition`, but contains
 * additional features necessary to play nice with CSS transitions (hence the
 * name of the component).
 *
 * ---
 *
 * By default the `Transition` component does not alter the behavior of the
 * component it renders, it only tracks "enter" and "exit" states for the
 * components. It's up to you to give meaning and effect to those states. For
 * example we can add styles to a component when it enters or exits:
 *
 * ```jsx
 * import { Transition } from 'react-transition-group';
 *
 * const duration = 300;
 *
 * const defaultStyle = {
 *   transition: `opacity ${duration}ms ease-in-out`,
 *   opacity: 0,
 * }
 *
 * const transitionStyles = {
 *   entering: { opacity: 1 },
 *   entered:  { opacity: 1 },
 *   exiting:  { opacity: 0 },
 *   exited:  { opacity: 0 },
 * };
 *
 * const Fade = ({ in: inProp }) => (
 *   <Transition in={inProp} timeout={duration}>
 *     {state => (
 *       <div style={{
 *         ...defaultStyle,
 *         ...transitionStyles[state]
 *       }}>
 *         I'm a fade Transition!
 *       </div>
 *     )}
 *   </Transition>
 * );
 * ```
 *
 * There are 4 main states a Transition can be in:
 *  - `'entering'`
 *  - `'entered'`
 *  - `'exiting'`
 *  - `'exited'`
 *
 * Transition state is toggled via the `in` prop. When `true` the component
 * begins the "Enter" stage. During this stage, the component will shift from
 * its current transition state, to `'entering'` for the duration of the
 * transition and then to the `'entered'` stage once it's complete. Let's take
 * the following example (we'll use the
 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <Transition in={inProp} timeout={500}>
 *         {state => (
 *           // ...
 *         )}
 *       </Transition>
 *       <button onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the button is clicked the component will shift to the `'entering'` state
 * and stay there for 500ms (the value of `timeout`) before it finally switches
 * to `'entered'`.
 *
 * When `in` is `false` the same thing happens except the state moves from
 * `'exiting'` to `'exited'`.
 */

var Transition = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose$1(Transition, _React$Component);

  function Transition(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;

    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }

    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }

  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;

    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }

    return null;
  } // getSnapshotBeforeUpdate(prevProps) {
  //   let nextStatus = null
  //   if (prevProps !== this.props) {
  //     const { status } = this.state
  //     if (this.props.in) {
  //       if (status !== ENTERING && status !== ENTERED) {
  //         nextStatus = ENTERING
  //       }
  //     } else {
  //       if (status === ENTERING || status === ENTERED) {
  //         nextStatus = EXITING
  //       }
  //     }
  //   }
  //   return { nextStatus }
  // }
  ;

  var _proto = Transition.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;

    if (prevProps !== this.props) {
      var status = this.state.status;

      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }

    this.updateStatus(false, nextStatus);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };

  _proto.getTimeouts = function getTimeouts() {
    var timeout = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout;

    if (timeout != null && typeof timeout !== 'number') {
      exit = timeout.exit;
      enter = timeout.enter; // TODO: remove fallback for next major

      appear = timeout.appear !== undefined ? timeout.appear : enter;
    }

    return {
      exit: exit,
      enter: enter,
      appear: appear
    };
  };

  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }

    if (nextStatus !== null) {
      // nextStatus will always be ENTERING or EXITING.
      this.cancelNextCallback();

      if (nextStatus === ENTERING) {
        this.performEnter(mounting);
      } else {
        this.performExit();
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };

  _proto.performEnter = function performEnter(mounting) {
    var _this2 = this;

    var enter = this.props.enter;
    var appearing = this.context ? this.context.isMounting : mounting;

    var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing],
        maybeNode = _ref2[0],
        maybeAppearing = _ref2[1];

    var timeouts = this.getTimeouts();
    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
    // if we are mounting and running this it means appear _must_ be set

    if (!mounting && !enter || config.disabled) {
      this.safeSetState({
        status: ENTERED
      }, function () {
        _this2.props.onEntered(maybeNode);
      });
      return;
    }

    this.props.onEnter(maybeNode, maybeAppearing);
    this.safeSetState({
      status: ENTERING
    }, function () {
      _this2.props.onEntering(maybeNode, maybeAppearing);

      _this2.onTransitionEnd(enterTimeout, function () {
        _this2.safeSetState({
          status: ENTERED
        }, function () {
          _this2.props.onEntered(maybeNode, maybeAppearing);
        });
      });
    });
  };

  _proto.performExit = function performExit() {
    var _this3 = this;

    var exit = this.props.exit;
    var timeouts = this.getTimeouts();
    var maybeNode = this.props.nodeRef ? undefined : ReactDOM.findDOMNode(this); // no exit animation skip right to EXITED

    if (!exit || config.disabled) {
      this.safeSetState({
        status: EXITED
      }, function () {
        _this3.props.onExited(maybeNode);
      });
      return;
    }

    this.props.onExit(maybeNode);
    this.safeSetState({
      status: EXITING
    }, function () {
      _this3.props.onExiting(maybeNode);

      _this3.onTransitionEnd(timeouts.exit, function () {
        _this3.safeSetState({
          status: EXITED
        }, function () {
          _this3.props.onExited(maybeNode);
        });
      });
    });
  };

  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };

  _proto.safeSetState = function safeSetState(nextState, callback) {
    // This shouldn't be necessary, but there are weird race conditions with
    // setState callbacks and unmounting in testing, so always make sure that
    // we can cancel any pending setState callbacks after we unmount.
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };

  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;

    var active = true;

    this.nextCallback = function (event) {
      if (active) {
        active = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };

    this.nextCallback.cancel = function () {
      active = false;
    };

    return this.nextCallback;
  };

  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
    this.setNextCallback(handler);
    var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

    if (!node || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }

    if (this.props.addEndListener) {
      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
          maybeNode = _ref3[0],
          maybeNextCallback = _ref3[1];

      this.props.addEndListener(maybeNode, maybeNextCallback);
    }

    if (timeout != null) {
      setTimeout(this.nextCallback, timeout);
    }
  };

  _proto.render = function render() {
    var status = this.state.status;

    if (status === UNMOUNTED) {
      return null;
    }

    var _this$props = this.props,
        children = _this$props.children,
        _in = _this$props.in,
        _mountOnEnter = _this$props.mountOnEnter,
        _unmountOnExit = _this$props.unmountOnExit,
        _appear = _this$props.appear,
        _enter = _this$props.enter,
        _exit = _this$props.exit,
        _timeout = _this$props.timeout,
        _addEndListener = _this$props.addEndListener,
        _onEnter = _this$props.onEnter,
        _onEntering = _this$props.onEntering,
        _onEntered = _this$props.onEntered,
        _onExit = _this$props.onExit,
        _onExiting = _this$props.onExiting,
        _onExited = _this$props.onExited,
        _nodeRef = _this$props.nodeRef,
        childProps = _objectWithoutPropertiesLoose$5(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);

    return (
      /*#__PURE__*/
      // allows for nested Transitions
      React.createElement(TransitionGroupContext.Provider, {
        value: null
      }, typeof children === 'function' ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))
    );
  };

  return Transition;
}(React.Component);

Transition.contextType = TransitionGroupContext;
Transition.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * A React reference to DOM element that need to transition:
   * https://stackoverflow.com/a/51127130/4671932
   *
   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
   *      (e.g. `onEnter`) because user already has direct access to the node.
   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
   *     (see
   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
   */
  nodeRef: propTypes.shape({
    current: typeof Element === 'undefined' ? propTypes.any : propTypes.instanceOf(Element)
  }),

  /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */
  children: propTypes.oneOfType([propTypes.func.isRequired, propTypes.element.isRequired]).isRequired,

  /**
   * Show the component; triggers the enter or exit states
   */
  in: propTypes.bool,

  /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */
  mountOnEnter: propTypes.bool,

  /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */
  unmountOnExit: propTypes.bool,

  /**
   * By default the child component does not perform the enter transition when
   * it first mounts, regardless of the value of `in`. If you want this
   * behavior, set both `appear` and `in` to `true`.
   *
   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
   * > only adds an additional enter transition. However, in the
   * > `<CSSTransition>` component that first enter transition does result in
   * > additional `.appear-*` classes, that way you can choose to style it
   * > differently.
   */
  appear: propTypes.bool,

  /**
   * Enable or disable enter transitions.
   */
  enter: propTypes.bool,

  /**
   * Enable or disable exit transitions.
   */
  exit: propTypes.bool,

  /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */
  timeout: function timeout(props) {
    var pt = timeoutsShape;
    if (!props.addEndListener) pt = pt.isRequired;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return pt.apply(void 0, [props].concat(args));
  },

  /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. Timeouts are still used as a fallback if provided.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */
  addEndListener: propTypes.func,

  /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEnter: propTypes.func,

  /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: propTypes.func,

  /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: propTypes.func,

  /**
   * Callback fired before the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExit: propTypes.func,

  /**
   * Callback fired after the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExiting: propTypes.func,

  /**
   * Callback fired after the "exited" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExited: propTypes.func
} : {}; // Name the function so it is clearer in the documentation

function noop() {}

Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop,
  onEntering: noop,
  onEntered: noop,
  onExit: noop,
  onExiting: noop,
  onExited: noop
};
Transition.UNMOUNTED = UNMOUNTED;
Transition.EXITED = EXITED;
Transition.ENTERING = ENTERING;
Transition.ENTERED = ENTERED;
Transition.EXITING = EXITING;

function _assertThisInitialized$1(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */

function getChildMapping(children, mapFn) {
  var mapper = function mapper(child) {
    return mapFn && isValidElement(child) ? mapFn(child) : child;
  };

  var result = Object.create(null);
  if (children) Children.map(children, function (c) {
    return c;
  }).forEach(function (child) {
    // run the map function here instead so that the key is the computed one
    result[child.key] = mapper(child);
  });
  return result;
}
/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */

function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};

  function getValueForKey(key) {
    return key in next ? next[key] : prev[key];
  } // For each key of `next`, the list of keys to insert before that key in
  // the combined list


  var nextKeysPending = Object.create(null);
  var pendingKeys = [];

  for (var prevKey in prev) {
    if (prevKey in next) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }

  var i;
  var childMapping = {};

  for (var nextKey in next) {
    if (nextKeysPending[nextKey]) {
      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
        var pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    }

    childMapping[nextKey] = getValueForKey(nextKey);
  } // Finally, add the keys which didn't appear before any key in `next`


  for (i = 0; i < pendingKeys.length; i++) {
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  }

  return childMapping;
}

function getProp(child, prop, props) {
  return props[prop] != null ? props[prop] : child.props[prop];
}

function getInitialChildMapping(props, onExited) {
  return getChildMapping(props.children, function (child) {
    return cloneElement(child, {
      onExited: onExited.bind(null, child),
      in: true,
      appear: getProp(child, 'appear', props),
      enter: getProp(child, 'enter', props),
      exit: getProp(child, 'exit', props)
    });
  });
}
function getNextChildMapping(nextProps, prevChildMapping, onExited) {
  var nextChildMapping = getChildMapping(nextProps.children);
  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
  Object.keys(children).forEach(function (key) {
    var child = children[key];
    if (!isValidElement(child)) return;
    var hasPrev = (key in prevChildMapping);
    var hasNext = (key in nextChildMapping);
    var prevChild = prevChildMapping[key];
    var isLeaving = isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)

    if (hasNext && (!hasPrev || isLeaving)) {
      // console.log('entering', key)
      children[key] = cloneElement(child, {
        onExited: onExited.bind(null, child),
        in: true,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    } else if (!hasNext && hasPrev && !isLeaving) {
      // item is old (exiting)
      // console.log('leaving', key)
      children[key] = cloneElement(child, {
        in: false
      });
    } else if (hasNext && hasPrev && isValidElement(prevChild)) {
      // item hasn't changed transition states
      // copy over the last transition props;
      // console.log('unchanged', key)
      children[key] = cloneElement(child, {
        onExited: onExited.bind(null, child),
        in: prevChild.props.in,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    }
  });
  return children;
}

var values$1 = Object.values || function (obj) {
  return Object.keys(obj).map(function (k) {
    return obj[k];
  });
};

var defaultProps = {
  component: 'div',
  childFactory: function childFactory(child) {
    return child;
  }
};
/**
 * The `<TransitionGroup>` component manages a set of transition components
 * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
 * components, `<TransitionGroup>` is a state machine for managing the mounting
 * and unmounting of components over time.
 *
 * Consider the example below. As items are removed or added to the TodoList the
 * `in` prop is toggled automatically by the `<TransitionGroup>`.
 *
 * Note that `<TransitionGroup>`  does not define any animation behavior!
 * Exactly _how_ a list item animates is up to the individual transition
 * component. This means you can mix and match animations across different list
 * items.
 */

var TransitionGroup = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose$1(TransitionGroup, _React$Component);

  function TransitionGroup(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;

    var handleExited = _this.handleExited.bind(_assertThisInitialized$1(_this)); // Initial children should all be entering, dependent on appear


    _this.state = {
      contextValue: {
        isMounting: true
      },
      handleExited: handleExited,
      firstRender: true
    };
    return _this;
  }

  var _proto = TransitionGroup.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.mounted = true;
    this.setState({
      contextValue: {
        isMounting: false
      }
    });
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.mounted = false;
  };

  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
    var prevChildMapping = _ref.children,
        handleExited = _ref.handleExited,
        firstRender = _ref.firstRender;
    return {
      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
      firstRender: false
    };
  } // node is `undefined` when user provided `nodeRef` prop
  ;

  _proto.handleExited = function handleExited(child, node) {
    var currentChildMapping = getChildMapping(this.props.children);
    if (child.key in currentChildMapping) return;

    if (child.props.onExited) {
      child.props.onExited(node);
    }

    if (this.mounted) {
      this.setState(function (state) {
        var children = _extends$6({}, state.children);

        delete children[child.key];
        return {
          children: children
        };
      });
    }
  };

  _proto.render = function render() {
    var _this$props = this.props,
        Component = _this$props.component,
        childFactory = _this$props.childFactory,
        props = _objectWithoutPropertiesLoose$5(_this$props, ["component", "childFactory"]);

    var contextValue = this.state.contextValue;
    var children = values$1(this.state.children).map(childFactory);
    delete props.appear;
    delete props.enter;
    delete props.exit;

    if (Component === null) {
      return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {
        value: contextValue
      }, children);
    }

    return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {
      value: contextValue
    }, /*#__PURE__*/React.createElement(Component, props, children));
  };

  return TransitionGroup;
}(React.Component);

TransitionGroup.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * `<TransitionGroup>` renders a `<div>` by default. You can change this
   * behavior by providing a `component` prop.
   * If you use React v16+ and would like to avoid a wrapping `<div>` element
   * you can pass in `component={null}`. This is useful if the wrapping div
   * borks your css styles.
   */
  component: propTypes.any,

  /**
   * A set of `<Transition>` components, that are toggled `in` and out as they
   * leave. the `<TransitionGroup>` will inject specific transition props, so
   * remember to spread them through if you are wrapping the `<Transition>` as
   * with our `<Fade>` example.
   *
   * While this component is meant for multiple `Transition` or `CSSTransition`
   * children, sometimes you may want to have a single transition child with
   * content that you want to be transitioned out and in when you change it
   * (e.g. routes, images etc.) In that case you can change the `key` prop of
   * the transition child as you change its content, this will cause
   * `TransitionGroup` to transition the child out and back in.
   */
  children: propTypes.node,

  /**
   * A convenience prop that enables or disables appear animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  appear: propTypes.bool,

  /**
   * A convenience prop that enables or disables enter animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  enter: propTypes.bool,

  /**
   * A convenience prop that enables or disables exit animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  exit: propTypes.bool,

  /**
   * You may need to apply reactive updates to a child as it is exiting.
   * This is generally done by using `cloneElement` however in the case of an exiting
   * child the element has already been removed and not accessible to the consumer.
   *
   * If you do need to update a child as it leaves you can provide a `childFactory`
   * to wrap every child, even the ones that are leaving.
   *
   * @type Function(child: ReactElement) -> ReactElement
   */
  childFactory: propTypes.func
} : {};
TransitionGroup.defaultProps = defaultProps;

var useEnhancedEffect$1 = typeof window === 'undefined' ? useEffect : useLayoutEffect;
/**
 * @ignore - internal component.
 */

function Ripple(props) {
  var classes = props.classes,
      _props$pulsate = props.pulsate,
      pulsate = _props$pulsate === void 0 ? false : _props$pulsate,
      rippleX = props.rippleX,
      rippleY = props.rippleY,
      rippleSize = props.rippleSize,
      inProp = props.in,
      _props$onExited = props.onExited,
      onExited = _props$onExited === void 0 ? function () {} : _props$onExited,
      timeout = props.timeout;

  var _React$useState = useState(false),
      leaving = _React$useState[0],
      setLeaving = _React$useState[1];

  var rippleClassName = clsx(classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
  var rippleStyles = {
    width: rippleSize,
    height: rippleSize,
    top: -(rippleSize / 2) + rippleY,
    left: -(rippleSize / 2) + rippleX
  };
  var childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
  var handleExited = useEventCallback(onExited); // Ripple is used for user feedback (e.g. click or press) so we want to apply styles with the highest priority

  useEnhancedEffect$1(function () {
    if (!inProp) {
      // react-transition-group#onExit
      setLeaving(true); // react-transition-group#onExited

      var timeoutId = setTimeout(handleExited, timeout);
      return function () {
        clearTimeout(timeoutId);
      };
    }

    return undefined;
  }, [handleExited, inProp, timeout]);
  return /*#__PURE__*/createElement("span", {
    className: rippleClassName,
    style: rippleStyles
  }, /*#__PURE__*/createElement("span", {
    className: childClassName
  }));
}

process.env.NODE_ENV !== "production" ? Ripple.propTypes = {
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: propTypes.object.isRequired,

  /**
   * @ignore - injected from TransitionGroup
   */
  in: propTypes.bool,

  /**
   * @ignore - injected from TransitionGroup
   */
  onExited: propTypes.func,

  /**
   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
   */
  pulsate: propTypes.bool,

  /**
   * Diameter of the ripple.
   */
  rippleSize: propTypes.number,

  /**
   * Horizontal position of the ripple center.
   */
  rippleX: propTypes.number,

  /**
   * Vertical position of the ripple center.
   */
  rippleY: propTypes.number,

  /**
   * exit delay
   */
  timeout: propTypes.number.isRequired
} : void 0;

var DURATION = 550;
var DELAY_RIPPLE = 80;
var styles$1 = function styles(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      overflow: 'hidden',
      pointerEvents: 'none',
      position: 'absolute',
      zIndex: 0,
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      borderRadius: 'inherit'
    },

    /* Styles applied to the internal `Ripple` components `ripple` class. */
    ripple: {
      opacity: 0,
      position: 'absolute'
    },

    /* Styles applied to the internal `Ripple` components `rippleVisible` class. */
    rippleVisible: {
      opacity: 0.3,
      transform: 'scale(1)',
      animation: "$enter ".concat(DURATION, "ms ").concat(theme.transitions.easing.easeInOut)
    },

    /* Styles applied to the internal `Ripple` components `ripplePulsate` class. */
    ripplePulsate: {
      animationDuration: "".concat(theme.transitions.duration.shorter, "ms")
    },

    /* Styles applied to the internal `Ripple` components `child` class. */
    child: {
      opacity: 1,
      display: 'block',
      width: '100%',
      height: '100%',
      borderRadius: '50%',
      backgroundColor: 'currentColor'
    },

    /* Styles applied to the internal `Ripple` components `childLeaving` class. */
    childLeaving: {
      opacity: 0,
      animation: "$exit ".concat(DURATION, "ms ").concat(theme.transitions.easing.easeInOut)
    },

    /* Styles applied to the internal `Ripple` components `childPulsate` class. */
    childPulsate: {
      position: 'absolute',
      left: 0,
      top: 0,
      animation: "$pulsate 2500ms ".concat(theme.transitions.easing.easeInOut, " 200ms infinite")
    },
    '@keyframes enter': {
      '0%': {
        transform: 'scale(0)',
        opacity: 0.1
      },
      '100%': {
        transform: 'scale(1)',
        opacity: 0.3
      }
    },
    '@keyframes exit': {
      '0%': {
        opacity: 1
      },
      '100%': {
        opacity: 0
      }
    },
    '@keyframes pulsate': {
      '0%': {
        transform: 'scale(1)'
      },
      '50%': {
        transform: 'scale(0.92)'
      },
      '100%': {
        transform: 'scale(1)'
      }
    }
  };
};
/**
 * @ignore - internal component.
 *
 * TODO v5: Make private
 */

var TouchRipple = /*#__PURE__*/forwardRef(function TouchRipple(props, ref) {
  var _props$center = props.center,
      centerProp = _props$center === void 0 ? false : _props$center,
      classes = props.classes,
      className = props.className,
      other = _objectWithoutProperties$1(props, ["center", "classes", "className"]);

  var _React$useState = useState([]),
      ripples = _React$useState[0],
      setRipples = _React$useState[1];

  var nextKey = useRef(0);
  var rippleCallback = useRef(null);
  useEffect(function () {
    if (rippleCallback.current) {
      rippleCallback.current();
      rippleCallback.current = null;
    }
  }, [ripples]); // Used to filter out mouse emulated events on mobile.

  var ignoringMouseDown = useRef(false); // We use a timer in order to only show the ripples for touch "click" like events.
  // We don't want to display the ripple for touch scroll events.

  var startTimer = useRef(null); // This is the hook called once the previous timeout is ready.

  var startTimerCommit = useRef(null);
  var container = useRef(null);
  useEffect(function () {
    return function () {
      clearTimeout(startTimer.current);
    };
  }, []);
  var startCommit = useCallback(function (params) {
    var pulsate = params.pulsate,
        rippleX = params.rippleX,
        rippleY = params.rippleY,
        rippleSize = params.rippleSize,
        cb = params.cb;
    setRipples(function (oldRipples) {
      return [].concat(_toConsumableArray$2(oldRipples), [/*#__PURE__*/createElement(Ripple, {
        key: nextKey.current,
        classes: classes,
        timeout: DURATION,
        pulsate: pulsate,
        rippleX: rippleX,
        rippleY: rippleY,
        rippleSize: rippleSize
      })]);
    });
    nextKey.current += 1;
    rippleCallback.current = cb;
  }, [classes]);
  var start = useCallback(function () {
    var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var cb = arguments.length > 2 ? arguments[2] : undefined;
    var _options$pulsate = options.pulsate,
        pulsate = _options$pulsate === void 0 ? false : _options$pulsate,
        _options$center = options.center,
        center = _options$center === void 0 ? centerProp || options.pulsate : _options$center,
        _options$fakeElement = options.fakeElement,
        fakeElement = _options$fakeElement === void 0 ? false : _options$fakeElement;

    if (event.type === 'mousedown' && ignoringMouseDown.current) {
      ignoringMouseDown.current = false;
      return;
    }

    if (event.type === 'touchstart') {
      ignoringMouseDown.current = true;
    }

    var element = fakeElement ? null : container.current;
    var rect = element ? element.getBoundingClientRect() : {
      width: 0,
      height: 0,
      left: 0,
      top: 0
    }; // Get the size of the ripple

    var rippleX;
    var rippleY;
    var rippleSize;

    if (center || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
      rippleX = Math.round(rect.width / 2);
      rippleY = Math.round(rect.height / 2);
    } else {
      var _ref = event.touches ? event.touches[0] : event,
          clientX = _ref.clientX,
          clientY = _ref.clientY;

      rippleX = Math.round(clientX - rect.left);
      rippleY = Math.round(clientY - rect.top);
    }

    if (center) {
      rippleSize = Math.sqrt((2 * Math.pow(rect.width, 2) + Math.pow(rect.height, 2)) / 3); // For some reason the animation is broken on Mobile Chrome if the size if even.

      if (rippleSize % 2 === 0) {
        rippleSize += 1;
      }
    } else {
      var sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
      var sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
      rippleSize = Math.sqrt(Math.pow(sizeX, 2) + Math.pow(sizeY, 2));
    } // Touche devices


    if (event.touches) {
      // check that this isn't another touchstart due to multitouch
      // otherwise we will only clear a single timer when unmounting while two
      // are running
      if (startTimerCommit.current === null) {
        // Prepare the ripple effect.
        startTimerCommit.current = function () {
          startCommit({
            pulsate: pulsate,
            rippleX: rippleX,
            rippleY: rippleY,
            rippleSize: rippleSize,
            cb: cb
          });
        }; // Delay the execution of the ripple effect.


        startTimer.current = setTimeout(function () {
          if (startTimerCommit.current) {
            startTimerCommit.current();
            startTimerCommit.current = null;
          }
        }, DELAY_RIPPLE); // We have to make a tradeoff with this value.
      }
    } else {
      startCommit({
        pulsate: pulsate,
        rippleX: rippleX,
        rippleY: rippleY,
        rippleSize: rippleSize,
        cb: cb
      });
    }
  }, [centerProp, startCommit]);
  var pulsate = useCallback(function () {
    start({}, {
      pulsate: true
    });
  }, [start]);
  var stop = useCallback(function (event, cb) {
    clearTimeout(startTimer.current); // The touch interaction occurs too quickly.
    // We still want to show ripple effect.

    if (event.type === 'touchend' && startTimerCommit.current) {
      event.persist();
      startTimerCommit.current();
      startTimerCommit.current = null;
      startTimer.current = setTimeout(function () {
        stop(event, cb);
      });
      return;
    }

    startTimerCommit.current = null;
    setRipples(function (oldRipples) {
      if (oldRipples.length > 0) {
        return oldRipples.slice(1);
      }

      return oldRipples;
    });
    rippleCallback.current = cb;
  }, []);
  useImperativeHandle(ref, function () {
    return {
      pulsate: pulsate,
      start: start,
      stop: stop
    };
  }, [pulsate, start, stop]);
  return /*#__PURE__*/createElement("span", _extends$1({
    className: clsx(classes.root, className),
    ref: container
  }, other), /*#__PURE__*/createElement(TransitionGroup, {
    component: null,
    exit: true
  }, ripples));
});
process.env.NODE_ENV !== "production" ? TouchRipple.propTypes = {
  /**
   * If `true`, the ripple starts at the center of the component
   * rather than at the point of interaction.
   */
  center: propTypes.bool,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: propTypes.object.isRequired,

  /**
   * @ignore
   */
  className: propTypes.string
} : void 0;
var TouchRipple$1 = withStyles$1(styles$1, {
  flip: false,
  name: 'MuiTouchRipple'
})( /*#__PURE__*/memo(TouchRipple));

var styles$2 = {
  /* Styles applied to the root element. */
  root: {
    display: 'inline-flex',
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative',
    WebkitTapHighlightColor: 'transparent',
    backgroundColor: 'transparent',
    // Reset default value
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    border: 0,
    margin: 0,
    // Remove the margin in Safari
    borderRadius: 0,
    padding: 0,
    // Remove the padding in Firefox
    cursor: 'pointer',
    userSelect: 'none',
    verticalAlign: 'middle',
    '-moz-appearance': 'none',
    // Reset
    '-webkit-appearance': 'none',
    // Reset
    textDecoration: 'none',
    // So we take precedent over the style of a native <a /> element.
    color: 'inherit',
    '&::-moz-focus-inner': {
      borderStyle: 'none' // Remove Firefox dotted outline.

    },
    '&$disabled': {
      pointerEvents: 'none',
      // Disable link interactions
      cursor: 'default'
    },
    '@media print': {
      colorAdjust: 'exact'
    }
  },

  /* Pseudo-class applied to the root element if `disabled={true}`. */
  disabled: {},

  /* Pseudo-class applied to the root element if keyboard focused. */
  focusVisible: {}
};
/**
 * `ButtonBase` contains as few styles as possible.
 * It aims to be a simple building block for creating a button.
 * It contains a load of style reset and some focus/ripple logic.
 */

var ButtonBase = /*#__PURE__*/forwardRef(function ButtonBase(props, ref) {
  var action = props.action,
      buttonRefProp = props.buttonRef,
      _props$centerRipple = props.centerRipple,
      centerRipple = _props$centerRipple === void 0 ? false : _props$centerRipple,
      children = props.children,
      classes = props.classes,
      className = props.className,
      _props$component = props.component,
      component = _props$component === void 0 ? 'button' : _props$component,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$disableRipple = props.disableRipple,
      disableRipple = _props$disableRipple === void 0 ? false : _props$disableRipple,
      _props$disableTouchRi = props.disableTouchRipple,
      disableTouchRipple = _props$disableTouchRi === void 0 ? false : _props$disableTouchRi,
      _props$focusRipple = props.focusRipple,
      focusRipple = _props$focusRipple === void 0 ? false : _props$focusRipple,
      focusVisibleClassName = props.focusVisibleClassName,
      onBlur = props.onBlur,
      onClick = props.onClick,
      onFocus = props.onFocus,
      onFocusVisible = props.onFocusVisible,
      onKeyDown = props.onKeyDown,
      onKeyUp = props.onKeyUp,
      onMouseDown = props.onMouseDown,
      onMouseLeave = props.onMouseLeave,
      onMouseUp = props.onMouseUp,
      onTouchEnd = props.onTouchEnd,
      onTouchMove = props.onTouchMove,
      onTouchStart = props.onTouchStart,
      onDragLeave = props.onDragLeave,
      _props$tabIndex = props.tabIndex,
      tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,
      TouchRippleProps = props.TouchRippleProps,
      _props$type = props.type,
      type = _props$type === void 0 ? 'button' : _props$type,
      other = _objectWithoutProperties$1(props, ["action", "buttonRef", "centerRipple", "children", "classes", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "onBlur", "onClick", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "onDragLeave", "tabIndex", "TouchRippleProps", "type"]);

  var buttonRef = useRef(null);

  function getButtonNode() {
    // #StrictMode ready
    return findDOMNode(buttonRef.current);
  }

  var rippleRef = useRef(null);

  var _React$useState = useState(false),
      focusVisible = _React$useState[0],
      setFocusVisible = _React$useState[1];

  if (disabled && focusVisible) {
    setFocusVisible(false);
  }

  var _useIsFocusVisible = useIsFocusVisible(),
      isFocusVisible = _useIsFocusVisible.isFocusVisible,
      onBlurVisible = _useIsFocusVisible.onBlurVisible,
      focusVisibleRef = _useIsFocusVisible.ref;

  useImperativeHandle(action, function () {
    return {
      focusVisible: function focusVisible() {
        setFocusVisible(true);
        buttonRef.current.focus();
      }
    };
  }, []);
  useEffect(function () {
    if (focusVisible && focusRipple && !disableRipple) {
      rippleRef.current.pulsate();
    }
  }, [disableRipple, focusRipple, focusVisible]);

  function useRippleHandler(rippleAction, eventCallback) {
    var skipRippleAction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : disableTouchRipple;
    return useEventCallback(function (event) {
      if (eventCallback) {
        eventCallback(event);
      }

      var ignore = skipRippleAction;

      if (!ignore && rippleRef.current) {
        rippleRef.current[rippleAction](event);
      }

      return true;
    });
  }

  var handleMouseDown = useRippleHandler('start', onMouseDown);
  var handleDragLeave = useRippleHandler('stop', onDragLeave);
  var handleMouseUp = useRippleHandler('stop', onMouseUp);
  var handleMouseLeave = useRippleHandler('stop', function (event) {
    if (focusVisible) {
      event.preventDefault();
    }

    if (onMouseLeave) {
      onMouseLeave(event);
    }
  });
  var handleTouchStart = useRippleHandler('start', onTouchStart);
  var handleTouchEnd = useRippleHandler('stop', onTouchEnd);
  var handleTouchMove = useRippleHandler('stop', onTouchMove);
  var handleBlur = useRippleHandler('stop', function (event) {
    if (focusVisible) {
      onBlurVisible(event);
      setFocusVisible(false);
    }

    if (onBlur) {
      onBlur(event);
    }
  }, false);
  var handleFocus = useEventCallback(function (event) {
    // Fix for https://github.com/facebook/react/issues/7769
    if (!buttonRef.current) {
      buttonRef.current = event.currentTarget;
    }

    if (isFocusVisible(event)) {
      setFocusVisible(true);

      if (onFocusVisible) {
        onFocusVisible(event);
      }
    }

    if (onFocus) {
      onFocus(event);
    }
  });

  var isNonNativeButton = function isNonNativeButton() {
    var button = getButtonNode();
    return component && component !== 'button' && !(button.tagName === 'A' && button.href);
  };
  /**
   * IE 11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat
   */


  var keydownRef = useRef(false);
  var handleKeyDown = useEventCallback(function (event) {
    // Check if key is already down to avoid repeats being counted as multiple activations
    if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {
      keydownRef.current = true;
      event.persist();
      rippleRef.current.stop(event, function () {
        rippleRef.current.start(event);
      });
    }

    if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') {
      event.preventDefault();
    }

    if (onKeyDown) {
      onKeyDown(event);
    } // Keyboard accessibility for non interactive elements


    if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
      event.preventDefault();

      if (onClick) {
        onClick(event);
      }
    }
  });
  var handleKeyUp = useEventCallback(function (event) {
    // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
    // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
    if (focusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {
      keydownRef.current = false;
      event.persist();
      rippleRef.current.stop(event, function () {
        rippleRef.current.pulsate(event);
      });
    }

    if (onKeyUp) {
      onKeyUp(event);
    } // Keyboard accessibility for non interactive elements


    if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) {
      onClick(event);
    }
  });
  var ComponentProp = component;

  if (ComponentProp === 'button' && other.href) {
    ComponentProp = 'a';
  }

  var buttonProps = {};

  if (ComponentProp === 'button') {
    buttonProps.type = type;
    buttonProps.disabled = disabled;
  } else {
    if (ComponentProp !== 'a' || !other.href) {
      buttonProps.role = 'button';
    }

    buttonProps['aria-disabled'] = disabled;
  }

  var handleUserRef = useForkRef(buttonRefProp, ref);
  var handleOwnRef = useForkRef(focusVisibleRef, buttonRef);
  var handleRef = useForkRef(handleUserRef, handleOwnRef);

  var _React$useState2 = useState(false),
      mountedState = _React$useState2[0],
      setMountedState = _React$useState2[1];

  useEffect(function () {
    setMountedState(true);
  }, []);
  var enableTouchRipple = mountedState && !disableRipple && !disabled;

  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useEffect(function () {
      if (enableTouchRipple && !rippleRef.current) {
        console.error(['Material-UI: The `component` prop provided to ButtonBase is invalid.', 'Please make sure the children prop is rendered in this custom component.'].join('\n'));
      }
    }, [enableTouchRipple]);
  }

  return /*#__PURE__*/createElement(ComponentProp, _extends$1({
    className: clsx(classes.root, className, focusVisible && [classes.focusVisible, focusVisibleClassName], disabled && classes.disabled),
    onBlur: handleBlur,
    onClick: onClick,
    onFocus: handleFocus,
    onKeyDown: handleKeyDown,
    onKeyUp: handleKeyUp,
    onMouseDown: handleMouseDown,
    onMouseLeave: handleMouseLeave,
    onMouseUp: handleMouseUp,
    onDragLeave: handleDragLeave,
    onTouchEnd: handleTouchEnd,
    onTouchMove: handleTouchMove,
    onTouchStart: handleTouchStart,
    ref: handleRef,
    tabIndex: disabled ? -1 : tabIndex
  }, buttonProps, other), children, enableTouchRipple ?
  /*#__PURE__*/

  /* TouchRipple is only needed client-side, x2 boost on the server. */
  createElement(TouchRipple$1, _extends$1({
    ref: rippleRef,
    center: centerRipple
  }, TouchRippleProps)) : null);
});
process.env.NODE_ENV !== "production" ? ButtonBase.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * A ref for imperative actions.
   * It currently only supports `focusVisible()` action.
   */
  action: utils.refType,

  /**
   * @ignore
   *
   * Use that prop to pass a ref to the native button component.
   * @deprecated Use `ref` instead.
   */
  buttonRef: utils.refType,

  /**
   * If `true`, the ripples will be centered.
   * They won't start at the cursor interaction position.
   */
  centerRipple: propTypes.bool,

  /**
   * The content of the component.
   */
  children: propTypes.node,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: propTypes.object,

  /**
   * @ignore
   */
  className: propTypes.string,

  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: utils.elementTypeAcceptingRef,

  /**
   * If `true`, the base button will be disabled.
   */
  disabled: propTypes.bool,

  /**
   * If `true`, the ripple effect will be disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `focusVisibleClassName`.
   */
  disableRipple: propTypes.bool,

  /**
   * If `true`, the touch ripple effect will be disabled.
   */
  disableTouchRipple: propTypes.bool,

  /**
   * If `true`, the base button will have a keyboard focus ripple.
   */
  focusRipple: propTypes.bool,

  /**
   * This prop can help a person know which element has the keyboard focus.
   * The class name will be applied when the element gain the focus through a keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */
  focusVisibleClassName: propTypes.string,

  /**
   * @ignore
   */
  href: propTypes.string,

  /**
   * @ignore
   */
  onBlur: propTypes.func,

  /**
   * @ignore
   */
  onClick: propTypes.func,

  /**
   * @ignore
   */
  onDragLeave: propTypes.func,

  /**
   * @ignore
   */
  onFocus: propTypes.func,

  /**
   * Callback fired when the component is focused with a keyboard.
   * We trigger a `onFocus` callback too.
   */
  onFocusVisible: propTypes.func,

  /**
   * @ignore
   */
  onKeyDown: propTypes.func,

  /**
   * @ignore
   */
  onKeyUp: propTypes.func,

  /**
   * @ignore
   */
  onMouseDown: propTypes.func,

  /**
   * @ignore
   */
  onMouseLeave: propTypes.func,

  /**
   * @ignore
   */
  onMouseUp: propTypes.func,

  /**
   * @ignore
   */
  onTouchEnd: propTypes.func,

  /**
   * @ignore
   */
  onTouchMove: propTypes.func,

  /**
   * @ignore
   */
  onTouchStart: propTypes.func,

  /**
   * @ignore
   */
  tabIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),

  /**
   * Props applied to the `TouchRipple` element.
   */
  TouchRippleProps: propTypes.object,

  /**
   * @ignore
   */
  type: propTypes.oneOfType([propTypes.oneOf(['button', 'reset', 'submit']), propTypes.string])
} : void 0;
var ButtonBase$1 = withStyles$1(styles$2, {
  name: 'MuiButtonBase'
})(ButtonBase);

/**
 * @ignore - internal component.
 */

var FirstPageIcon = createSvgIcon( /*#__PURE__*/createElement("path", {
  d: "M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"
}), 'FirstPage');

/**
 * @ignore - internal component.
 */

var LastPageIcon = createSvgIcon( /*#__PURE__*/createElement("path", {
  d: "M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"
}), 'LastPage');

/**
 * @ignore - internal component.
 */

var NavigateBeforeIcon = createSvgIcon( /*#__PURE__*/createElement("path", {
  d: "M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
}), 'NavigateBefore');

/**
 * @ignore - internal component.
 */

var NavigateNextIcon = createSvgIcon( /*#__PURE__*/createElement("path", {
  d: "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
}), 'NavigateNext');

var styles$3 = function styles(theme) {
  return {
    /* Styles applied to the root element. */
    root: _extends({}, theme.typography.body2, {
      borderRadius: 32 / 2,
      textAlign: 'center',
      boxSizing: 'border-box',
      minWidth: 32,
      height: 32,
      padding: '0 6px',
      margin: '0 3px',
      color: theme.palette.text.primary
    }),

    /* Styles applied to the root element if `type="page"`. */
    page: {
      transition: theme.transitions.create(['color', 'background-color'], {
        duration: theme.transitions.duration.short
      }),
      '&:hover': {
        backgroundColor: theme.palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      },
      '&$focusVisible': {
        backgroundColor: theme.palette.action.focus
      },
      '&$selected': {
        backgroundColor: theme.palette.action.selected,
        '&:hover, &$focusVisible': {
          backgroundColor: fade(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: theme.palette.action.selected
          }
        },
        '&$disabled': {
          opacity: 1,
          color: theme.palette.action.disabled,
          backgroundColor: theme.palette.action.selected
        }
      },
      '&$disabled': {
        opacity: theme.palette.action.disabledOpacity
      }
    },

    /* Styles applied applied to the root element if `size="small"`. */
    sizeSmall: {
      minWidth: 26,
      height: 26,
      borderRadius: 26 / 2,
      margin: '0 1px',
      padding: '0 4px',
      '& $icon': {
        fontSize: theme.typography.pxToRem(18)
      }
    },

    /* Styles applied applied to the root element if `size="large"`. */
    sizeLarge: {
      minWidth: 40,
      height: 40,
      borderRadius: 40 / 2,
      padding: '0 10px',
      fontSize: theme.typography.pxToRem(15),
      '& $icon': {
        fontSize: theme.typography.pxToRem(22)
      }
    },

    /* Styles applied to the root element if `variant="text"` and `color="primary"`. */
    textPrimary: {
      '&$selected': {
        color: theme.palette.primary.contrastText,
        backgroundColor: theme.palette.primary.main,
        '&:hover, &$focusVisible': {
          backgroundColor: theme.palette.primary.dark,
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: theme.palette.primary.main
          }
        },
        '&$disabled': {
          color: theme.palette.action.disabled
        }
      }
    },

    /* Styles applied to the root element if `variant="text"` and `color="secondary"`. */
    textSecondary: {
      '&$selected': {
        color: theme.palette.secondary.contrastText,
        backgroundColor: theme.palette.secondary.main,
        '&:hover, &$focusVisible': {
          backgroundColor: theme.palette.secondary.dark,
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: theme.palette.secondary.main
          }
        },
        '&$disabled': {
          color: theme.palette.action.disabled
        }
      }
    },

    /* Styles applied to the root element if `outlined="true"`. */
    outlined: {
      border: "1px solid ".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'),
      '&$selected': {
        '&$disabled': {
          border: "1px solid ".concat(theme.palette.action.disabledBackground)
        }
      }
    },

    /* Styles applied to the root element if `variant="outlined"` and `color="primary"`. */
    outlinedPrimary: {
      '&$selected': {
        color: theme.palette.primary.main,
        border: "1px solid ".concat(fade(theme.palette.primary.main, 0.5)),
        backgroundColor: fade(theme.palette.primary.main, theme.palette.action.activatedOpacity),
        '&:hover, &$focusVisible': {
          backgroundColor: fade(theme.palette.primary.main, theme.palette.action.activatedOpacity + theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: 'transparent'
          }
        },
        '&$disabled': {
          color: theme.palette.action.disabled
        }
      }
    },

    /* Styles applied to the root element if `variant="outlined"` and `color="secondary"`. */
    outlinedSecondary: {
      '&$selected': {
        color: theme.palette.secondary.main,
        border: "1px solid ".concat(fade(theme.palette.secondary.main, 0.5)),
        backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.activatedOpacity),
        '&:hover, &$focusVisible': {
          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.activatedOpacity + theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: 'transparent'
          }
        },
        '&$disabled': {
          color: theme.palette.action.disabled
        }
      }
    },

    /* Styles applied to the root element if `rounded="true"`. */
    rounded: {
      borderRadius: theme.shape.borderRadius
    },

    /* Styles applied to the root element if `type="start-ellipsis"` or `type="end-ellipsis"`. */
    ellipsis: {
      height: 'auto',
      '&$disabled': {
        opacity: theme.palette.action.disabledOpacity
      }
    },

    /* Pseudo-class applied to the root element if keyboard focused. */
    focusVisible: {},

    /* Pseudo-class applied to the root element if `disabled={true}`. */
    disabled: {},

    /* Pseudo-class applied to the root element if `selected={true}`. */
    selected: {},

    /* Styles applied to the icon element. */
    icon: {
      fontSize: theme.typography.pxToRem(20),
      margin: '0 -8px'
    }
  };
};
var PaginationItem = /*#__PURE__*/forwardRef(function PaginationItem(props, ref) {
  var classes = props.classes,
      className = props.className,
      _props$color = props.color,
      color = _props$color === void 0 ? 'standard' : _props$color,
      component = props.component,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      page = props.page,
      _props$selected = props.selected,
      selected = _props$selected === void 0 ? false : _props$selected,
      _props$shape = props.shape,
      shape = _props$shape === void 0 ? 'round' : _props$shape,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      _props$type = props.type,
      type = _props$type === void 0 ? 'page' : _props$type,
      _props$variant = props.variant,
      variant = _props$variant === void 0 ? 'text' : _props$variant,
      other = _objectWithoutProperties(props, ["classes", "className", "color", "component", "disabled", "page", "selected", "shape", "size", "type", "variant"]);

  var theme = useTheme$1();
  var normalizedIcons = theme.direction === 'rtl' ? {
    previous: NavigateNextIcon,
    next: NavigateBeforeIcon,
    last: FirstPageIcon,
    first: LastPageIcon
  } : {
    previous: NavigateBeforeIcon,
    next: NavigateNextIcon,
    first: FirstPageIcon,
    last: LastPageIcon
  };
  var Icon = normalizedIcons[type];
  return type === 'start-ellipsis' || type === 'end-ellipsis' ? /*#__PURE__*/createElement("div", {
    ref: ref,
    className: clsx(classes.root, classes.ellipsis, disabled && classes.disabled, size !== 'medium' && classes["size".concat(capitalize(size))])
  }, "\u2026") : /*#__PURE__*/createElement(ButtonBase$1, _extends({
    ref: ref,
    component: component,
    disabled: disabled,
    focusVisibleClassName: classes.focusVisible,
    className: clsx(classes.root, classes.page, classes[variant], classes[shape], className, color !== 'standard' && classes["".concat(variant).concat(capitalize(color))], disabled && classes.disabled, selected && classes.selected, size !== 'medium' && classes["size".concat(capitalize(size))])
  }, other), type === 'page' && page, Icon ? /*#__PURE__*/createElement(Icon, {
    className: classes.icon
  }) : null);
});
process.env.NODE_ENV !== "production" ? PaginationItem.propTypes = {
  /**
   * @ignore
   */
  classes: propTypes.object.isRequired,

  /**
   * @ignore
   */
  className: propTypes.string,

  /**
   * The active color.
   */
  color: propTypes.oneOf(['standard', 'primary', 'secondary']),

  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: propTypes
  /* @typescript-to-proptypes-ignore */
  .elementType,

  /**
   * If `true`, the item will be disabled.
   */
  disabled: propTypes.bool,

  /**
   * The current page number.
   */
  page: propTypes.number,

  /**
   * If `true` the pagination item is selected.
   */
  selected: propTypes.bool,

  /**
   * The shape of the pagination item.
   */
  shape: propTypes.oneOf(['round', 'rounded']),

  /**
   * The size of the pagination item.
   */
  size: propTypes.oneOf(['small', 'medium', 'large']),

  /**
   * The type of pagination item.
   */
  type: propTypes.oneOf(['page', 'first', 'last', 'next', 'previous', 'start-ellipsis', 'end-ellipsis']),

  /**
   * The pagination item variant.
   */
  variant: propTypes.oneOf(['text', 'outlined'])
} : void 0;
var PaginationItem$1 = withStyles$1(styles$3, {
  name: 'MuiPaginationItem'
})(PaginationItem);

var styles$4 = {
  /* Styles applied to the root element. */
  root: {},

  /* Styles applied to the ul element. */
  ul: {
    display: 'flex',
    flexWrap: 'wrap',
    alignItems: 'center',
    padding: 0,
    margin: 0,
    listStyle: 'none'
  }
};

function defaultGetAriaLabel(type, page, selected) {
  if (type === 'page') {
    return "".concat(selected ? '' : 'Go to ', "page ").concat(page);
  }

  return "Go to ".concat(type, " page");
}

var Pagination = /*#__PURE__*/forwardRef(function Pagination(props, ref) {
  var boundaryCount = props.boundaryCount,
      classes = props.classes,
      className = props.className,
      _props$color = props.color,
      color = _props$color === void 0 ? 'standard' : _props$color,
      count = props.count,
      defaultPage = props.defaultPage,
      disabled = props.disabled,
      _props$getItemAriaLab = props.getItemAriaLabel,
      getItemAriaLabel = _props$getItemAriaLab === void 0 ? defaultGetAriaLabel : _props$getItemAriaLab,
      hideNextButton = props.hideNextButton,
      hidePrevButton = props.hidePrevButton,
      onChange = props.onChange,
      page = props.page,
      _props$renderItem = props.renderItem,
      renderItem = _props$renderItem === void 0 ? function (item) {
    return /*#__PURE__*/createElement(PaginationItem$1, item);
  } : _props$renderItem,
      _props$shape = props.shape,
      shape = _props$shape === void 0 ? 'round' : _props$shape,
      showFirstButton = props.showFirstButton,
      showLastButton = props.showLastButton,
      siblingCount = props.siblingCount,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      _props$variant = props.variant,
      variant = _props$variant === void 0 ? 'text' : _props$variant,
      other = _objectWithoutProperties(props, ["boundaryCount", "classes", "className", "color", "count", "defaultPage", "disabled", "getItemAriaLabel", "hideNextButton", "hidePrevButton", "onChange", "page", "renderItem", "shape", "showFirstButton", "showLastButton", "siblingCount", "size", "variant"]);

  var _usePagination = usePagination(_extends({}, props, {
    componentName: 'Pagination'
  })),
      items = _usePagination.items;

  return /*#__PURE__*/createElement("nav", _extends({
    "aria-label": "pagination navigation",
    className: clsx(classes.root, className),
    ref: ref
  }, other), /*#__PURE__*/createElement("ul", {
    className: classes.ul
  }, items.map(function (item, index) {
    return /*#__PURE__*/createElement("li", {
      key: index
    }, renderItem(_extends({}, item, {
      color: color,
      'aria-label': getItemAriaLabel(item.type, item.page, item.selected),
      shape: shape,
      size: size,
      variant: variant
    })));
  })));
}); // @default tags synced with default values from usePagination

process.env.NODE_ENV !== "production" ? Pagination.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * Number of always visible pages at the beginning and end.
   * @default 1
   */
  boundaryCount: propTypes.number,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: propTypes.object,

  /**
   * @ignore
   */
  className: propTypes.string,

  /**
   * The active color.
   */
  color: propTypes.oneOf(['primary', 'secondary', 'standard']),

  /**
   * The total number of pages.
   * @default 1
   */
  count: propTypes.number,

  /**
   * The page selected by default when the component is uncontrolled.
   * @default 1
   */
  defaultPage: propTypes.number,

  /**
   * If `true`, the pagination component will be disabled.
   * @default false
   */
  disabled: propTypes.bool,

  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current page.
   *
   * For localization purposes, you can use the provided [translations](/guides/localization/).
   *
   * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous'). Defaults to 'page'.
   * @param {number} page The page number to format.
   * @param {bool} selected If true, the current page is selected.
   * @returns {string}
   */
  getItemAriaLabel: propTypes.func,

  /**
   * If `true`, hide the next-page button.
   * @default false
   */
  hideNextButton: propTypes.bool,

  /**
   * If `true`, hide the previous-page button.
   * @default false
   */
  hidePrevButton: propTypes.bool,

  /**
   * Callback fired when the page is changed.
   *
   * @param {object} event The event source of the callback.
   * @param {number} page The page selected.
   */
  onChange: propTypes.func,

  /**
   * The current page.
   */
  page: propTypes.number,

  /**
   * Render the item.
   *
   * @param {PaginationRenderItemParams} params The props to spread on a PaginationItem.
   * @returns {ReactNode}
   */
  renderItem: propTypes.func,

  /**
   * The shape of the pagination items.
   */
  shape: propTypes.oneOf(['round', 'rounded']),

  /**
   * If `true`, show the first-page button.
   * @default false
   */
  showFirstButton: propTypes.bool,

  /**
   * If `true`, show the last-page button.
   * @default false
   */
  showLastButton: propTypes.bool,

  /**
   * Number of always visible pages before and after the current page.
   * @default 1
   */
  siblingCount: propTypes.number,

  /**
   * The size of the pagination component.
   */
  size: propTypes.oneOf(['large', 'medium', 'small']),

  /**
   * The variant to use.
   */
  variant: propTypes.oneOf(['outlined', 'text'])
} : void 0;
var Pagination$1 = withStyles$1(styles$4, {
  name: 'MuiPagination'
})(Pagination);

/**
 * @ignore - internal component.
 */

var NativeSelectInput = /*#__PURE__*/forwardRef(function NativeSelectInput(props, ref) {
  var classes = props.classes,
      className = props.className,
      disabled = props.disabled,
      IconComponent = props.IconComponent,
      inputRef = props.inputRef,
      _props$variant = props.variant,
      variant = _props$variant === void 0 ? 'standard' : _props$variant,
      other = _objectWithoutProperties$1(props, ["classes", "className", "disabled", "IconComponent", "inputRef", "variant"]);

  return /*#__PURE__*/createElement(Fragment$2, null, /*#__PURE__*/createElement("select", _extends$1({
    className: clsx(classes.root, // TODO v5: merge root and select
    classes.select, classes[variant], className, disabled && classes.disabled),
    disabled: disabled,
    ref: inputRef || ref
  }, other)), props.multiple ? null : /*#__PURE__*/createElement(IconComponent, {
    className: clsx(classes.icon, classes["icon".concat(capitalize(variant))], disabled && classes.disabled)
  }));
});
process.env.NODE_ENV !== "production" ? NativeSelectInput.propTypes = {
  /**
   * The option elements to populate the select with.
   * Can be some `<option>` elements.
   */
  children: propTypes.node,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: propTypes.object.isRequired,

  /**
   * The CSS class name of the select element.
   */
  className: propTypes.string,

  /**
   * If `true`, the select will be disabled.
   */
  disabled: propTypes.bool,

  /**
   * The icon that displays the arrow.
   */
  IconComponent: propTypes.elementType.isRequired,

  /**
   * Use that prop to pass a ref to the native select element.
   * @deprecated
   */
  inputRef: utils.refType,

  /**
   * @ignore
   */
  multiple: propTypes.bool,

  /**
   * Name attribute of the `select` or hidden `input` element.
   */
  name: propTypes.string,

  /**
   * Callback function fired when a menu item is selected.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: propTypes.func,

  /**
   * The input value.
   */
  value: propTypes.any,

  /**
   * The variant to use.
   */
  variant: propTypes.oneOf(['standard', 'outlined', 'filled'])
} : void 0;

function formControlState(_ref) {
  var props = _ref.props,
      states = _ref.states,
      muiFormControl = _ref.muiFormControl;
  return states.reduce(function (acc, state) {
    acc[state] = props[state];

    if (muiFormControl) {
      if (typeof props[state] === 'undefined') {
        acc[state] = muiFormControl[state];
      }
    }

    return acc;
  }, {});
}

/**
 * @ignore - internal component.
 */

var FormControlContext = createContext();

if (process.env.NODE_ENV !== 'production') {
  FormControlContext.displayName = 'FormControlContext';
}

function useFormControl() {
  return useContext(FormControlContext);
}

function useFormControl$1() {
  return useContext(FormControlContext);
}

/**
 * @ignore - internal component.
 */

var ArrowDropDownIcon = createSvgIcon( /*#__PURE__*/createElement("path", {
  d: "M7 10l5 5 5-5z"
}), 'ArrowDropDown');

function getStyleValue(computedStyle, property) {
  return parseInt(computedStyle[property], 10) || 0;
}

var useEnhancedEffect$2 = typeof window !== 'undefined' ? useLayoutEffect : useEffect;
var styles$5 = {
  /* Styles applied to the shadow textarea element. */
  shadow: {
    // Visibility needed to hide the extra text area on iPads
    visibility: 'hidden',
    // Remove from the content flow
    position: 'absolute',
    // Ignore the scrollbar width
    overflow: 'hidden',
    height: 0,
    top: 0,
    left: 0,
    // Create a new layer, increase the isolation of the computed values
    transform: 'translateZ(0)'
  }
};
var TextareaAutosize = /*#__PURE__*/forwardRef(function TextareaAutosize(props, ref) {
  var onChange = props.onChange,
      rows = props.rows,
      rowsMax = props.rowsMax,
      _props$rowsMin = props.rowsMin,
      rowsMinProp = _props$rowsMin === void 0 ? 1 : _props$rowsMin,
      style = props.style,
      value = props.value,
      other = _objectWithoutProperties$1(props, ["onChange", "rows", "rowsMax", "rowsMin", "style", "value"]);

  var rowsMin = rows || rowsMinProp;

  var _React$useRef = useRef(value != null),
      isControlled = _React$useRef.current;

  var inputRef = useRef(null);
  var handleRef = useForkRef(ref, inputRef);
  var shadowRef = useRef(null);
  var renders = useRef(0);

  var _React$useState = useState({}),
      state = _React$useState[0],
      setState = _React$useState[1];

  var syncHeight = useCallback(function () {
    var input = inputRef.current;
    var computedStyle = window.getComputedStyle(input);
    var inputShallow = shadowRef.current;
    inputShallow.style.width = computedStyle.width;
    inputShallow.value = input.value || props.placeholder || 'x';

    if (inputShallow.value.slice(-1) === '\n') {
      // Certain fonts which overflow the line height will cause the textarea
      // to report a different scrollHeight depending on whether the last line
      // is empty. Make it non-empty to avoid this issue.
      inputShallow.value += ' ';
    }

    var boxSizing = computedStyle['box-sizing'];
    var padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');
    var border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width'); // The height of the inner content

    var innerHeight = inputShallow.scrollHeight - padding; // Measure height of a textarea with a single row

    inputShallow.value = 'x';
    var singleRowHeight = inputShallow.scrollHeight - padding; // The height of the outer content

    var outerHeight = innerHeight;

    if (rowsMin) {
      outerHeight = Math.max(Number(rowsMin) * singleRowHeight, outerHeight);
    }

    if (rowsMax) {
      outerHeight = Math.min(Number(rowsMax) * singleRowHeight, outerHeight);
    }

    outerHeight = Math.max(outerHeight, singleRowHeight); // Take the box sizing into account for applying this value as a style.

    var outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);
    var overflow = Math.abs(outerHeight - innerHeight) <= 1;
    setState(function (prevState) {
      // Need a large enough difference to update the height.
      // This prevents infinite rendering loop.
      if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {
        renders.current += 1;
        return {
          overflow: overflow,
          outerHeightStyle: outerHeightStyle
        };
      }

      if (process.env.NODE_ENV !== 'production') {
        if (renders.current === 20) {
          console.error(['Material-UI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\n'));
        }
      }

      return prevState;
    });
  }, [rowsMax, rowsMin, props.placeholder]);
  useEffect(function () {
    var handleResize = debounce(function () {
      renders.current = 0;
      syncHeight();
    });
    window.addEventListener('resize', handleResize);
    return function () {
      handleResize.clear();
      window.removeEventListener('resize', handleResize);
    };
  }, [syncHeight]);
  useEnhancedEffect$2(function () {
    syncHeight();
  });
  useEffect(function () {
    renders.current = 0;
  }, [value]);

  var handleChange = function handleChange(event) {
    renders.current = 0;

    if (!isControlled) {
      syncHeight();
    }

    if (onChange) {
      onChange(event);
    }
  };

  return /*#__PURE__*/createElement(Fragment$2, null, /*#__PURE__*/createElement("textarea", _extends$1({
    value: value,
    onChange: handleChange,
    ref: handleRef // Apply the rows prop to get a "correct" first SSR paint
    ,
    rows: rowsMin,
    style: _extends$1({
      height: state.outerHeightStyle,
      // Need a large enough difference to allow scrolling.
      // This prevents infinite rendering loop.
      overflow: state.overflow ? 'hidden' : null
    }, style)
  }, other)), /*#__PURE__*/createElement("textarea", {
    "aria-hidden": true,
    className: props.className,
    readOnly: true,
    ref: shadowRef,
    tabIndex: -1,
    style: _extends$1({}, styles$5.shadow, style)
  }));
});
process.env.NODE_ENV !== "production" ? TextareaAutosize.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * @ignore
   */
  className: propTypes.string,

  /**
   * @ignore
   */
  onChange: propTypes.func,

  /**
   * @ignore
   */
  placeholder: propTypes.string,

  /**
   * Use `rowsMin` instead. The prop will be removed in v5.
   *
   * @deprecated
   */
  rows: propTypes.oneOfType([propTypes.number, propTypes.string]),

  /**
   * Maximum number of rows to display.
   */
  rowsMax: propTypes.oneOfType([propTypes.number, propTypes.string]),

  /**
   * Minimum number of rows to display.
   */
  rowsMin: propTypes.oneOfType([propTypes.number, propTypes.string]),

  /**
   * @ignore
   */
  style: propTypes.object,

  /**
   * @ignore
   */
  value: propTypes.oneOfType([propTypes.arrayOf(propTypes.string), propTypes.number, propTypes.string])
} : void 0;

// Supports determination of isControlled().
// Controlled input accepts its current value as a prop.
//
// @see https://facebook.github.io/react/docs/forms.html#controlled-components
// @param value
// @returns {boolean} true if string (including '') or number (including zero)
function hasValue(value) {
  return value != null && !(Array.isArray(value) && value.length === 0);
} // Determine if field is empty or filled.
// Response determines if label is presented above field or as placeholder.
//
// @param obj
// @param SSR
// @returns {boolean} False when not present or empty string.
//                    True when any number or string with length.

function isFilled(obj) {
  var SSR = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return obj && (hasValue(obj.value) && obj.value !== '' || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== '');
} // Determine if an Input is adorned on start.

var styles$6 = function styles(theme) {
  var light = theme.palette.type === 'light';
  var placeholder = {
    color: 'currentColor',
    opacity: light ? 0.42 : 0.5,
    transition: theme.transitions.create('opacity', {
      duration: theme.transitions.duration.shorter
    })
  };
  var placeholderHidden = {
    opacity: '0 !important'
  };
  var placeholderVisible = {
    opacity: light ? 0.42 : 0.5
  };
  return {
    '@global': {
      '@keyframes mui-auto-fill': {},
      '@keyframes mui-auto-fill-cancel': {}
    },

    /* Styles applied to the root element. */
    root: _extends$1({}, theme.typography.body1, {
      color: theme.palette.text.primary,
      lineHeight: '1.1876em',
      // Reset (19px), match the native input line-height
      boxSizing: 'border-box',
      // Prevent padding issue with fullWidth.
      position: 'relative',
      cursor: 'text',
      display: 'inline-flex',
      alignItems: 'center',
      '&$disabled': {
        color: theme.palette.text.disabled,
        cursor: 'default'
      }
    }),

    /* Styles applied to the root element if the component is a descendant of `FormControl`. */
    formControl: {},

    /* Styles applied to the root element if the component is focused. */
    focused: {},

    /* Styles applied to the root element if `disabled={true}`. */
    disabled: {},

    /* Styles applied to the root element if `startAdornment` is provided. */
    adornedStart: {},

    /* Styles applied to the root element if `endAdornment` is provided. */
    adornedEnd: {},

    /* Pseudo-class applied to the root element if `error={true}`. */
    error: {},

    /* Styles applied to the `input` element if `margin="dense"`. */
    marginDense: {},

    /* Styles applied to the root element if `multiline={true}`. */
    multiline: {
      padding: "".concat(8 - 2, "px 0 ").concat(8 - 1, "px"),
      '&$marginDense': {
        paddingTop: 4 - 1
      }
    },

    /* Styles applied to the root element if the color is secondary. */
    colorSecondary: {},

    /* Styles applied to the root element if `fullWidth={true}`. */
    fullWidth: {
      width: '100%'
    },

    /* Styles applied to the `input` element. */
    input: {
      font: 'inherit',
      letterSpacing: 'inherit',
      color: 'currentColor',
      padding: "".concat(8 - 2, "px 0 ").concat(8 - 1, "px"),
      border: 0,
      boxSizing: 'content-box',
      background: 'none',
      height: '1.1876em',
      // Reset (19px), match the native input line-height
      margin: 0,
      // Reset for Safari
      WebkitTapHighlightColor: 'transparent',
      display: 'block',
      // Make the flex item shrink with Firefox
      minWidth: 0,
      width: '100%',
      // Fix IE 11 width issue
      animationName: 'mui-auto-fill-cancel',
      animationDuration: '10ms',
      '&::-webkit-input-placeholder': placeholder,
      '&::-moz-placeholder': placeholder,
      // Firefox 19+
      '&:-ms-input-placeholder': placeholder,
      // IE 11
      '&::-ms-input-placeholder': placeholder,
      // Edge
      '&:focus': {
        outline: 0
      },
      // Reset Firefox invalid required input style
      '&:invalid': {
        boxShadow: 'none'
      },
      '&::-webkit-search-decoration': {
        // Remove the padding when type=search.
        '-webkit-appearance': 'none'
      },
      // Show and hide the placeholder logic
      'label[data-shrink=false] + $formControl &': {
        '&::-webkit-input-placeholder': placeholderHidden,
        '&::-moz-placeholder': placeholderHidden,
        // Firefox 19+
        '&:-ms-input-placeholder': placeholderHidden,
        // IE 11
        '&::-ms-input-placeholder': placeholderHidden,
        // Edge
        '&:focus::-webkit-input-placeholder': placeholderVisible,
        '&:focus::-moz-placeholder': placeholderVisible,
        // Firefox 19+
        '&:focus:-ms-input-placeholder': placeholderVisible,
        // IE 11
        '&:focus::-ms-input-placeholder': placeholderVisible // Edge

      },
      '&$disabled': {
        opacity: 1 // Reset iOS opacity

      },
      '&:-webkit-autofill': {
        animationDuration: '5000s',
        animationName: 'mui-auto-fill'
      }
    },

    /* Styles applied to the `input` element if `margin="dense"`. */
    inputMarginDense: {
      paddingTop: 4 - 1
    },

    /* Styles applied to the `input` element if `multiline={true}`. */
    inputMultiline: {
      height: 'auto',
      resize: 'none',
      padding: 0
    },

    /* Styles applied to the `input` element if `type="search"`. */
    inputTypeSearch: {
      // Improve type search style.
      '-moz-appearance': 'textfield',
      '-webkit-appearance': 'textfield'
    },

    /* Styles applied to the `input` element if `startAdornment` is provided. */
    inputAdornedStart: {},

    /* Styles applied to the `input` element if `endAdornment` is provided. */
    inputAdornedEnd: {},

    /* Styles applied to the `input` element if `hiddenLabel={true}`. */
    inputHiddenLabel: {}
  };
};
var useEnhancedEffect$3 = typeof window === 'undefined' ? useEffect : useLayoutEffect;
/**
 * `InputBase` contains as few styles as possible.
 * It aims to be a simple building block for creating an input.
 * It contains a load of style reset and some state logic.
 */

var InputBase = /*#__PURE__*/forwardRef(function InputBase(props, ref) {
  var ariaDescribedby = props['aria-describedby'],
      autoComplete = props.autoComplete,
      autoFocus = props.autoFocus,
      classes = props.classes,
      className = props.className,
      color = props.color,
      defaultValue = props.defaultValue,
      disabled = props.disabled,
      endAdornment = props.endAdornment,
      error = props.error,
      _props$fullWidth = props.fullWidth,
      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
      id = props.id,
      _props$inputComponent = props.inputComponent,
      inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,
      _props$inputProps = props.inputProps,
      inputPropsProp = _props$inputProps === void 0 ? {} : _props$inputProps,
      inputRefProp = props.inputRef,
      margin = props.margin,
      _props$multiline = props.multiline,
      multiline = _props$multiline === void 0 ? false : _props$multiline,
      name = props.name,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onClick = props.onClick,
      onFocus = props.onFocus,
      onKeyDown = props.onKeyDown,
      onKeyUp = props.onKeyUp,
      placeholder = props.placeholder,
      readOnly = props.readOnly,
      renderSuffix = props.renderSuffix,
      rows = props.rows,
      rowsMax = props.rowsMax,
      rowsMin = props.rowsMin,
      startAdornment = props.startAdornment,
      _props$type = props.type,
      type = _props$type === void 0 ? 'text' : _props$type,
      valueProp = props.value,
      other = _objectWithoutProperties$1(props, ["aria-describedby", "autoComplete", "autoFocus", "classes", "className", "color", "defaultValue", "disabled", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "rowsMax", "rowsMin", "startAdornment", "type", "value"]);

  var value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;

  var _React$useRef = useRef(value != null),
      isControlled = _React$useRef.current;

  var inputRef = useRef();
  var handleInputRefWarning = useCallback(function (instance) {
    if (process.env.NODE_ENV !== 'production') {
      if (instance && instance.nodeName !== 'INPUT' && !instance.focus) {
        console.error(['Material-UI: You have provided a `inputComponent` to the input component', 'that does not correctly handle the `inputRef` prop.', 'Make sure the `inputRef` prop is called with a HTMLInputElement.'].join('\n'));
      }
    }
  }, []);
  var handleInputPropsRefProp = useForkRef(inputPropsProp.ref, handleInputRefWarning);
  var handleInputRefProp = useForkRef(inputRefProp, handleInputPropsRefProp);
  var handleInputRef = useForkRef(inputRef, handleInputRefProp);

  var _React$useState = useState(false),
      focused = _React$useState[0],
      setFocused = _React$useState[1];

  var muiFormControl = useFormControl();

  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useEffect(function () {
      if (muiFormControl) {
        return muiFormControl.registerEffect();
      }

      return undefined;
    }, [muiFormControl]);
  }

  var fcs = formControlState({
    props: props,
    muiFormControl: muiFormControl,
    states: ['color', 'disabled', 'error', 'hiddenLabel', 'margin', 'required', 'filled']
  });
  fcs.focused = muiFormControl ? muiFormControl.focused : focused; // The blur won't fire when the disabled state is set on a focused input.
  // We need to book keep the focused state manually.

  useEffect(function () {
    if (!muiFormControl && disabled && focused) {
      setFocused(false);

      if (onBlur) {
        onBlur();
      }
    }
  }, [muiFormControl, disabled, focused, onBlur]);
  var onFilled = muiFormControl && muiFormControl.onFilled;
  var onEmpty = muiFormControl && muiFormControl.onEmpty;
  var checkDirty = useCallback(function (obj) {
    if (isFilled(obj)) {
      if (onFilled) {
        onFilled();
      }
    } else if (onEmpty) {
      onEmpty();
    }
  }, [onFilled, onEmpty]);
  useEnhancedEffect$3(function () {
    if (isControlled) {
      checkDirty({
        value: value
      });
    }
  }, [value, checkDirty, isControlled]);

  var handleFocus = function handleFocus(event) {
    // Fix a bug with IE 11 where the focus/blur events are triggered
    // while the input is disabled.
    if (fcs.disabled) {
      event.stopPropagation();
      return;
    }

    if (onFocus) {
      onFocus(event);
    }

    if (inputPropsProp.onFocus) {
      inputPropsProp.onFocus(event);
    }

    if (muiFormControl && muiFormControl.onFocus) {
      muiFormControl.onFocus(event);
    } else {
      setFocused(true);
    }
  };

  var handleBlur = function handleBlur(event) {
    if (onBlur) {
      onBlur(event);
    }

    if (inputPropsProp.onBlur) {
      inputPropsProp.onBlur(event);
    }

    if (muiFormControl && muiFormControl.onBlur) {
      muiFormControl.onBlur(event);
    } else {
      setFocused(false);
    }
  };

  var handleChange = function handleChange(event) {
    if (!isControlled) {
      var element = event.target || inputRef.current;

      if (element == null) {
        throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: Expected valid input target. Did you use a custom `inputComponent` and forget to forward refs? See https://material-ui.com/r/input-component-ref-interface for more info." : utils.formatMuiErrorMessage(1));
      }

      checkDirty({
        value: element.value
      });
    }

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (inputPropsProp.onChange) {
      inputPropsProp.onChange.apply(inputPropsProp, [event].concat(args));
    } // Perform in the willUpdate


    if (onChange) {
      onChange.apply(void 0, [event].concat(args));
    }
  }; // Check the input state on mount, in case it was filled by the user
  // or auto filled by the browser before the hydration (for SSR).


  useEffect(function () {
    checkDirty(inputRef.current);
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  var handleClick = function handleClick(event) {
    if (inputRef.current && event.currentTarget === event.target) {
      inputRef.current.focus();
    }

    if (onClick) {
      onClick(event);
    }
  };

  var InputComponent = inputComponent;

  var inputProps = _extends$1({}, inputPropsProp, {
    ref: handleInputRef
  });

  if (typeof InputComponent !== 'string') {
    inputProps = _extends$1({
      // Rename ref to inputRef as we don't know the
      // provided `inputComponent` structure.
      inputRef: handleInputRef,
      type: type
    }, inputProps, {
      ref: null
    });
  } else if (multiline) {
    if (rows && !rowsMax && !rowsMin) {
      InputComponent = 'textarea';
    } else {
      inputProps = _extends$1({
        rows: rows,
        rowsMax: rowsMax
      }, inputProps);
      InputComponent = TextareaAutosize;
    }
  } else {
    inputProps = _extends$1({
      type: type
    }, inputProps);
  }

  var handleAutoFill = function handleAutoFill(event) {
    // Provide a fake value as Chrome might not let you access it for security reasons.
    checkDirty(event.animationName === 'mui-auto-fill-cancel' ? inputRef.current : {
      value: 'x'
    });
  };

  useEffect(function () {
    if (muiFormControl) {
      muiFormControl.setAdornedStart(Boolean(startAdornment));
    }
  }, [muiFormControl, startAdornment]);
  return /*#__PURE__*/createElement("div", _extends$1({
    className: clsx(classes.root, classes["color".concat(capitalize(fcs.color || 'primary'))], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fullWidth && classes.fullWidth, fcs.focused && classes.focused, muiFormControl && classes.formControl, multiline && classes.multiline, startAdornment && classes.adornedStart, endAdornment && classes.adornedEnd, fcs.margin === 'dense' && classes.marginDense),
    onClick: handleClick,
    ref: ref
  }, other), startAdornment, /*#__PURE__*/createElement(FormControlContext.Provider, {
    value: null
  }, /*#__PURE__*/createElement(InputComponent, _extends$1({
    "aria-invalid": fcs.error,
    "aria-describedby": ariaDescribedby,
    autoComplete: autoComplete,
    autoFocus: autoFocus,
    defaultValue: defaultValue,
    disabled: fcs.disabled,
    id: id,
    onAnimationStart: handleAutoFill,
    name: name,
    placeholder: placeholder,
    readOnly: readOnly,
    required: fcs.required,
    rows: rows,
    value: value,
    onKeyDown: onKeyDown,
    onKeyUp: onKeyUp
  }, inputProps, {
    className: clsx(classes.input, inputPropsProp.className, fcs.disabled && classes.disabled, multiline && classes.inputMultiline, fcs.hiddenLabel && classes.inputHiddenLabel, startAdornment && classes.inputAdornedStart, endAdornment && classes.inputAdornedEnd, type === 'search' && classes.inputTypeSearch, fcs.margin === 'dense' && classes.inputMarginDense),
    onBlur: handleBlur,
    onChange: handleChange,
    onFocus: handleFocus
  }))), endAdornment, renderSuffix ? renderSuffix(_extends$1({}, fcs, {
    startAdornment: startAdornment
  })) : null);
});
process.env.NODE_ENV !== "production" ? InputBase.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * @ignore
   */
  'aria-describedby': propTypes.string,

  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: propTypes.string,

  /**
   * If `true`, the `input` element will be focused during the first mount.
   */
  autoFocus: propTypes.bool,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: propTypes.object,

  /**
   * @ignore
   */
  className: propTypes.string,

  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: propTypes.oneOf(['primary', 'secondary']),

  /**
   * The default `input` element value. Use when the component is not controlled.
   */
  defaultValue: propTypes.any,

  /**
   * If `true`, the `input` element will be disabled.
   */
  disabled: propTypes.bool,

  /**
   * End `InputAdornment` for this component.
   */
  endAdornment: propTypes.node,

  /**
   * If `true`, the input will indicate an error. This is normally obtained via context from
   * FormControl.
   */
  error: propTypes.bool,

  /**
   * If `true`, the input will take up the full width of its container.
   */
  fullWidth: propTypes.bool,

  /**
   * The id of the `input` element.
   */
  id: propTypes.string,

  /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   */
  inputComponent: propTypes.elementType,

  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: propTypes.object,

  /**
   * Pass a ref to the `input` element.
   */
  inputRef: utils.refType,

  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   */
  margin: propTypes.oneOf(['dense', 'none']),

  /**
   * If `true`, a textarea element will be rendered.
   */
  multiline: propTypes.bool,

  /**
   * Name attribute of the `input` element.
   */
  name: propTypes.string,

  /**
   * Callback fired when the input is blurred.
   *
   * Notice that the first argument (event) might be undefined.
   */
  onBlur: propTypes.func,

  /**
   * Callback fired when the value is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: propTypes.func,

  /**
   * @ignore
   */
  onClick: propTypes.func,

  /**
   * @ignore
   */
  onFocus: propTypes.func,

  /**
   * @ignore
   */
  onKeyDown: propTypes.func,

  /**
   * @ignore
   */
  onKeyUp: propTypes.func,

  /**
   * The short hint displayed in the input before the user enters a value.
   */
  placeholder: propTypes.string,

  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: propTypes.bool,

  /**
   * @ignore
   */
  renderSuffix: propTypes.func,

  /**
   * If `true`, the `input` element will be required.
   */
  required: propTypes.bool,

  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: propTypes.oneOfType([propTypes.number, propTypes.string]),

  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  rowsMax: propTypes.oneOfType([propTypes.number, propTypes.string]),

  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  rowsMin: propTypes.oneOfType([propTypes.number, propTypes.string]),

  /**
   * Start `InputAdornment` for this component.
   */
  startAdornment: propTypes.node,

  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   */
  type: propTypes.string,

  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: propTypes.any
} : void 0;
var InputBase$1 = withStyles$1(styles$6, {
  name: 'MuiInputBase'
})(InputBase);

var styles$7 = function styles(theme) {
  var light = theme.palette.type === 'light';
  var bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
  return {
    /* Styles applied to the root element. */
    root: {
      position: 'relative'
    },

    /* Styles applied to the root element if the component is a descendant of `FormControl`. */
    formControl: {
      'label + &': {
        marginTop: 16
      }
    },

    /* Styles applied to the root element if the component is focused. */
    focused: {},

    /* Styles applied to the root element if `disabled={true}`. */
    disabled: {},

    /* Styles applied to the root element if color secondary. */
    colorSecondary: {
      '&$underline:after': {
        borderBottomColor: theme.palette.secondary.main
      }
    },

    /* Styles applied to the root element if `disableUnderline={false}`. */
    underline: {
      '&:after': {
        borderBottom: "2px solid ".concat(theme.palette.primary.main),
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
        content: '""',
        position: 'absolute',
        right: 0,
        transform: 'scaleX(0)',
        transition: theme.transitions.create('transform', {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        pointerEvents: 'none' // Transparent to the hover style.

      },
      '&$focused:after': {
        transform: 'scaleX(1)'
      },
      '&$error:after': {
        borderBottomColor: theme.palette.error.main,
        transform: 'scaleX(1)' // error is always underlined in red

      },
      '&:before': {
        borderBottom: "1px solid ".concat(bottomLineColor),
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
        content: '"\\00a0"',
        position: 'absolute',
        right: 0,
        transition: theme.transitions.create('border-bottom-color', {
          duration: theme.transitions.duration.shorter
        }),
        pointerEvents: 'none' // Transparent to the hover style.

      },
      '&:hover:not($disabled):before': {
        borderBottom: "2px solid ".concat(theme.palette.text.primary),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          borderBottom: "1px solid ".concat(bottomLineColor)
        }
      },
      '&$disabled:before': {
        borderBottomStyle: 'dotted'
      }
    },

    /* Pseudo-class applied to the root element if `error={true}`. */
    error: {},

    /* Styles applied to the `input` element if `margin="dense"`. */
    marginDense: {},

    /* Styles applied to the root element if `multiline={true}`. */
    multiline: {},

    /* Styles applied to the root element if `fullWidth={true}`. */
    fullWidth: {},

    /* Styles applied to the `input` element. */
    input: {},

    /* Styles applied to the `input` element if `margin="dense"`. */
    inputMarginDense: {},

    /* Styles applied to the `input` element if `multiline={true}`. */
    inputMultiline: {},

    /* Styles applied to the `input` element if `type="search"`. */
    inputTypeSearch: {}
  };
};
var Input = /*#__PURE__*/forwardRef(function Input(props, ref) {
  var disableUnderline = props.disableUnderline,
      classes = props.classes,
      _props$fullWidth = props.fullWidth,
      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
      _props$inputComponent = props.inputComponent,
      inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,
      _props$multiline = props.multiline,
      multiline = _props$multiline === void 0 ? false : _props$multiline,
      _props$type = props.type,
      type = _props$type === void 0 ? 'text' : _props$type,
      other = _objectWithoutProperties$1(props, ["disableUnderline", "classes", "fullWidth", "inputComponent", "multiline", "type"]);

  return /*#__PURE__*/createElement(InputBase$1, _extends$1({
    classes: _extends$1({}, classes, {
      root: clsx(classes.root, !disableUnderline && classes.underline),
      underline: null
    }),
    fullWidth: fullWidth,
    inputComponent: inputComponent,
    multiline: multiline,
    ref: ref,
    type: type
  }, other));
});
process.env.NODE_ENV !== "production" ? Input.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: propTypes.string,

  /**
   * If `true`, the `input` element will be focused during the first mount.
   */
  autoFocus: propTypes.bool,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: propTypes.object,

  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: propTypes.oneOf(['primary', 'secondary']),

  /**
   * The default `input` element value. Use when the component is not controlled.
   */
  defaultValue: propTypes.any,

  /**
   * If `true`, the `input` element will be disabled.
   */
  disabled: propTypes.bool,

  /**
   * If `true`, the input will not have an underline.
   */
  disableUnderline: propTypes.bool,

  /**
   * End `InputAdornment` for this component.
   */
  endAdornment: propTypes.node,

  /**
   * If `true`, the input will indicate an error. This is normally obtained via context from
   * FormControl.
   */
  error: propTypes.bool,

  /**
   * If `true`, the input will take up the full width of its container.
   */
  fullWidth: propTypes.bool,

  /**
   * The id of the `input` element.
   */
  id: propTypes.string,

  /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   */
  inputComponent: propTypes.elementType,

  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: propTypes.object,

  /**
   * Pass a ref to the `input` element.
   */
  inputRef: utils.refType,

  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   */
  margin: propTypes.oneOf(['dense', 'none']),

  /**
   * If `true`, a textarea element will be rendered.
   */
  multiline: propTypes.bool,

  /**
   * Name attribute of the `input` element.
   */
  name: propTypes.string,

  /**
   * Callback fired when the value is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: propTypes.func,

  /**
   * The short hint displayed in the input before the user enters a value.
   */
  placeholder: propTypes.string,

  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: propTypes.bool,

  /**
   * If `true`, the `input` element will be required.
   */
  required: propTypes.bool,

  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: propTypes.oneOfType([propTypes.number, propTypes.string]),

  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  rowsMax: propTypes.oneOfType([propTypes.number, propTypes.string]),

  /**
   * Start `InputAdornment` for this component.
   */
  startAdornment: propTypes.node,

  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   */
  type: propTypes.string,

  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: propTypes.any
} : void 0;
Input.muiName = 'Input';
var Input$1 = withStyles$1(styles$7, {
  name: 'MuiInput'
})(Input);

var styles$8 = function styles(theme) {
  return {
    /* Styles applied to the select component `root` class. */
    root: {},

    /* Styles applied to the select component `select` class. */
    select: {
      '-moz-appearance': 'none',
      // Reset
      '-webkit-appearance': 'none',
      // Reset
      // When interacting quickly, the text can end up selected.
      // Native select can't be selected either.
      userSelect: 'none',
      borderRadius: 0,
      // Reset
      minWidth: 16,
      // So it doesn't collapse.
      cursor: 'pointer',
      '&:focus': {
        // Show that it's not an text input
        backgroundColor: theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)',
        borderRadius: 0 // Reset Chrome style

      },
      // Remove IE 11 arrow
      '&::-ms-expand': {
        display: 'none'
      },
      '&$disabled': {
        cursor: 'default'
      },
      '&[multiple]': {
        height: 'auto'
      },
      '&:not([multiple]) option, &:not([multiple]) optgroup': {
        backgroundColor: theme.palette.background.paper
      },
      '&&': {
        paddingRight: 24
      }
    },

    /* Styles applied to the select component if `variant="filled"`. */
    filled: {
      '&&': {
        paddingRight: 32
      }
    },

    /* Styles applied to the select component if `variant="outlined"`. */
    outlined: {
      borderRadius: theme.shape.borderRadius,
      '&&': {
        paddingRight: 32
      }
    },

    /* Styles applied to the select component `selectMenu` class. */
    selectMenu: {
      height: 'auto',
      // Resets for multpile select with chips
      minHeight: '1.1876em',
      // Required for select\text-field height consistency
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap',
      overflow: 'hidden'
    },

    /* Pseudo-class applied to the select component `disabled` class. */
    disabled: {},

    /* Styles applied to the icon component. */
    icon: {
      // We use a position absolute over a flexbox in order to forward the pointer events
      // to the input and to support wrapping tags..
      position: 'absolute',
      right: 0,
      top: 'calc(50% - 12px)',
      // Center vertically
      pointerEvents: 'none',
      // Don't block pointer events on the select under the icon.
      color: theme.palette.action.active,
      '&$disabled': {
        color: theme.palette.action.disabled
      }
    },

    /* Styles applied to the icon component if the popup is open. */
    iconOpen: {
      transform: 'rotate(180deg)'
    },

    /* Styles applied to the icon component if `variant="filled"`. */
    iconFilled: {
      right: 7
    },

    /* Styles applied to the icon component if `variant="outlined"`. */
    iconOutlined: {
      right: 7
    },

    /* Styles applied to the underlying native input component. */
    nativeInput: {
      bottom: 0,
      left: 0,
      position: 'absolute',
      opacity: 0,
      pointerEvents: 'none',
      width: '100%'
    }
  };
};
var defaultInput = /*#__PURE__*/createElement(Input$1, null);
/**
 * An alternative to `<Select native />` with a much smaller bundle size footprint.
 */

var NativeSelect = /*#__PURE__*/forwardRef(function NativeSelect(props, ref) {
  var children = props.children,
      classes = props.classes,
      _props$IconComponent = props.IconComponent,
      IconComponent = _props$IconComponent === void 0 ? ArrowDropDownIcon : _props$IconComponent,
      _props$input = props.input,
      input = _props$input === void 0 ? defaultInput : _props$input,
      inputProps = props.inputProps,
      variant = props.variant,
      other = _objectWithoutProperties$1(props, ["children", "classes", "IconComponent", "input", "inputProps", "variant"]);

  var muiFormControl = useFormControl$1();
  var fcs = formControlState({
    props: props,
    muiFormControl: muiFormControl,
    states: ['variant']
  });
  return /*#__PURE__*/cloneElement(input, _extends$1({
    // Most of the logic is implemented in `NativeSelectInput`.
    // The `Select` component is a simple API wrapper to expose something better to play with.
    inputComponent: NativeSelectInput,
    inputProps: _extends$1({
      children: children,
      classes: classes,
      IconComponent: IconComponent,
      variant: fcs.variant,
      type: undefined
    }, inputProps, input ? input.props.inputProps : {}),
    ref: ref
  }, other));
});
process.env.NODE_ENV !== "production" ? NativeSelect.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * The option elements to populate the select with.
   * Can be some `<option>` elements.
   */
  children: propTypes.node,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: propTypes.object,

  /**
   * The icon that displays the arrow.
   */
  IconComponent: propTypes.elementType,

  /**
   * An `Input` element; does not have to be a material-ui specific `Input`.
   */
  input: propTypes.element,

  /**
   * Attributes applied to the `select` element.
   */
  inputProps: propTypes.object,

  /**
   * Callback function fired when a menu item is selected.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: propTypes.func,

  /**
   * The input value. The DOM API casts this to a string.
   */
  value: propTypes.any,

  /**
   * The variant to use.
   */
  variant: propTypes.oneOf(['filled', 'outlined', 'standard'])
} : void 0;
NativeSelect.muiName = 'Select';
var NativeSelect$1 = withStyles$1(styles$8, {
  name: 'MuiNativeSelect'
})(NativeSelect);

var ChartPagination = function ChartPagination(props) {
  var show = props.show,
      page = props.page,
      total = props.total,
      _onChange = props.onChange;

  if (!show) {
    return null;
  }

  function change(e) {
    var pageSize = +e.target.value;

    _onChange(undefined, pageSize);
  }

  var count = Math.ceil(total / page.size);
  return React.createElement("div", {
    className: "rocketChart-table-pagination"
  }, React.createElement(Pagination$1, {
    size: "small",
    shape: "rounded",
    variant: "outlined",
    count: count,
    onChange: function onChange(e, page) {
      _onChange(page);
    }
  }), React.createElement(NativeSelect$1, {
    variant: "outlined",
    onChange: change,
    value: page.size,
    style: {
      fontSize: '12px'
    }
  }, page.sizeOptions.map(function (item) {
    return React.createElement("option", {
      key: item,
      value: item
    }, item + " \u6761/\u9875");
  })), React.createElement("span", {
    className: "rocketChart-table-total"
  }, "\u5171 " + total + " \u6761"));
};

function _arrayWithHoles$2(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit$2(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest$2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray$2(arr, i) {
  return _arrayWithHoles$2(arr) || _iterableToArrayLimit$2(arr, i) || _unsupportedIterableToArray$3(arr, i) || _nonIterableRest$2();
}

var reflow = function reflow(node) {
  return node.scrollTop;
};
function getTransitionProps(props, options) {
  var timeout = props.timeout,
      _props$style = props.style,
      style = _props$style === void 0 ? {} : _props$style;
  return {
    duration: style.transitionDuration || typeof timeout === 'number' ? timeout : timeout[options.mode] || 0,
    delay: style.transitionDelay
  };
}

function getScale(value) {
  return "scale(".concat(value, ", ").concat(Math.pow(value, 2), ")");
}

var styles$9 = {
  entering: {
    opacity: 1,
    transform: getScale(1)
  },
  entered: {
    opacity: 1,
    transform: 'none'
  }
};
/**
 * The Grow transition is used by the [Tooltip](/components/tooltips/) and
 * [Popover](/components/popover/) components.
 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
 */

var Grow = /*#__PURE__*/forwardRef(function Grow(props, ref) {
  var children = props.children,
      _props$disableStrictM = props.disableStrictModeCompat,
      disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM,
      inProp = props.in,
      onEnter = props.onEnter,
      onEntered = props.onEntered,
      onEntering = props.onEntering,
      onExit = props.onExit,
      onExited = props.onExited,
      onExiting = props.onExiting,
      style = props.style,
      _props$timeout = props.timeout,
      timeout = _props$timeout === void 0 ? 'auto' : _props$timeout,
      _props$TransitionComp = props.TransitionComponent,
      TransitionComponent = _props$TransitionComp === void 0 ? Transition : _props$TransitionComp,
      other = _objectWithoutProperties$1(props, ["children", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]);

  var timer = useRef();
  var autoTimeout = useRef();
  var theme = useTheme$1();
  var enableStrictModeCompat = theme.unstable_strictMode && !disableStrictModeCompat;
  var nodeRef = useRef(null);
  var foreignRef = useForkRef(children.ref, ref);
  var handleRef = useForkRef(enableStrictModeCompat ? nodeRef : undefined, foreignRef);

  var normalizedTransitionCallback = function normalizedTransitionCallback(callback) {
    return function (nodeOrAppearing, maybeAppearing) {
      if (callback) {
        var _ref = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing],
            _ref2 = _slicedToArray$2(_ref, 2),
            node = _ref2[0],
            isAppearing = _ref2[1]; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.


        if (isAppearing === undefined) {
          callback(node);
        } else {
          callback(node, isAppearing);
        }
      }
    };
  };

  var handleEntering = normalizedTransitionCallback(onEntering);
  var handleEnter = normalizedTransitionCallback(function (node, isAppearing) {
    reflow(node); // So the animation always start from the start.

    var _getTransitionProps = getTransitionProps({
      style: style,
      timeout: timeout
    }, {
      mode: 'enter'
    }),
        transitionDuration = _getTransitionProps.duration,
        delay = _getTransitionProps.delay;

    var duration;

    if (timeout === 'auto') {
      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
      autoTimeout.current = duration;
    } else {
      duration = transitionDuration;
    }

    node.style.transition = [theme.transitions.create('opacity', {
      duration: duration,
      delay: delay
    }), theme.transitions.create('transform', {
      duration: duration * 0.666,
      delay: delay
    })].join(',');

    if (onEnter) {
      onEnter(node, isAppearing);
    }
  });
  var handleEntered = normalizedTransitionCallback(onEntered);
  var handleExiting = normalizedTransitionCallback(onExiting);
  var handleExit = normalizedTransitionCallback(function (node) {
    var _getTransitionProps2 = getTransitionProps({
      style: style,
      timeout: timeout
    }, {
      mode: 'exit'
    }),
        transitionDuration = _getTransitionProps2.duration,
        delay = _getTransitionProps2.delay;

    var duration;

    if (timeout === 'auto') {
      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
      autoTimeout.current = duration;
    } else {
      duration = transitionDuration;
    }

    node.style.transition = [theme.transitions.create('opacity', {
      duration: duration,
      delay: delay
    }), theme.transitions.create('transform', {
      duration: duration * 0.666,
      delay: delay || duration * 0.333
    })].join(',');
    node.style.opacity = '0';
    node.style.transform = getScale(0.75);

    if (onExit) {
      onExit(node);
    }
  });
  var handleExited = normalizedTransitionCallback(onExited);

  var addEndListener = function addEndListener(nodeOrNext, maybeNext) {
    var next = enableStrictModeCompat ? nodeOrNext : maybeNext;

    if (timeout === 'auto') {
      timer.current = setTimeout(next, autoTimeout.current || 0);
    }
  };

  useEffect(function () {
    return function () {
      clearTimeout(timer.current);
    };
  }, []);
  return /*#__PURE__*/createElement(TransitionComponent, _extends$1({
    appear: true,
    in: inProp,
    nodeRef: enableStrictModeCompat ? nodeRef : undefined,
    onEnter: handleEnter,
    onEntered: handleEntered,
    onEntering: handleEntering,
    onExit: handleExit,
    onExited: handleExited,
    onExiting: handleExiting,
    addEndListener: addEndListener,
    timeout: timeout === 'auto' ? null : timeout
  }, other), function (state, childProps) {
    return /*#__PURE__*/cloneElement(children, _extends$1({
      style: _extends$1({
        opacity: 0,
        transform: getScale(0.75),
        visibility: state === 'exited' && !inProp ? 'hidden' : undefined
      }, styles$9[state], style, children.props.style),
      ref: handleRef
    }, childProps));
  });
});
process.env.NODE_ENV !== "production" ? Grow.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * A single child content element.
   */
  children: propTypes.element,

  /**
   * Enable this prop if you encounter 'Function components cannot be given refs',
   * use `unstable_createStrictModeTheme`,
   * and can't forward the ref in the child component.
   */
  disableStrictModeCompat: propTypes.bool,

  /**
   * If `true`, show the component; triggers the enter or exit animation.
   */
  in: propTypes.bool,

  /**
   * @ignore
   */
  onEnter: propTypes.func,

  /**
   * @ignore
   */
  onEntered: propTypes.func,

  /**
   * @ignore
   */
  onEntering: propTypes.func,

  /**
   * @ignore
   */
  onExit: propTypes.func,

  /**
   * @ignore
   */
  onExited: propTypes.func,

  /**
   * @ignore
   */
  onExiting: propTypes.func,

  /**
   * @ignore
   */
  style: propTypes.object,

  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   *
   * Set to 'auto' to automatically calculate transition time based on height.
   */
  timeout: propTypes.oneOfType([propTypes.oneOf(['auto']), propTypes.number, propTypes.shape({
    appear: propTypes.number,
    enter: propTypes.number,
    exit: propTypes.number
  })])
} : void 0;
Grow.muiSupportAuto = true;

/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.1-lts
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var isBrowser$1 = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';

var timeoutDuration = function () {
  var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
  for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
    if (isBrowser$1 && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
      return 1;
    }
  }
  return 0;
}();

function microtaskDebounce(fn) {
  var called = false;
  return function () {
    if (called) {
      return;
    }
    called = true;
    window.Promise.resolve().then(function () {
      called = false;
      fn();
    });
  };
}

function taskDebounce(fn) {
  var scheduled = false;
  return function () {
    if (!scheduled) {
      scheduled = true;
      setTimeout(function () {
        scheduled = false;
        fn();
      }, timeoutDuration);
    }
  };
}

var supportsMicroTasks = isBrowser$1 && window.Promise;

/**
* Create a debounced version of a method, that's asynchronously deferred
* but called in the minimum time possible.
*
* @method
* @memberof Popper.Utils
* @argument {Function} fn
* @returns {Function}
*/
var debounce$1 = supportsMicroTasks ? microtaskDebounce : taskDebounce;

/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */
function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}

/**
 * Get CSS computed property of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Eement} element
 * @argument {String} property
 */
function getStyleComputedProperty(element, property) {
  if (element.nodeType !== 1) {
    return [];
  }
  // NOTE: 1 DOM access here
  var window = element.ownerDocument.defaultView;
  var css = window.getComputedStyle(element, null);
  return property ? css[property] : css;
}

/**
 * Returns the parentNode or the host of the element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} parent
 */
function getParentNode(element) {
  if (element.nodeName === 'HTML') {
    return element;
  }
  return element.parentNode || element.host;
}

/**
 * Returns the scrolling parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} scroll parent
 */
function getScrollParent(element) {
  // Return body, `getScroll` will take care to get the correct `scrollTop` from it
  if (!element) {
    return document.body;
  }

  switch (element.nodeName) {
    case 'HTML':
    case 'BODY':
      return element.ownerDocument.body;
    case '#document':
      return element.body;
  }

  // Firefox want us to check `-x` and `-y` variations as well

  var _getStyleComputedProp = getStyleComputedProperty(element),
      overflow = _getStyleComputedProp.overflow,
      overflowX = _getStyleComputedProp.overflowX,
      overflowY = _getStyleComputedProp.overflowY;

  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
    return element;
  }

  return getScrollParent(getParentNode(element));
}

/**
 * Returns the reference node of the reference object, or the reference object itself.
 * @method
 * @memberof Popper.Utils
 * @param {Element|Object} reference - the reference element (the popper will be relative to this)
 * @returns {Element} parent
 */
function getReferenceNode(reference) {
  return reference && reference.referenceNode ? reference.referenceNode : reference;
}

var isIE11 = isBrowser$1 && !!(window.MSInputMethodContext && document.documentMode);
var isIE10 = isBrowser$1 && /MSIE 10/.test(navigator.userAgent);

/**
 * Determines if the browser is Internet Explorer
 * @method
 * @memberof Popper.Utils
 * @param {Number} version to check
 * @returns {Boolean} isIE
 */
function isIE(version) {
  if (version === 11) {
    return isIE11;
  }
  if (version === 10) {
    return isIE10;
  }
  return isIE11 || isIE10;
}

/**
 * Returns the offset parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} offset parent
 */
function getOffsetParent(element) {
  if (!element) {
    return document.documentElement;
  }

  var noOffsetParent = isIE(10) ? document.body : null;

  // NOTE: 1 DOM access here
  var offsetParent = element.offsetParent || null;
  // Skip hidden elements which don't have an offsetParent
  while (offsetParent === noOffsetParent && element.nextElementSibling) {
    offsetParent = (element = element.nextElementSibling).offsetParent;
  }

  var nodeName = offsetParent && offsetParent.nodeName;

  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
    return element ? element.ownerDocument.documentElement : document.documentElement;
  }

  // .offsetParent will return the closest TH, TD or TABLE in case
  // no offsetParent is present, I hate this job...
  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
    return getOffsetParent(offsetParent);
  }

  return offsetParent;
}

function isOffsetContainer(element) {
  var nodeName = element.nodeName;

  if (nodeName === 'BODY') {
    return false;
  }
  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
}

/**
 * Finds the root node (document, shadowDOM root) of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} node
 * @returns {Element} root node
 */
function getRoot(node) {
  if (node.parentNode !== null) {
    return getRoot(node.parentNode);
  }

  return node;
}

/**
 * Finds the offset parent common to the two provided nodes
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element1
 * @argument {Element} element2
 * @returns {Element} common offset parent
 */
function findCommonOffsetParent(element1, element2) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
    return document.documentElement;
  }

  // Here we make sure to give as "start" the element that comes first in the DOM
  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
  var start = order ? element1 : element2;
  var end = order ? element2 : element1;

  // Get common ancestor container
  var range = document.createRange();
  range.setStart(start, 0);
  range.setEnd(end, 0);
  var commonAncestorContainer = range.commonAncestorContainer;

  // Both nodes are inside #document

  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
    if (isOffsetContainer(commonAncestorContainer)) {
      return commonAncestorContainer;
    }

    return getOffsetParent(commonAncestorContainer);
  }

  // one of the nodes is inside shadowDOM, find which one
  var element1root = getRoot(element1);
  if (element1root.host) {
    return findCommonOffsetParent(element1root.host, element2);
  } else {
    return findCommonOffsetParent(element1, getRoot(element2).host);
  }
}

/**
 * Gets the scroll value of the given element in the given side (top and left)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {String} side `top` or `left`
 * @returns {number} amount of scrolled pixels
 */
function getScroll(element) {
  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';

  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
  var nodeName = element.nodeName;

  if (nodeName === 'BODY' || nodeName === 'HTML') {
    var html = element.ownerDocument.documentElement;
    var scrollingElement = element.ownerDocument.scrollingElement || html;
    return scrollingElement[upperSide];
  }

  return element[upperSide];
}

/*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */
function includeScroll(rect, element) {
  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var scrollTop = getScroll(element, 'top');
  var scrollLeft = getScroll(element, 'left');
  var modifier = subtract ? -1 : 1;
  rect.top += scrollTop * modifier;
  rect.bottom += scrollTop * modifier;
  rect.left += scrollLeft * modifier;
  rect.right += scrollLeft * modifier;
  return rect;
}

/*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */

function getBordersSize(styles, axis) {
  var sideA = axis === 'x' ? 'Left' : 'Top';
  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';

  return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width']);
}

function getSize(axis, body, html, computedStyle) {
  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);
}

function getWindowSizes(document) {
  var body = document.body;
  var html = document.documentElement;
  var computedStyle = isIE(10) && getComputedStyle(html);

  return {
    height: getSize('Height', body, html, computedStyle),
    width: getSize('Width', body, html, computedStyle)
  };
}

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass$1 = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();





var defineProperty$2 = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends$7 = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/**
 * Given element offsets, generate an output similar to getBoundingClientRect
 * @method
 * @memberof Popper.Utils
 * @argument {Object} offsets
 * @returns {Object} ClientRect like output
 */
function getClientRect(offsets) {
  return _extends$7({}, offsets, {
    right: offsets.left + offsets.width,
    bottom: offsets.top + offsets.height
  });
}

/**
 * Get bounding client rect of given element
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} element
 * @return {Object} client rect
 */
function getBoundingClientRect(element) {
  var rect = {};

  // IE10 10 FIX: Please, don't ask, the element isn't
  // considered in DOM in some circumstances...
  // This isn't reproducible in IE10 compatibility mode of IE11
  try {
    if (isIE(10)) {
      rect = element.getBoundingClientRect();
      var scrollTop = getScroll(element, 'top');
      var scrollLeft = getScroll(element, 'left');
      rect.top += scrollTop;
      rect.left += scrollLeft;
      rect.bottom += scrollTop;
      rect.right += scrollLeft;
    } else {
      rect = element.getBoundingClientRect();
    }
  } catch (e) {}

  var result = {
    left: rect.left,
    top: rect.top,
    width: rect.right - rect.left,
    height: rect.bottom - rect.top
  };

  // subtract scrollbar size from sizes
  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};
  var width = sizes.width || element.clientWidth || result.width;
  var height = sizes.height || element.clientHeight || result.height;

  var horizScrollbar = element.offsetWidth - width;
  var vertScrollbar = element.offsetHeight - height;

  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
  // we make this check conditional for performance reasons
  if (horizScrollbar || vertScrollbar) {
    var styles = getStyleComputedProperty(element);
    horizScrollbar -= getBordersSize(styles, 'x');
    vertScrollbar -= getBordersSize(styles, 'y');

    result.width -= horizScrollbar;
    result.height -= vertScrollbar;
  }

  return getClientRect(result);
}

function getOffsetRectRelativeToArbitraryNode(children, parent) {
  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var isIE10 = isIE(10);
  var isHTML = parent.nodeName === 'HTML';
  var childrenRect = getBoundingClientRect(children);
  var parentRect = getBoundingClientRect(parent);
  var scrollParent = getScrollParent(children);

  var styles = getStyleComputedProperty(parent);
  var borderTopWidth = parseFloat(styles.borderTopWidth);
  var borderLeftWidth = parseFloat(styles.borderLeftWidth);

  // In cases where the parent is fixed, we must ignore negative scroll in offset calc
  if (fixedPosition && isHTML) {
    parentRect.top = Math.max(parentRect.top, 0);
    parentRect.left = Math.max(parentRect.left, 0);
  }
  var offsets = getClientRect({
    top: childrenRect.top - parentRect.top - borderTopWidth,
    left: childrenRect.left - parentRect.left - borderLeftWidth,
    width: childrenRect.width,
    height: childrenRect.height
  });
  offsets.marginTop = 0;
  offsets.marginLeft = 0;

  // Subtract margins of documentElement in case it's being used as parent
  // we do this only on HTML because it's the only element that behaves
  // differently when margins are applied to it. The margins are included in
  // the box of the documentElement, in the other cases not.
  if (!isIE10 && isHTML) {
    var marginTop = parseFloat(styles.marginTop);
    var marginLeft = parseFloat(styles.marginLeft);

    offsets.top -= borderTopWidth - marginTop;
    offsets.bottom -= borderTopWidth - marginTop;
    offsets.left -= borderLeftWidth - marginLeft;
    offsets.right -= borderLeftWidth - marginLeft;

    // Attach marginTop and marginLeft because in some circumstances we may need them
    offsets.marginTop = marginTop;
    offsets.marginLeft = marginLeft;
  }

  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
    offsets = includeScroll(offsets, parent);
  }

  return offsets;
}

function getViewportOffsetRectRelativeToArtbitraryNode(element) {
  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var html = element.ownerDocument.documentElement;
  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
  var width = Math.max(html.clientWidth, window.innerWidth || 0);
  var height = Math.max(html.clientHeight, window.innerHeight || 0);

  var scrollTop = !excludeScroll ? getScroll(html) : 0;
  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;

  var offset = {
    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
    width: width,
    height: height
  };

  return getClientRect(offset);
}

/**
 * Check if the given element is fixed or is inside a fixed parent
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {Element} customContainer
 * @returns {Boolean} answer to "isFixed?"
 */
function isFixed(element) {
  var nodeName = element.nodeName;
  if (nodeName === 'BODY' || nodeName === 'HTML') {
    return false;
  }
  if (getStyleComputedProperty(element, 'position') === 'fixed') {
    return true;
  }
  var parentNode = getParentNode(element);
  if (!parentNode) {
    return false;
  }
  return isFixed(parentNode);
}

/**
 * Finds the first parent of an element that has a transformed property defined
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} first transformed parent or documentElement
 */

function getFixedPositionOffsetParent(element) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element || !element.parentElement || isIE()) {
    return document.documentElement;
  }
  var el = element.parentElement;
  while (el && getStyleComputedProperty(el, 'transform') === 'none') {
    el = el.parentElement;
  }
  return el || document.documentElement;
}

/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} popper
 * @param {HTMLElement} reference
 * @param {number} padding
 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
 * @param {Boolean} fixedPosition - Is in fixed position mode
 * @returns {Object} Coordinates of the boundaries
 */
function getBoundaries(popper, reference, padding, boundariesElement) {
  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

  // NOTE: 1 DOM access here

  var boundaries = { top: 0, left: 0 };
  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));

  // Handle viewport case
  if (boundariesElement === 'viewport') {
    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
  } else {
    // Handle other cases based on DOM element used as boundaries
    var boundariesNode = void 0;
    if (boundariesElement === 'scrollParent') {
      boundariesNode = getScrollParent(getParentNode(reference));
      if (boundariesNode.nodeName === 'BODY') {
        boundariesNode = popper.ownerDocument.documentElement;
      }
    } else if (boundariesElement === 'window') {
      boundariesNode = popper.ownerDocument.documentElement;
    } else {
      boundariesNode = boundariesElement;
    }

    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);

    // In case of HTML, we need a different computation
    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
      var _getWindowSizes = getWindowSizes(popper.ownerDocument),
          height = _getWindowSizes.height,
          width = _getWindowSizes.width;

      boundaries.top += offsets.top - offsets.marginTop;
      boundaries.bottom = height + offsets.top;
      boundaries.left += offsets.left - offsets.marginLeft;
      boundaries.right = width + offsets.left;
    } else {
      // for all the other DOM elements, this one is good
      boundaries = offsets;
    }
  }

  // Add paddings
  padding = padding || 0;
  var isPaddingNumber = typeof padding === 'number';
  boundaries.left += isPaddingNumber ? padding : padding.left || 0;
  boundaries.top += isPaddingNumber ? padding : padding.top || 0;
  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;

  return boundaries;
}

function getArea(_ref) {
  var width = _ref.width,
      height = _ref.height;

  return width * height;
}

/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

  if (placement.indexOf('auto') === -1) {
    return placement;
  }

  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);

  var rects = {
    top: {
      width: boundaries.width,
      height: refRect.top - boundaries.top
    },
    right: {
      width: boundaries.right - refRect.right,
      height: boundaries.height
    },
    bottom: {
      width: boundaries.width,
      height: boundaries.bottom - refRect.bottom
    },
    left: {
      width: refRect.left - boundaries.left,
      height: boundaries.height
    }
  };

  var sortedAreas = Object.keys(rects).map(function (key) {
    return _extends$7({
      key: key
    }, rects[key], {
      area: getArea(rects[key])
    });
  }).sort(function (a, b) {
    return b.area - a.area;
  });

  var filteredAreas = sortedAreas.filter(function (_ref2) {
    var width = _ref2.width,
        height = _ref2.height;
    return width >= popper.clientWidth && height >= popper.clientHeight;
  });

  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;

  var variation = placement.split('-')[1];

  return computedPlacement + (variation ? '-' + variation : '');
}

/**
 * Get offsets to the reference element
 * @method
 * @memberof Popper.Utils
 * @param {Object} state
 * @param {Element} popper - the popper element
 * @param {Element} reference - the reference element (the popper will be relative to this)
 * @param {Element} fixedPosition - is in fixed position mode
 * @returns {Object} An object containing the offsets which will be applied to the popper
 */
function getReferenceOffsets(state, popper, reference) {
  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
}

/**
 * Get the outer sizes of the given element (offset size + margins)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Object} object containing width and height properties
 */
function getOuterSizes(element) {
  var window = element.ownerDocument.defaultView;
  var styles = window.getComputedStyle(element);
  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
  var result = {
    width: element.offsetWidth + y,
    height: element.offsetHeight + x
  };
  return result;
}

/**
 * Get the opposite placement of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement
 * @returns {String} flipped placement
 */
function getOppositePlacement(placement) {
  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}

/**
 * Get offsets to the popper
 * @method
 * @memberof Popper.Utils
 * @param {Object} position - CSS position the Popper will get applied
 * @param {HTMLElement} popper - the popper element
 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
 * @param {String} placement - one of the valid placement options
 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
 */
function getPopperOffsets(popper, referenceOffsets, placement) {
  placement = placement.split('-')[0];

  // Get popper node sizes
  var popperRect = getOuterSizes(popper);

  // Add position, width and height to our offsets object
  var popperOffsets = {
    width: popperRect.width,
    height: popperRect.height
  };

  // depending by the popper placement we have to compute its offsets slightly differently
  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
  var mainSide = isHoriz ? 'top' : 'left';
  var secondarySide = isHoriz ? 'left' : 'top';
  var measurement = isHoriz ? 'height' : 'width';
  var secondaryMeasurement = !isHoriz ? 'height' : 'width';

  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
  if (placement === secondarySide) {
    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
  } else {
    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
  }

  return popperOffsets;
}

/**
 * Mimics the `find` method of Array
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function find(arr, check) {
  // use native find if supported
  if (Array.prototype.find) {
    return arr.find(check);
  }

  // use `filter` to obtain the same behavior of `find`
  return arr.filter(check)[0];
}

/**
 * Return the index of the matching object
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function findIndex(arr, prop, value) {
  // use native findIndex if supported
  if (Array.prototype.findIndex) {
    return arr.findIndex(function (cur) {
      return cur[prop] === value;
    });
  }

  // use `find` + `indexOf` if `findIndex` isn't supported
  var match = find(arr, function (obj) {
    return obj[prop] === value;
  });
  return arr.indexOf(match);
}

/**
 * Loop trough the list of modifiers and run them in order,
 * each of them will then edit the data object.
 * @method
 * @memberof Popper.Utils
 * @param {dataObject} data
 * @param {Array} modifiers
 * @param {String} ends - Optional modifier name used as stopper
 * @returns {dataObject}
 */
function runModifiers(modifiers, data, ends) {
  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));

  modifiersToRun.forEach(function (modifier) {
    if (modifier['function']) {
      // eslint-disable-line dot-notation
      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
    }
    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
    if (modifier.enabled && isFunction(fn)) {
      // Add properties to offsets to make them a complete clientRect object
      // we do this before each modifier to make sure the previous one doesn't
      // mess with these values
      data.offsets.popper = getClientRect(data.offsets.popper);
      data.offsets.reference = getClientRect(data.offsets.reference);

      data = fn(data, modifier);
    }
  });

  return data;
}

/**
 * Updates the position of the popper, computing the new offsets and applying
 * the new style.<br />
 * Prefer `scheduleUpdate` over `update` because of performance reasons.
 * @method
 * @memberof Popper
 */
function update$1() {
  // if popper is destroyed, don't perform any further update
  if (this.state.isDestroyed) {
    return;
  }

  var data = {
    instance: this,
    styles: {},
    arrowStyles: {},
    attributes: {},
    flipped: false,
    offsets: {}
  };

  // compute reference element offsets
  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);

  // store the computed placement inside `originalPlacement`
  data.originalPlacement = data.placement;

  data.positionFixed = this.options.positionFixed;

  // compute the popper offsets
  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);

  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';

  // run the modifiers
  data = runModifiers(this.modifiers, data);

  // the first `update` will call `onCreate` callback
  // the other ones will call `onUpdate` callback
  if (!this.state.isCreated) {
    this.state.isCreated = true;
    this.options.onCreate(data);
  } else {
    this.options.onUpdate(data);
  }
}

/**
 * Helper used to know if the given modifier is enabled.
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean}
 */
function isModifierEnabled(modifiers, modifierName) {
  return modifiers.some(function (_ref) {
    var name = _ref.name,
        enabled = _ref.enabled;
    return enabled && name === modifierName;
  });
}

/**
 * Get the prefixed supported property name
 * @method
 * @memberof Popper.Utils
 * @argument {String} property (camelCase)
 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
 */
function getSupportedPropertyName(property) {
  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

  for (var i = 0; i < prefixes.length; i++) {
    var prefix = prefixes[i];
    var toCheck = prefix ? '' + prefix + upperProp : property;
    if (typeof document.body.style[toCheck] !== 'undefined') {
      return toCheck;
    }
  }
  return null;
}

/**
 * Destroys the popper.
 * @method
 * @memberof Popper
 */
function destroy() {
  this.state.isDestroyed = true;

  // touch DOM only if `applyStyle` modifier is enabled
  if (isModifierEnabled(this.modifiers, 'applyStyle')) {
    this.popper.removeAttribute('x-placement');
    this.popper.style.position = '';
    this.popper.style.top = '';
    this.popper.style.left = '';
    this.popper.style.right = '';
    this.popper.style.bottom = '';
    this.popper.style.willChange = '';
    this.popper.style[getSupportedPropertyName('transform')] = '';
  }

  this.disableEventListeners();

  // remove the popper if user explicitly asked for the deletion on destroy
  // do not use `remove` because IE11 doesn't support it
  if (this.options.removeOnDestroy) {
    this.popper.parentNode.removeChild(this.popper);
  }
  return this;
}

/**
 * Get the window associated with the element
 * @argument {Element} element
 * @returns {Window}
 */
function getWindow(element) {
  var ownerDocument = element.ownerDocument;
  return ownerDocument ? ownerDocument.defaultView : window;
}

function attachToScrollParents(scrollParent, event, callback, scrollParents) {
  var isBody = scrollParent.nodeName === 'BODY';
  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
  target.addEventListener(event, callback, { passive: true });

  if (!isBody) {
    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
  }
  scrollParents.push(target);
}

/**
 * Setup needed event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function setupEventListeners(reference, options, state, updateBound) {
  // Resize event listener on window
  state.updateBound = updateBound;
  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });

  // Scroll event listener on scroll parents
  var scrollElement = getScrollParent(reference);
  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
  state.scrollElement = scrollElement;
  state.eventsEnabled = true;

  return state;
}

/**
 * It will add resize/scroll events and start recalculating
 * position of the popper element when they are triggered.
 * @method
 * @memberof Popper
 */
function enableEventListeners() {
  if (!this.state.eventsEnabled) {
    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
  }
}

/**
 * Remove event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function removeEventListeners(reference, state) {
  // Remove resize event listener on window
  getWindow(reference).removeEventListener('resize', state.updateBound);

  // Remove scroll event listener on scroll parents
  state.scrollParents.forEach(function (target) {
    target.removeEventListener('scroll', state.updateBound);
  });

  // Reset state
  state.updateBound = null;
  state.scrollParents = [];
  state.scrollElement = null;
  state.eventsEnabled = false;
  return state;
}

/**
 * It will remove resize/scroll events and won't recalculate popper position
 * when they are triggered. It also won't trigger `onUpdate` callback anymore,
 * unless you call `update` method manually.
 * @method
 * @memberof Popper
 */
function disableEventListeners() {
  if (this.state.eventsEnabled) {
    cancelAnimationFrame(this.scheduleUpdate);
    this.state = removeEventListeners(this.reference, this.state);
  }
}

/**
 * Tells if a given input is a number
 * @method
 * @memberof Popper.Utils
 * @param {*} input to check
 * @return {Boolean}
 */
function isNumeric(n) {
  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
}

/**
 * Set the style to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the style to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setStyles(element, styles) {
  Object.keys(styles).forEach(function (prop) {
    var unit = '';
    // add unit if the value is numeric and is one of the following
    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
      unit = 'px';
    }
    element.style[prop] = styles[prop] + unit;
  });
}

/**
 * Set the attributes to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the attributes to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setAttributes(element, attributes) {
  Object.keys(attributes).forEach(function (prop) {
    var value = attributes[prop];
    if (value !== false) {
      element.setAttribute(prop, attributes[prop]);
    } else {
      element.removeAttribute(prop);
    }
  });
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} data.styles - List of style properties - values to apply to popper element
 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The same data object
 */
function applyStyle(data) {
  // any property present in `data.styles` will be applied to the popper,
  // in this way we can make the 3rd party modifiers add custom styles to it
  // Be aware, modifiers could override the properties defined in the previous
  // lines of this modifier!
  setStyles(data.instance.popper, data.styles);

  // any property present in `data.attributes` will be applied to the popper,
  // they will be set as HTML attributes of the element
  setAttributes(data.instance.popper, data.attributes);

  // if arrowElement is defined and arrowStyles has some properties
  if (data.arrowElement && Object.keys(data.arrowStyles).length) {
    setStyles(data.arrowElement, data.arrowStyles);
  }

  return data;
}

/**
 * Set the x-placement attribute before everything else because it could be used
 * to add margins to the popper margins needs to be calculated to get the
 * correct popper offsets.
 * @method
 * @memberof Popper.modifiers
 * @param {HTMLElement} reference - The reference element used to position the popper
 * @param {HTMLElement} popper - The HTML element used as popper
 * @param {Object} options - Popper.js options
 */
function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
  // compute reference element offsets
  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);

  popper.setAttribute('x-placement', placement);

  // Apply `position` to popper before anything else because
  // without the position applied we can't guarantee correct computations
  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });

  return options;
}

/**
 * @function
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Boolean} shouldRound - If the offsets should be rounded at all
 * @returns {Object} The popper's position offsets rounded
 *
 * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
 * good as it can be within reason.
 * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
 *
 * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
 * as well on High DPI screens).
 *
 * Firefox prefers no rounding for positioning and does not have blurriness on
 * high DPI screens.
 *
 * Only horizontal placement and left/right values need to be considered.
 */
function getRoundedOffsets(data, shouldRound) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;
  var round = Math.round,
      floor = Math.floor;

  var noRound = function noRound(v) {
    return v;
  };

  var referenceWidth = round(reference.width);
  var popperWidth = round(popper.width);

  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;
  var isVariation = data.placement.indexOf('-') !== -1;
  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;

  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;
  var verticalToInteger = !shouldRound ? noRound : round;

  return {
    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
    top: verticalToInteger(popper.top),
    bottom: verticalToInteger(popper.bottom),
    right: horizontalToInteger(popper.right)
  };
}

var isFirefox = isBrowser$1 && /Firefox/i.test(navigator.userAgent);

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeStyle(data, options) {
  var x = options.x,
      y = options.y;
  var popper = data.offsets.popper;

  // Remove this legacy support in Popper.js v2

  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'applyStyle';
  }).gpuAcceleration;
  if (legacyGpuAccelerationOption !== undefined) {
    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
  }
  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;

  var offsetParent = getOffsetParent(data.instance.popper);
  var offsetParentRect = getBoundingClientRect(offsetParent);

  // Styles
  var styles = {
    position: popper.position
  };

  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);

  var sideA = x === 'bottom' ? 'top' : 'bottom';
  var sideB = y === 'right' ? 'left' : 'right';

  // if gpuAcceleration is set to `true` and transform is supported,
  //  we use `translate3d` to apply the position to the popper we
  // automatically use the supported prefixed version if needed
  var prefixedProperty = getSupportedPropertyName('transform');

  // now, let's make a step back and look at this code closely (wtf?)
  // If the content of the popper grows once it's been positioned, it
  // may happen that the popper gets misplaced because of the new content
  // overflowing its reference element
  // To avoid this problem, we provide two options (x and y), which allow
  // the consumer to define the offset origin.
  // If we position a popper on top of a reference element, we can set
  // `x` to `top` to make the popper grow towards its top instead of
  // its bottom.
  var left = void 0,
      top = void 0;
  if (sideA === 'bottom') {
    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
    // and not the bottom of the html element
    if (offsetParent.nodeName === 'HTML') {
      top = -offsetParent.clientHeight + offsets.bottom;
    } else {
      top = -offsetParentRect.height + offsets.bottom;
    }
  } else {
    top = offsets.top;
  }
  if (sideB === 'right') {
    if (offsetParent.nodeName === 'HTML') {
      left = -offsetParent.clientWidth + offsets.right;
    } else {
      left = -offsetParentRect.width + offsets.right;
    }
  } else {
    left = offsets.left;
  }
  if (gpuAcceleration && prefixedProperty) {
    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
    styles[sideA] = 0;
    styles[sideB] = 0;
    styles.willChange = 'transform';
  } else {
    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
    var invertTop = sideA === 'bottom' ? -1 : 1;
    var invertLeft = sideB === 'right' ? -1 : 1;
    styles[sideA] = top * invertTop;
    styles[sideB] = left * invertLeft;
    styles.willChange = sideA + ', ' + sideB;
  }

  // Attributes
  var attributes = {
    'x-placement': data.placement
  };

  // Update `data` attributes, styles and arrowStyles
  data.attributes = _extends$7({}, attributes, data.attributes);
  data.styles = _extends$7({}, styles, data.styles);
  data.arrowStyles = _extends$7({}, data.offsets.arrow, data.arrowStyles);

  return data;
}

/**
 * Helper used to know if the given modifier depends from another one.<br />
 * It checks if the needed modifier is listed and enabled.
 * @method
 * @memberof Popper.Utils
 * @param {Array} modifiers - list of modifiers
 * @param {String} requestingName - name of requesting modifier
 * @param {String} requestedName - name of requested modifier
 * @returns {Boolean}
 */
function isModifierRequired(modifiers, requestingName, requestedName) {
  var requesting = find(modifiers, function (_ref) {
    var name = _ref.name;
    return name === requestingName;
  });

  var isRequired = !!requesting && modifiers.some(function (modifier) {
    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
  });

  if (!isRequired) {
    var _requesting = '`' + requestingName + '`';
    var requested = '`' + requestedName + '`';
    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
  }
  return isRequired;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function arrow(data, options) {
  var _data$offsets$arrow;

  // arrow depends on keepTogether in order to work
  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
    return data;
  }

  var arrowElement = options.element;

  // if arrowElement is a string, suppose it's a CSS selector
  if (typeof arrowElement === 'string') {
    arrowElement = data.instance.popper.querySelector(arrowElement);

    // if arrowElement is not found, don't run the modifier
    if (!arrowElement) {
      return data;
    }
  } else {
    // if the arrowElement isn't a query selector we must check that the
    // provided DOM node is child of its popper node
    if (!data.instance.popper.contains(arrowElement)) {
      console.warn('WARNING: `arrow.element` must be child of its popper element!');
      return data;
    }
  }

  var placement = data.placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isVertical = ['left', 'right'].indexOf(placement) !== -1;

  var len = isVertical ? 'height' : 'width';
  var sideCapitalized = isVertical ? 'Top' : 'Left';
  var side = sideCapitalized.toLowerCase();
  var altSide = isVertical ? 'left' : 'top';
  var opSide = isVertical ? 'bottom' : 'right';
  var arrowElementSize = getOuterSizes(arrowElement)[len];

  //
  // extends keepTogether behavior making sure the popper and its
  // reference have enough pixels in conjunction
  //

  // top/left side
  if (reference[opSide] - arrowElementSize < popper[side]) {
    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
  }
  // bottom/right side
  if (reference[side] + arrowElementSize > popper[opSide]) {
    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
  }
  data.offsets.popper = getClientRect(data.offsets.popper);

  // compute center of the popper
  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;

  // Compute the sideValue using the updated popper offsets
  // take popper margin in account because we don't have this info available
  var css = getStyleComputedProperty(data.instance.popper);
  var popperMarginSide = parseFloat(css['margin' + sideCapitalized]);
  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width']);
  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;

  // prevent arrowElement from being placed not contiguously to its popper
  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);

  data.arrowElement = arrowElement;
  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty$2(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty$2(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);

  return data;
}

/**
 * Get the opposite placement variation of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement variation
 * @returns {String} flipped placement variation
 */
function getOppositeVariation(variation) {
  if (variation === 'end') {
    return 'start';
  } else if (variation === 'start') {
    return 'end';
  }
  return variation;
}

/**
 * List of accepted placements to use as values of the `placement` option.<br />
 * Valid placements are:
 * - `auto`
 * - `top`
 * - `right`
 * - `bottom`
 * - `left`
 *
 * Each placement can have a variation from this list:
 * - `-start`
 * - `-end`
 *
 * Variations are interpreted easily if you think of them as the left to right
 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
 * is right.<br />
 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
 *
 * Some valid examples are:
 * - `top-end` (on top of reference, right aligned)
 * - `right-start` (on right of reference, top aligned)
 * - `bottom` (on bottom, centered)
 * - `auto-end` (on the side with more space available, alignment depends by placement)
 *
 * @static
 * @type {Array}
 * @enum {String}
 * @readonly
 * @method placements
 * @memberof Popper
 */
var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];

// Get rid of `auto` `auto-start` and `auto-end`
var validPlacements = placements.slice(3);

/**
 * Given an initial placement, returns all the subsequent placements
 * clockwise (or counter-clockwise).
 *
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement - A valid placement (it accepts variations)
 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
 * @returns {Array} placements including their variations
 */
function clockwise(placement) {
  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var index = validPlacements.indexOf(placement);
  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
  return counter ? arr.reverse() : arr;
}

var BEHAVIORS = {
  FLIP: 'flip',
  CLOCKWISE: 'clockwise',
  COUNTERCLOCKWISE: 'counterclockwise'
};

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function flip(data, options) {
  // if `inner` modifier is enabled, we can't use the `flip` modifier
  if (isModifierEnabled(data.instance.modifiers, 'inner')) {
    return data;
  }

  if (data.flipped && data.placement === data.originalPlacement) {
    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
    return data;
  }

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);

  var placement = data.placement.split('-')[0];
  var placementOpposite = getOppositePlacement(placement);
  var variation = data.placement.split('-')[1] || '';

  var flipOrder = [];

  switch (options.behavior) {
    case BEHAVIORS.FLIP:
      flipOrder = [placement, placementOpposite];
      break;
    case BEHAVIORS.CLOCKWISE:
      flipOrder = clockwise(placement);
      break;
    case BEHAVIORS.COUNTERCLOCKWISE:
      flipOrder = clockwise(placement, true);
      break;
    default:
      flipOrder = options.behavior;
  }

  flipOrder.forEach(function (step, index) {
    if (placement !== step || flipOrder.length === index + 1) {
      return data;
    }

    placement = data.placement.split('-')[0];
    placementOpposite = getOppositePlacement(placement);

    var popperOffsets = data.offsets.popper;
    var refOffsets = data.offsets.reference;

    // using floor because the reference offsets may contain decimals we are not going to consider here
    var floor = Math.floor;
    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);

    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);

    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;

    // flip the variation if required
    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;

    // flips variation if reference element overflows boundaries
    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);

    // flips variation if popper content overflows boundaries
    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);

    var flippedVariation = flippedVariationByRef || flippedVariationByContent;

    if (overlapsRef || overflowsBoundaries || flippedVariation) {
      // this boolean to detect any flip loop
      data.flipped = true;

      if (overlapsRef || overflowsBoundaries) {
        placement = flipOrder[index + 1];
      }

      if (flippedVariation) {
        variation = getOppositeVariation(variation);
      }

      data.placement = placement + (variation ? '-' + variation : '');

      // this object contains `position`, we want to preserve it along with
      // any additional property we may add in the future
      data.offsets.popper = _extends$7({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));

      data = runModifiers(data.instance.modifiers, data, 'flip');
    }
  });
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function keepTogether(data) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var placement = data.placement.split('-')[0];
  var floor = Math.floor;
  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
  var side = isVertical ? 'right' : 'bottom';
  var opSide = isVertical ? 'left' : 'top';
  var measurement = isVertical ? 'width' : 'height';

  if (popper[side] < floor(reference[opSide])) {
    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
  }
  if (popper[opSide] > floor(reference[side])) {
    data.offsets.popper[opSide] = floor(reference[side]);
  }

  return data;
}

/**
 * Converts a string containing value + unit into a px value number
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} str - Value + unit string
 * @argument {String} measurement - `height` or `width`
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @returns {Number|String}
 * Value in pixels, or original string if no values were extracted
 */
function toValue(str, measurement, popperOffsets, referenceOffsets) {
  // separate value from unit
  var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
  var value = +split[1];
  var unit = split[2];

  // If it's not a number it's an operator, I guess
  if (!value) {
    return str;
  }

  if (unit.indexOf('%') === 0) {
    var element = void 0;
    switch (unit) {
      case '%p':
        element = popperOffsets;
        break;
      case '%':
      case '%r':
      default:
        element = referenceOffsets;
    }

    var rect = getClientRect(element);
    return rect[measurement] / 100 * value;
  } else if (unit === 'vh' || unit === 'vw') {
    // if is a vh or vw, we calculate the size based on the viewport
    var size = void 0;
    if (unit === 'vh') {
      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    } else {
      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    }
    return size / 100 * value;
  } else {
    // if is an explicit pixel unit, we get rid of the unit and keep the value
    // if is an implicit unit, it's px, and we return just the value
    return value;
  }
}

/**
 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} offset
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @argument {String} basePlacement
 * @returns {Array} a two cells array with x and y offsets in numbers
 */
function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
  var offsets = [0, 0];

  // Use height if placement is left or right and index is 0 otherwise use width
  // in this way the first offset will use an axis and the second one
  // will use the other one
  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;

  // Split the offset string to obtain a list of values and operands
  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
  var fragments = offset.split(/(\+|\-)/).map(function (frag) {
    return frag.trim();
  });

  // Detect if the offset string contains a pair of values or a single one
  // they could be separated by comma or space
  var divider = fragments.indexOf(find(fragments, function (frag) {
    return frag.search(/,|\s/) !== -1;
  }));

  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
  }

  // If divider is found, we divide the list of values and operands to divide
  // them by ofset X and Y.
  var splitRegex = /\s*,\s*|\s+/;
  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];

  // Convert the values with units to absolute pixels to allow our computations
  ops = ops.map(function (op, index) {
    // Most of the units rely on the orientation of the popper
    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
    var mergeWithPrevious = false;
    return op
    // This aggregates any `+` or `-` sign that aren't considered operators
    // e.g.: 10 + +5 => [10, +, +5]
    .reduce(function (a, b) {
      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
        a[a.length - 1] = b;
        mergeWithPrevious = true;
        return a;
      } else if (mergeWithPrevious) {
        a[a.length - 1] += b;
        mergeWithPrevious = false;
        return a;
      } else {
        return a.concat(b);
      }
    }, [])
    // Here we convert the string values into number values (in px)
    .map(function (str) {
      return toValue(str, measurement, popperOffsets, referenceOffsets);
    });
  });

  // Loop trough the offsets arrays and execute the operations
  ops.forEach(function (op, index) {
    op.forEach(function (frag, index2) {
      if (isNumeric(frag)) {
        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
      }
    });
  });
  return offsets;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @argument {Number|String} options.offset=0
 * The offset value as described in the modifier description
 * @returns {Object} The data object, properly modified
 */
function offset(data, _ref) {
  var offset = _ref.offset;
  var placement = data.placement,
      _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var basePlacement = placement.split('-')[0];

  var offsets = void 0;
  if (isNumeric(+offset)) {
    offsets = [+offset, 0];
  } else {
    offsets = parseOffset(offset, popper, reference, basePlacement);
  }

  if (basePlacement === 'left') {
    popper.top += offsets[0];
    popper.left -= offsets[1];
  } else if (basePlacement === 'right') {
    popper.top += offsets[0];
    popper.left += offsets[1];
  } else if (basePlacement === 'top') {
    popper.left += offsets[0];
    popper.top -= offsets[1];
  } else if (basePlacement === 'bottom') {
    popper.left += offsets[0];
    popper.top += offsets[1];
  }

  data.popper = popper;
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function preventOverflow(data, options) {
  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);

  // If offsetParent is the reference element, we really want to
  // go one step up and use the next offsetParent as reference to
  // avoid to make this modifier completely useless and look like broken
  if (data.instance.reference === boundariesElement) {
    boundariesElement = getOffsetParent(boundariesElement);
  }

  // NOTE: DOM access here
  // resets the popper's position so that the document size can be calculated excluding
  // the size of the popper element itself
  var transformProp = getSupportedPropertyName('transform');
  var popperStyles = data.instance.popper.style; // assignment to help minification
  var top = popperStyles.top,
      left = popperStyles.left,
      transform = popperStyles[transformProp];

  popperStyles.top = '';
  popperStyles.left = '';
  popperStyles[transformProp] = '';

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);

  // NOTE: DOM access here
  // restores the original style properties after the offsets have been computed
  popperStyles.top = top;
  popperStyles.left = left;
  popperStyles[transformProp] = transform;

  options.boundaries = boundaries;

  var order = options.priority;
  var popper = data.offsets.popper;

  var check = {
    primary: function primary(placement) {
      var value = popper[placement];
      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
        value = Math.max(popper[placement], boundaries[placement]);
      }
      return defineProperty$2({}, placement, value);
    },
    secondary: function secondary(placement) {
      var mainSide = placement === 'right' ? 'left' : 'top';
      var value = popper[mainSide];
      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
      }
      return defineProperty$2({}, mainSide, value);
    }
  };

  order.forEach(function (placement) {
    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
    popper = _extends$7({}, popper, check[side](placement));
  });

  data.offsets.popper = popper;

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function shift(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var shiftvariation = placement.split('-')[1];

  // if shift shiftvariation is specified, run the modifier
  if (shiftvariation) {
    var _data$offsets = data.offsets,
        reference = _data$offsets.reference,
        popper = _data$offsets.popper;

    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
    var side = isVertical ? 'left' : 'top';
    var measurement = isVertical ? 'width' : 'height';

    var shiftOffsets = {
      start: defineProperty$2({}, side, reference[side]),
      end: defineProperty$2({}, side, reference[side] + reference[measurement] - popper[measurement])
    };

    data.offsets.popper = _extends$7({}, popper, shiftOffsets[shiftvariation]);
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function hide(data) {
  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
    return data;
  }

  var refRect = data.offsets.reference;
  var bound = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'preventOverflow';
  }).boundaries;

  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === true) {
      return data;
    }

    data.hide = true;
    data.attributes['x-out-of-boundaries'] = '';
  } else {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === false) {
      return data;
    }

    data.hide = false;
    data.attributes['x-out-of-boundaries'] = false;
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function inner(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;

  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;

  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);

  data.placement = getOppositePlacement(placement);
  data.offsets.popper = getClientRect(popper);

  return data;
}

/**
 * Modifier function, each modifier can have a function of this type assigned
 * to its `fn` property.<br />
 * These functions will be called on each update, this means that you must
 * make sure they are performant enough to avoid performance bottlenecks.
 *
 * @function ModifierFn
 * @argument {dataObject} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {dataObject} The data object, properly modified
 */

/**
 * Modifiers are plugins used to alter the behavior of your poppers.<br />
 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
 * needed by the library.
 *
 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
 * All the other properties are configurations that could be tweaked.
 * @namespace modifiers
 */
var modifiers = {
  /**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */
  shift: {
    /** @prop {number} order=100 - Index used to define the order of execution */
    order: 100,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: shift
  },

  /**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unit-less, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the `height`.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
   *
   * @memberof modifiers
   * @inner
   */
  offset: {
    /** @prop {number} order=200 - Index used to define the order of execution */
    order: 200,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: offset,
    /** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */
    offset: 0
  },

  /**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * A scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" — or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */
  preventOverflow: {
    /** @prop {number} order=300 - Index used to define the order of execution */
    order: 300,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: preventOverflow,
    /**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */
    priority: ['left', 'right', 'top', 'bottom'],
    /**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper. This makes sure the popper always has a little padding
     * between the edges of its container
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier. Can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */
    boundariesElement: 'scrollParent'
  },

  /**
   * Modifier used to make sure the reference and its popper stay near each other
   * without leaving any gap between the two. Especially useful when the arrow is
   * enabled and you want to ensure that it points to its reference element.
   * It cares only about the first axis. You can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */
  keepTogether: {
    /** @prop {number} order=400 - Index used to define the order of execution */
    order: 400,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: keepTogether
  },

  /**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjunction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */
  arrow: {
    /** @prop {number} order=500 - Index used to define the order of execution */
    order: 500,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: arrow,
    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
    element: '[x-arrow]'
  },

  /**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */
  flip: {
    /** @prop {number} order=600 - Index used to define the order of execution */
    order: 600,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: flip,
    /**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations)
     */
    behavior: 'flip',
    /**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position.
     * The popper will never be placed outside of the defined boundaries
     * (except if `keepTogether` is enabled)
     */
    boundariesElement: 'viewport',
    /**
     * @prop {Boolean} flipVariations=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the reference element overlaps its boundaries.
     *
     * The original placement should have a set variation.
     */
    flipVariations: false,
    /**
     * @prop {Boolean} flipVariationsByContent=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the popper element overlaps its reference boundaries.
     *
     * The original placement should have a set variation.
     */
    flipVariationsByContent: false
  },

  /**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */
  inner: {
    /** @prop {number} order=700 - Index used to define the order of execution */
    order: 700,
    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
    enabled: false,
    /** @prop {ModifierFn} */
    fn: inner
  },

  /**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */
  hide: {
    /** @prop {number} order=800 - Index used to define the order of execution */
    order: 800,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: hide
  },

  /**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */
  computeStyle: {
    /** @prop {number} order=850 - Index used to define the order of execution */
    order: 850,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: computeStyle,
    /**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: true,
    /**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */
    x: 'bottom',
    /**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */
    y: 'right'
  },

  /**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define your own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */
  applyStyle: {
    /** @prop {number} order=900 - Index used to define the order of execution */
    order: 900,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: applyStyle,
    /** @prop {Function} */
    onLoad: applyStyleOnLoad,
    /**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: undefined
  }
};

/**
 * The `dataObject` is an object containing all the information used by Popper.js.
 * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
 * @name dataObject
 * @property {Object} data.instance The Popper.js instance
 * @property {String} data.placement Placement applied to popper
 * @property {String} data.originalPlacement Placement originally defined on init
 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
 * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.boundaries Offsets of the popper boundaries
 * @property {Object} data.offsets The measurements of popper, reference and arrow elements
 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
 */

/**
 * Default options provided to Popper.js constructor.<br />
 * These can be overridden using the `options` argument of Popper.js.<br />
 * To override an option, simply pass an object with the same
 * structure of the `options` object, as the 3rd argument. For example:
 * ```
 * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
 * ```
 * @type {Object}
 * @static
 * @memberof Popper
 */
var Defaults = {
  /**
   * Popper's placement.
   * @prop {Popper.placements} placement='bottom'
   */
  placement: 'bottom',

  /**
   * Set this to true if you want popper to position it self in 'fixed' mode
   * @prop {Boolean} positionFixed=false
   */
  positionFixed: false,

  /**
   * Whether events (resize, scroll) are initially enabled.
   * @prop {Boolean} eventsEnabled=true
   */
  eventsEnabled: true,

  /**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */
  removeOnDestroy: false,

  /**
   * Callback called when the popper is created.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */
  onCreate: function onCreate() {},

  /**
   * Callback called when the popper is updated. This callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */
  onUpdate: function onUpdate() {},

  /**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js.
   * @prop {modifiers}
   */
  modifiers: modifiers
};

/**
 * @callback onCreate
 * @param {dataObject} data
 */

/**
 * @callback onUpdate
 * @param {dataObject} data
 */

// Utils
// Methods
var Popper = function () {
  /**
   * Creates a new Popper.js instance.
   * @class Popper
   * @param {Element|referenceObject} reference - The reference element used to position the popper
   * @param {Element} popper - The HTML / XML element used as the popper
   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
   * @return {Object} instance - The generated Popper.js instance
   */
  function Popper(reference, popper) {
    var _this = this;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    classCallCheck(this, Popper);

    this.scheduleUpdate = function () {
      return requestAnimationFrame(_this.update);
    };

    // make update() debounced, so that it only runs at most once-per-tick
    this.update = debounce$1(this.update.bind(this));

    // with {} we create a new object with the options inside it
    this.options = _extends$7({}, Popper.Defaults, options);

    // init state
    this.state = {
      isDestroyed: false,
      isCreated: false,
      scrollParents: []
    };

    // get reference and popper elements (allow jQuery wrappers)
    this.reference = reference && reference.jquery ? reference[0] : reference;
    this.popper = popper && popper.jquery ? popper[0] : popper;

    // Deep merge modifiers options
    this.options.modifiers = {};
    Object.keys(_extends$7({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
      _this.options.modifiers[name] = _extends$7({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
    });

    // Refactoring modifiers' list (Object => Array)
    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
      return _extends$7({
        name: name
      }, _this.options.modifiers[name]);
    })
    // sort the modifiers by order
    .sort(function (a, b) {
      return a.order - b.order;
    });

    // modifiers have the ability to execute arbitrary code when Popper.js get inited
    // such code is executed in the same order of its modifier
    // they could add new properties to their options configuration
    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
    this.modifiers.forEach(function (modifierOptions) {
      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
      }
    });

    // fire the first update to position the popper in the right place
    this.update();

    var eventsEnabled = this.options.eventsEnabled;
    if (eventsEnabled) {
      // setup event listeners, they will take care of update the position in specific situations
      this.enableEventListeners();
    }

    this.state.eventsEnabled = eventsEnabled;
  }

  // We can't use class properties because they don't get listed in the
  // class prototype and break stuff like Sinon stubs


  createClass$1(Popper, [{
    key: 'update',
    value: function update$$1() {
      return update$1.call(this);
    }
  }, {
    key: 'destroy',
    value: function destroy$$1() {
      return destroy.call(this);
    }
  }, {
    key: 'enableEventListeners',
    value: function enableEventListeners$$1() {
      return enableEventListeners.call(this);
    }
  }, {
    key: 'disableEventListeners',
    value: function disableEventListeners$$1() {
      return disableEventListeners.call(this);
    }

    /**
     * Schedules an update. It will run on the next UI update available.
     * @method scheduleUpdate
     * @memberof Popper
     */


    /**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */

  }]);
  return Popper;
}();

/**
 * The `referenceObject` is an object that provides an interface compatible with Popper.js
 * and lets you use it as replacement of a real DOM node.<br />
 * You can use this method to position a popper relatively to a set of coordinates
 * in case you don't have a DOM node to use as reference.
 *
 * ```
 * new Popper(referenceObject, popperNode);
 * ```
 *
 * NB: This feature isn't supported in Internet Explorer 10.
 * @name referenceObject
 * @property {Function} data.getBoundingClientRect
 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
 * @property {number} data.clientWidth
 * An ES6 getter that will return the width of the virtual reference element.
 * @property {number} data.clientHeight
 * An ES6 getter that will return the height of the virtual reference element.
 */


Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
Popper.placements = placements;
Popper.Defaults = Defaults;

function getContainer(container) {
  container = typeof container === 'function' ? container() : container; // #StrictMode ready

  return findDOMNode(container);
}

var useEnhancedEffect$4 = typeof window !== 'undefined' ? useLayoutEffect : useEffect;
/**
 * Portals provide a first-class way to render children into a DOM node
 * that exists outside the DOM hierarchy of the parent component.
 */

var Portal$2 = /*#__PURE__*/forwardRef(function Portal(props, ref) {
  var children = props.children,
      container = props.container,
      _props$disablePortal = props.disablePortal,
      disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,
      onRendered = props.onRendered;

  var _React$useState = useState(null),
      mountNode = _React$useState[0],
      setMountNode = _React$useState[1];

  var handleRef = useForkRef( /*#__PURE__*/isValidElement(children) ? children.ref : null, ref);
  useEnhancedEffect$4(function () {
    if (!disablePortal) {
      setMountNode(getContainer(container) || document.body);
    }
  }, [container, disablePortal]);
  useEnhancedEffect$4(function () {
    if (mountNode && !disablePortal) {
      setRef(ref, mountNode);
      return function () {
        setRef(ref, null);
      };
    }

    return undefined;
  }, [ref, mountNode, disablePortal]);
  useEnhancedEffect$4(function () {
    if (onRendered && (mountNode || disablePortal)) {
      onRendered();
    }
  }, [onRendered, mountNode, disablePortal]);

  if (disablePortal) {
    if ( /*#__PURE__*/isValidElement(children)) {
      return /*#__PURE__*/cloneElement(children, {
        ref: handleRef
      });
    }

    return children;
  }

  return mountNode ? /*#__PURE__*/createPortal(children, mountNode) : mountNode;
});
process.env.NODE_ENV !== "production" ? Portal$2.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * The children to render into the `container`.
   */
  children: propTypes.node,

  /**
   * A HTML element, component instance, or function that returns either.
   * The `container` will have the portal children appended to it.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: propTypes
  /* @typescript-to-proptypes-ignore */
  .oneOfType([utils.HTMLElementType, propTypes.instanceOf(Component), propTypes.func]),

  /**
   * Disable the portal behavior.
   * The children stay within it's parent DOM hierarchy.
   */
  disablePortal: propTypes.bool,

  /**
   * Callback fired once the children has been mounted into the `container`.
   *
   * This prop will be deprecated and removed in v5, the ref can be used instead.
   */
  onRendered: propTypes.func
} : void 0;

if (process.env.NODE_ENV !== 'production') {
  // eslint-disable-next-line
  Portal$2['propTypes' + ''] = utils.exactProp(Portal$2.propTypes);
}

function flipPlacement(placement, theme) {
  var direction = theme && theme.direction || 'ltr';

  if (direction === 'ltr') {
    return placement;
  }

  switch (placement) {
    case 'bottom-end':
      return 'bottom-start';

    case 'bottom-start':
      return 'bottom-end';

    case 'top-end':
      return 'top-start';

    case 'top-start':
      return 'top-end';

    default:
      return placement;
  }
}

function getAnchorEl(anchorEl) {
  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
}

var useEnhancedEffect$5 = typeof window !== 'undefined' ? useLayoutEffect : useEffect;
var defaultPopperOptions = {};
/**
 * Poppers rely on the 3rd party library [Popper.js](https://popper.js.org/docs/v1/) for positioning.
 */

var Popper$1 = /*#__PURE__*/forwardRef(function Popper$1(props, ref) {
  var anchorEl = props.anchorEl,
      children = props.children,
      container = props.container,
      _props$disablePortal = props.disablePortal,
      disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,
      _props$keepMounted = props.keepMounted,
      keepMounted = _props$keepMounted === void 0 ? false : _props$keepMounted,
      modifiers = props.modifiers,
      open = props.open,
      _props$placement = props.placement,
      initialPlacement = _props$placement === void 0 ? 'bottom' : _props$placement,
      _props$popperOptions = props.popperOptions,
      popperOptions = _props$popperOptions === void 0 ? defaultPopperOptions : _props$popperOptions,
      popperRefProp = props.popperRef,
      style = props.style,
      _props$transition = props.transition,
      transition = _props$transition === void 0 ? false : _props$transition,
      other = _objectWithoutProperties$1(props, ["anchorEl", "children", "container", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition"]);

  var tooltipRef = useRef(null);
  var ownRef = useForkRef(tooltipRef, ref);
  var popperRef = useRef(null);
  var handlePopperRef = useForkRef(popperRef, popperRefProp);
  var handlePopperRefRef = useRef(handlePopperRef);
  useEnhancedEffect$5(function () {
    handlePopperRefRef.current = handlePopperRef;
  }, [handlePopperRef]);
  useImperativeHandle(popperRefProp, function () {
    return popperRef.current;
  }, []);

  var _React$useState = useState(true),
      exited = _React$useState[0],
      setExited = _React$useState[1];

  var theme = useTheme();
  var rtlPlacement = flipPlacement(initialPlacement, theme);
  /**
   * placement initialized from prop but can change during lifetime if modifiers.flip.
   * modifiers.flip is essentially a flip for controlled/uncontrolled behavior
   */

  var _React$useState2 = useState(rtlPlacement),
      placement = _React$useState2[0],
      setPlacement = _React$useState2[1];

  useEffect(function () {
    if (popperRef.current) {
      popperRef.current.update();
    }
  });
  var handleOpen = useCallback(function () {
    if (!tooltipRef.current || !anchorEl || !open) {
      return;
    }

    if (popperRef.current) {
      popperRef.current.destroy();
      handlePopperRefRef.current(null);
    }

    var handlePopperUpdate = function handlePopperUpdate(data) {
      setPlacement(data.placement);
    };

    var resolvedAnchorEl = getAnchorEl(anchorEl);

    if (process.env.NODE_ENV !== 'production') {
      if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
        var box = resolvedAnchorEl.getBoundingClientRect();

        if (process.env.NODE_ENV !== 'test' && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          console.warn(['Material-UI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
        }
      }
    }

    var popper = new Popper(getAnchorEl(anchorEl), tooltipRef.current, _extends$1({
      placement: rtlPlacement
    }, popperOptions, {
      modifiers: _extends$1({}, disablePortal ? {} : {
        // It's using scrollParent by default, we can use the viewport when using a portal.
        preventOverflow: {
          boundariesElement: 'window'
        }
      }, modifiers, popperOptions.modifiers),
      // We could have been using a custom modifier like react-popper is doing.
      // But it seems this is the best public API for this use case.
      onCreate: createChainedFunction(handlePopperUpdate, popperOptions.onCreate),
      onUpdate: createChainedFunction(handlePopperUpdate, popperOptions.onUpdate)
    }));
    handlePopperRefRef.current(popper);
  }, [anchorEl, disablePortal, modifiers, open, rtlPlacement, popperOptions]);
  var handleRef = useCallback(function (node) {
    setRef(ownRef, node);
    handleOpen();
  }, [ownRef, handleOpen]);

  var handleEnter = function handleEnter() {
    setExited(false);
  };

  var handleClose = function handleClose() {
    if (!popperRef.current) {
      return;
    }

    popperRef.current.destroy();
    handlePopperRefRef.current(null);
  };

  var handleExited = function handleExited() {
    setExited(true);
    handleClose();
  };

  useEffect(function () {
    return function () {
      handleClose();
    };
  }, []);
  useEffect(function () {
    if (!open && !transition) {
      // Otherwise handleExited will call this.
      handleClose();
    }
  }, [open, transition]);

  if (!keepMounted && !open && (!transition || exited)) {
    return null;
  }

  var childProps = {
    placement: placement
  };

  if (transition) {
    childProps.TransitionProps = {
      in: open,
      onEnter: handleEnter,
      onExited: handleExited
    };
  }

  return /*#__PURE__*/createElement(Portal$2, {
    disablePortal: disablePortal,
    container: container
  }, /*#__PURE__*/createElement("div", _extends$1({
    ref: handleRef,
    role: "tooltip"
  }, other, {
    style: _extends$1({
      // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
      position: 'fixed',
      // Fix Popper.js display issue
      top: 0,
      left: 0,
      display: !open && keepMounted && !transition ? 'none' : null
    }, style)
  }), typeof children === 'function' ? children(childProps) : children));
});
process.env.NODE_ENV !== "production" ? Popper$1.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * A HTML element, [referenceObject](https://popper.js.org/docs/v1/#referenceObject),
   * or a function that returns either.
   * It's used to set the position of the popper.
   * The return value will passed as the reference object of the Popper instance.
   */
  anchorEl: utils.chainPropTypes(propTypes.oneOfType([utils.HTMLElementType, propTypes.object, propTypes.func]), function (props) {
    if (props.open) {
      var resolvedAnchorEl = getAnchorEl(props.anchorEl);

      if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
        var box = resolvedAnchorEl.getBoundingClientRect();

        if (process.env.NODE_ENV !== 'test' && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          return new Error(['Material-UI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
        }
      } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.clientWidth !== 'number' || typeof resolvedAnchorEl.clientHeight !== 'number' || typeof resolvedAnchorEl.getBoundingClientRect !== 'function') {
        return new Error(['Material-UI: The `anchorEl` prop provided to the component is invalid.', 'It should be an HTML element instance or a referenceObject ', '(https://popper.js.org/docs/v1/#referenceObject).'].join('\n'));
      }
    }

    return null;
  }),

  /**
   * Popper render function or node.
   */
  children: propTypes
  /* @typescript-to-proptypes-ignore */
  .oneOfType([propTypes.node, propTypes.func]).isRequired,

  /**
   * A HTML element, component instance, or function that returns either.
   * The `container` will have the portal children appended to it.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: propTypes
  /* @typescript-to-proptypes-ignore */
  .oneOfType([utils.HTMLElementType, propTypes.instanceOf(Component), propTypes.func]),

  /**
   * Disable the portal behavior.
   * The children stay within it's parent DOM hierarchy.
   */
  disablePortal: propTypes.bool,

  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   */
  keepMounted: propTypes.bool,

  /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v1/#modifiers).
   */
  modifiers: propTypes.object,

  /**
   * If `true`, the popper is visible.
   */
  open: propTypes.bool.isRequired,

  /**
   * Popper placement.
   */
  placement: propTypes.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),

  /**
   * Options provided to the [`popper.js`](https://popper.js.org/docs/v1/) instance.
   */
  popperOptions: propTypes.object,

  /**
   * A ref that points to the used popper instance.
   */
  popperRef: utils.refType,

  /**
   * @ignore
   */
  style: propTypes.object,

  /**
   * Help supporting a react-transition-group/Transition component.
   */
  transition: propTypes.bool
} : void 0;

function round$1(value) {
  return Math.round(value * 1e5) / 1e5;
}

function arrowGenerator() {
  return {
    '&[x-placement*="bottom"] $arrow': {
      top: 0,
      left: 0,
      marginTop: '-0.71em',
      marginLeft: 4,
      marginRight: 4,
      '&::before': {
        transformOrigin: '0 100%'
      }
    },
    '&[x-placement*="top"] $arrow': {
      bottom: 0,
      left: 0,
      marginBottom: '-0.71em',
      marginLeft: 4,
      marginRight: 4,
      '&::before': {
        transformOrigin: '100% 0'
      }
    },
    '&[x-placement*="right"] $arrow': {
      left: 0,
      marginLeft: '-0.71em',
      height: '1em',
      width: '0.71em',
      marginTop: 4,
      marginBottom: 4,
      '&::before': {
        transformOrigin: '100% 100%'
      }
    },
    '&[x-placement*="left"] $arrow': {
      right: 0,
      marginRight: '-0.71em',
      height: '1em',
      width: '0.71em',
      marginTop: 4,
      marginBottom: 4,
      '&::before': {
        transformOrigin: '0 0'
      }
    }
  };
}

var styles$a = function styles(theme) {
  return {
    /* Styles applied to the Popper component. */
    popper: {
      zIndex: theme.zIndex.tooltip,
      pointerEvents: 'none' // disable jss-rtl plugin

    },

    /* Styles applied to the Popper component if `interactive={true}`. */
    popperInteractive: {
      pointerEvents: 'auto'
    },

    /* Styles applied to the Popper component if `arrow={true}`. */
    popperArrow: arrowGenerator(),

    /* Styles applied to the tooltip (label wrapper) element. */
    tooltip: {
      backgroundColor: fade(theme.palette.grey[700], 0.9),
      borderRadius: theme.shape.borderRadius,
      color: theme.palette.common.white,
      fontFamily: theme.typography.fontFamily,
      padding: '4px 8px',
      fontSize: theme.typography.pxToRem(10),
      lineHeight: "".concat(round$1(14 / 10), "em"),
      maxWidth: 300,
      wordWrap: 'break-word',
      fontWeight: theme.typography.fontWeightMedium
    },

    /* Styles applied to the tooltip (label wrapper) element if `arrow={true}`. */
    tooltipArrow: {
      position: 'relative',
      margin: '0'
    },

    /* Styles applied to the arrow element. */
    arrow: {
      overflow: 'hidden',
      position: 'absolute',
      width: '1em',
      height: '0.71em'
      /* = width / sqrt(2) = (length of the hypotenuse) */
      ,
      boxSizing: 'border-box',
      color: fade(theme.palette.grey[700], 0.9),
      '&::before': {
        content: '""',
        margin: 'auto',
        display: 'block',
        width: '100%',
        height: '100%',
        backgroundColor: 'currentColor',
        transform: 'rotate(45deg)'
      }
    },

    /* Styles applied to the tooltip (label wrapper) element if the tooltip is opened by touch. */
    touch: {
      padding: '8px 16px',
      fontSize: theme.typography.pxToRem(14),
      lineHeight: "".concat(round$1(16 / 14), "em"),
      fontWeight: theme.typography.fontWeightRegular
    },

    /* Styles applied to the tooltip (label wrapper) element if `placement` contains "left". */
    tooltipPlacementLeft: _defineProperty$1({
      transformOrigin: 'right center',
      margin: '0 24px '
    }, theme.breakpoints.up('sm'), {
      margin: '0 14px'
    }),

    /* Styles applied to the tooltip (label wrapper) element if `placement` contains "right". */
    tooltipPlacementRight: _defineProperty$1({
      transformOrigin: 'left center',
      margin: '0 24px'
    }, theme.breakpoints.up('sm'), {
      margin: '0 14px'
    }),

    /* Styles applied to the tooltip (label wrapper) element if `placement` contains "top". */
    tooltipPlacementTop: _defineProperty$1({
      transformOrigin: 'center bottom',
      margin: '24px 0'
    }, theme.breakpoints.up('sm'), {
      margin: '14px 0'
    }),

    /* Styles applied to the tooltip (label wrapper) element if `placement` contains "bottom". */
    tooltipPlacementBottom: _defineProperty$1({
      transformOrigin: 'center top',
      margin: '24px 0'
    }, theme.breakpoints.up('sm'), {
      margin: '14px 0'
    })
  };
};
var hystersisOpen = false;
var hystersisTimer = null;
var Tooltip = /*#__PURE__*/forwardRef(function Tooltip(props, ref) {
  var _props$arrow = props.arrow,
      arrow = _props$arrow === void 0 ? false : _props$arrow,
      children = props.children,
      classes = props.classes,
      _props$disableFocusLi = props.disableFocusListener,
      disableFocusListener = _props$disableFocusLi === void 0 ? false : _props$disableFocusLi,
      _props$disableHoverLi = props.disableHoverListener,
      disableHoverListener = _props$disableHoverLi === void 0 ? false : _props$disableHoverLi,
      _props$disableTouchLi = props.disableTouchListener,
      disableTouchListener = _props$disableTouchLi === void 0 ? false : _props$disableTouchLi,
      _props$enterDelay = props.enterDelay,
      enterDelay = _props$enterDelay === void 0 ? 100 : _props$enterDelay,
      _props$enterNextDelay = props.enterNextDelay,
      enterNextDelay = _props$enterNextDelay === void 0 ? 0 : _props$enterNextDelay,
      _props$enterTouchDela = props.enterTouchDelay,
      enterTouchDelay = _props$enterTouchDela === void 0 ? 700 : _props$enterTouchDela,
      idProp = props.id,
      _props$interactive = props.interactive,
      interactive = _props$interactive === void 0 ? false : _props$interactive,
      _props$leaveDelay = props.leaveDelay,
      leaveDelay = _props$leaveDelay === void 0 ? 0 : _props$leaveDelay,
      _props$leaveTouchDela = props.leaveTouchDelay,
      leaveTouchDelay = _props$leaveTouchDela === void 0 ? 1500 : _props$leaveTouchDela,
      onClose = props.onClose,
      onOpen = props.onOpen,
      openProp = props.open,
      _props$placement = props.placement,
      placement = _props$placement === void 0 ? 'bottom' : _props$placement,
      _props$PopperComponen = props.PopperComponent,
      PopperComponent = _props$PopperComponen === void 0 ? Popper$1 : _props$PopperComponen,
      PopperProps = props.PopperProps,
      title = props.title,
      _props$TransitionComp = props.TransitionComponent,
      TransitionComponent = _props$TransitionComp === void 0 ? Grow : _props$TransitionComp,
      TransitionProps = props.TransitionProps,
      other = _objectWithoutProperties$1(props, ["arrow", "children", "classes", "disableFocusListener", "disableHoverListener", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "id", "interactive", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperComponent", "PopperProps", "title", "TransitionComponent", "TransitionProps"]);

  var theme = useTheme$1();

  var _React$useState = useState(),
      childNode = _React$useState[0],
      setChildNode = _React$useState[1];

  var _React$useState2 = useState(null),
      arrowRef = _React$useState2[0],
      setArrowRef = _React$useState2[1];

  var ignoreNonTouchEvents = useRef(false);
  var closeTimer = useRef();
  var enterTimer = useRef();
  var leaveTimer = useRef();
  var touchTimer = useRef();

  var _useControlled = useControlled({
    controlled: openProp,
    default: false,
    name: 'Tooltip',
    state: 'open'
  }),
      _useControlled2 = _slicedToArray$2(_useControlled, 2),
      openState = _useControlled2[0],
      setOpenState = _useControlled2[1];

  var open = openState;

  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    var _React$useRef = useRef(openProp !== undefined),
        isControlled = _React$useRef.current; // eslint-disable-next-line react-hooks/rules-of-hooks


    useEffect(function () {
      if (childNode && childNode.disabled && !isControlled && title !== '' && childNode.tagName.toLowerCase() === 'button') {
        console.error(['Material-UI: You are providing a disabled `button` child to the Tooltip component.', 'A disabled element does not fire events.', "Tooltip needs to listen to the child element's events to display the title.", '', 'Add a simple wrapper element, such as a `span`.'].join('\n'));
      }
    }, [title, childNode, isControlled]);
  }

  var id = useId(idProp);
  useEffect(function () {
    return function () {
      clearTimeout(closeTimer.current);
      clearTimeout(enterTimer.current);
      clearTimeout(leaveTimer.current);
      clearTimeout(touchTimer.current);
    };
  }, []);

  var handleOpen = function handleOpen(event) {
    clearTimeout(hystersisTimer);
    hystersisOpen = true; // The mouseover event will trigger for every nested element in the tooltip.
    // We can skip rerendering when the tooltip is already open.
    // We are using the mouseover event instead of the mouseenter event to fix a hide/show issue.

    setOpenState(true);

    if (onOpen) {
      onOpen(event);
    }
  };

  var handleEnter = function handleEnter() {
    var forward = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    return function (event) {
      var childrenProps = children.props;

      if (event.type === 'mouseover' && childrenProps.onMouseOver && forward) {
        childrenProps.onMouseOver(event);
      }

      if (ignoreNonTouchEvents.current && event.type !== 'touchstart') {
        return;
      } // Remove the title ahead of time.
      // We don't want to wait for the next render commit.
      // We would risk displaying two tooltips at the same time (native + this one).


      if (childNode) {
        childNode.removeAttribute('title');
      }

      clearTimeout(enterTimer.current);
      clearTimeout(leaveTimer.current);

      if (enterDelay || hystersisOpen && enterNextDelay) {
        event.persist();
        enterTimer.current = setTimeout(function () {
          handleOpen(event);
        }, hystersisOpen ? enterNextDelay : enterDelay);
      } else {
        handleOpen(event);
      }
    };
  };

  var _useIsFocusVisible = useIsFocusVisible(),
      isFocusVisible = _useIsFocusVisible.isFocusVisible,
      onBlurVisible = _useIsFocusVisible.onBlurVisible,
      focusVisibleRef = _useIsFocusVisible.ref;

  var _React$useState3 = useState(false),
      childIsFocusVisible = _React$useState3[0],
      setChildIsFocusVisible = _React$useState3[1];

  var handleBlur = function handleBlur() {
    if (childIsFocusVisible) {
      setChildIsFocusVisible(false);
      onBlurVisible();
    }
  };

  var handleFocus = function handleFocus() {
    var forward = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    return function (event) {
      // Workaround for https://github.com/facebook/react/issues/7769
      // The autoFocus of React might trigger the event before the componentDidMount.
      // We need to account for this eventuality.
      if (!childNode) {
        setChildNode(event.currentTarget);
      }

      if (isFocusVisible(event)) {
        setChildIsFocusVisible(true);
        handleEnter()(event);
      }

      var childrenProps = children.props;

      if (childrenProps.onFocus && forward) {
        childrenProps.onFocus(event);
      }
    };
  };

  var handleClose = function handleClose(event) {
    clearTimeout(hystersisTimer);
    hystersisTimer = setTimeout(function () {
      hystersisOpen = false;
    }, 800 + leaveDelay);
    setOpenState(false);

    if (onClose) {
      onClose(event);
    }

    clearTimeout(closeTimer.current);
    closeTimer.current = setTimeout(function () {
      ignoreNonTouchEvents.current = false;
    }, theme.transitions.duration.shortest);
  };

  var handleLeave = function handleLeave() {
    var forward = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    return function (event) {
      var childrenProps = children.props;

      if (event.type === 'blur') {
        if (childrenProps.onBlur && forward) {
          childrenProps.onBlur(event);
        }

        handleBlur();
      }

      if (event.type === 'mouseleave' && childrenProps.onMouseLeave && event.currentTarget === childNode) {
        childrenProps.onMouseLeave(event);
      }

      clearTimeout(enterTimer.current);
      clearTimeout(leaveTimer.current);
      event.persist();
      leaveTimer.current = setTimeout(function () {
        handleClose(event);
      }, leaveDelay);
    };
  };

  var detectTouchStart = function detectTouchStart(event) {
    ignoreNonTouchEvents.current = true;
    var childrenProps = children.props;

    if (childrenProps.onTouchStart) {
      childrenProps.onTouchStart(event);
    }
  };

  var handleTouchStart = function handleTouchStart(event) {
    detectTouchStart(event);
    clearTimeout(leaveTimer.current);
    clearTimeout(closeTimer.current);
    clearTimeout(touchTimer.current);
    event.persist();
    touchTimer.current = setTimeout(function () {
      handleEnter()(event);
    }, enterTouchDelay);
  };

  var handleTouchEnd = function handleTouchEnd(event) {
    if (children.props.onTouchEnd) {
      children.props.onTouchEnd(event);
    }

    clearTimeout(touchTimer.current);
    clearTimeout(leaveTimer.current);
    event.persist();
    leaveTimer.current = setTimeout(function () {
      handleClose(event);
    }, leaveTouchDelay);
  };

  var handleUseRef = useForkRef(setChildNode, ref);
  var handleFocusRef = useForkRef(focusVisibleRef, handleUseRef); // can be removed once we drop support for non ref forwarding class components

  var handleOwnRef = useCallback(function (instance) {
    // #StrictMode ready
    setRef(handleFocusRef, findDOMNode(instance));
  }, [handleFocusRef]);
  var handleRef = useForkRef(children.ref, handleOwnRef); // There is no point in displaying an empty tooltip.

  if (title === '') {
    open = false;
  } // For accessibility and SEO concerns, we render the title to the DOM node when
  // the tooltip is hidden. However, we have made a tradeoff when
  // `disableHoverListener` is set. This title logic is disabled.
  // It's allowing us to keep the implementation size minimal.
  // We are open to change the tradeoff.


  var shouldShowNativeTitle = !open && !disableHoverListener;

  var childrenProps = _extends$1({
    'aria-describedby': open ? id : null,
    title: shouldShowNativeTitle && typeof title === 'string' ? title : null
  }, other, children.props, {
    className: clsx(other.className, children.props.className),
    onTouchStart: detectTouchStart,
    ref: handleRef
  });

  var interactiveWrapperListeners = {};

  if (!disableTouchListener) {
    childrenProps.onTouchStart = handleTouchStart;
    childrenProps.onTouchEnd = handleTouchEnd;
  }

  if (!disableHoverListener) {
    childrenProps.onMouseOver = handleEnter();
    childrenProps.onMouseLeave = handleLeave();

    if (interactive) {
      interactiveWrapperListeners.onMouseOver = handleEnter(false);
      interactiveWrapperListeners.onMouseLeave = handleLeave(false);
    }
  }

  if (!disableFocusListener) {
    childrenProps.onFocus = handleFocus();
    childrenProps.onBlur = handleLeave();

    if (interactive) {
      interactiveWrapperListeners.onFocus = handleFocus(false);
      interactiveWrapperListeners.onBlur = handleLeave(false);
    }
  }

  if (process.env.NODE_ENV !== 'production') {
    if (children.props.title) {
      console.error(['Material-UI: You have provided a `title` prop to the child of <Tooltip />.', "Remove this title prop `".concat(children.props.title, "` or the Tooltip component.")].join('\n'));
    }
  }

  var mergedPopperProps = useMemo(function () {
    return utils.deepmerge({
      popperOptions: {
        modifiers: {
          arrow: {
            enabled: Boolean(arrowRef),
            element: arrowRef
          }
        }
      }
    }, PopperProps);
  }, [arrowRef, PopperProps]);
  return /*#__PURE__*/createElement(Fragment$2, null, /*#__PURE__*/cloneElement(children, childrenProps), /*#__PURE__*/createElement(PopperComponent, _extends$1({
    className: clsx(classes.popper, interactive && classes.popperInteractive, arrow && classes.popperArrow),
    placement: placement,
    anchorEl: childNode,
    open: childNode ? open : false,
    id: childrenProps['aria-describedby'],
    transition: true
  }, interactiveWrapperListeners, mergedPopperProps), function (_ref) {
    var placementInner = _ref.placement,
        TransitionPropsInner = _ref.TransitionProps;
    return /*#__PURE__*/createElement(TransitionComponent, _extends$1({
      timeout: theme.transitions.duration.shorter
    }, TransitionPropsInner, TransitionProps), /*#__PURE__*/createElement("div", {
      className: clsx(classes.tooltip, classes["tooltipPlacement".concat(capitalize(placementInner.split('-')[0]))], ignoreNonTouchEvents.current && classes.touch, arrow && classes.tooltipArrow)
    }, title, arrow ? /*#__PURE__*/createElement("span", {
      className: classes.arrow,
      ref: setArrowRef
    }) : null));
  }));
});
process.env.NODE_ENV !== "production" ? Tooltip.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * If `true`, adds an arrow to the tooltip.
   */
  arrow: propTypes.bool,

  /**
   * Tooltip reference element.
   */
  children: utils.elementAcceptingRef.isRequired,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: propTypes.object,

  /**
   * @ignore
   */
  className: propTypes.string,

  /**
   * Do not respond to focus events.
   */
  disableFocusListener: propTypes.bool,

  /**
   * Do not respond to hover events.
   */
  disableHoverListener: propTypes.bool,

  /**
   * Do not respond to long press touch events.
   */
  disableTouchListener: propTypes.bool,

  /**
   * The number of milliseconds to wait before showing the tooltip.
   * This prop won't impact the enter touch delay (`enterTouchDelay`).
   */
  enterDelay: propTypes.number,

  /**
   * The number of milliseconds to wait before showing the tooltip when one was already recently opened.
   */
  enterNextDelay: propTypes.number,

  /**
   * The number of milliseconds a user must touch the element before showing the tooltip.
   */
  enterTouchDelay: propTypes.number,

  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: propTypes.string,

  /**
   * Makes a tooltip interactive, i.e. will not close when the user
   * hovers over the tooltip before the `leaveDelay` is expired.
   */
  interactive: propTypes.bool,

  /**
   * The number of milliseconds to wait before hiding the tooltip.
   * This prop won't impact the leave touch delay (`leaveTouchDelay`).
   */
  leaveDelay: propTypes.number,

  /**
   * The number of milliseconds after the user stops touching an element before hiding the tooltip.
   */
  leaveTouchDelay: propTypes.number,

  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {object} event The event source of the callback.
   */
  onClose: propTypes.func,

  /**
   * Callback fired when the component requests to be open.
   *
   * @param {object} event The event source of the callback.
   */
  onOpen: propTypes.func,

  /**
   * If `true`, the tooltip is shown.
   */
  open: propTypes.bool,

  /**
   * Tooltip placement.
   */
  placement: propTypes.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),

  /**
   * The component used for the popper.
   */
  PopperComponent: propTypes.elementType,

  /**
   * Props applied to the [`Popper`](/api/popper/) element.
   */
  PopperProps: propTypes.object,

  /**
   * Tooltip title. Zero-length titles string are never displayed.
   */
  title: propTypes
  /* @typescript-to-proptypes-ignore */
  .node.isRequired,

  /**
   * The component used for the transition.
   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   */
  TransitionComponent: propTypes.elementType,

  /**
   * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.
   */
  TransitionProps: propTypes.object
} : void 0;
var Tooltip$1 = withStyles$1(styles$a, {
  name: 'MuiTooltip',
  flip: false
})(Tooltip);

var EllipsisCell = function EllipsisCell(_ref) {
  var value = _ref.value,
      width = _ref.width,
      children = _ref.children;

  var _useState = useState(),
      ref = _useState[0],
      setRef = _useState[1];

  var _useState2 = useState(false),
      isEllipsis = _useState2[0],
      setIsEllipsis = _useState2[1];

  useLayoutEffect(function () {
    if (!ref) {
      return;
    }

    setIsEllipsis(ref.offsetWidth < ref.scrollWidth);
  }, [ref, value, width]);
  var result = children || value;
  return React.createElement("div", {
    ref: function ref(node) {
      return node && setRef(node);
    },
    key: value,
    className: "rocket-chart-ellipsisCell",
    style: {
      width: width || ''
    }
  }, isEllipsis ? React.createElement(Tooltip$1, {
    arrow: true,
    placement: "top",
    title: value,
    interactive: true,
    classes: {
      tooltip: 'rocket-tooltips'
    }
  }, React.createElement("div", null, result)) : result);
};

var emptyValue = '--';
var abbrList = [{
  unit: '亿',
  number: 10000 * 10000
}, {
  unit: '万',
  number: 10000
}];
numeral.nullFormat(emptyValue); // 小数格式化

var decimalPlace = function decimalPlace(place) {
  if (place === void 0) {
    place = 0;
  }

  return '.'.padEnd((place > 10 ? 10 : place) + 1, '0');
};

var isEmpty = function isEmpty(value) {
  return !value && value !== 0;
}; // 字符串展示


var renderString = function renderString(value) {
  return !isEmpty(value) ? value.toString() : '';
}; // 备份
// place = 10，默认最多10位小数


var renderNumber = function renderNumber(value, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$place = _ref.place,
      place = _ref$place === void 0 ? 10 : _ref$place;

  if (isEmpty(value)) return emptyValue;
  var val = numeral(value).format("0,0" + '.['.padEnd((place > 10 ? 10 : place) + 2, '0') + "]");
  return val === emptyValue ? value : val;
}; // 整数


var renderInteger = function renderInteger(value) {
  return numeral(value).format('0,0');
}; // 保留两位小数


var renderDecimal = function renderDecimal(value, _temp2) {
  var _ref2 = _temp2 === void 0 ? {} : _temp2,
      _ref2$place = _ref2.place,
      place = _ref2$place === void 0 ? 2 : _ref2$place;

  return numeral(value).format("0,0" + decimalPlace(place));
}; // 百分比展示


var renderPercent = function renderPercent(value, _temp3) {
  var _ref3 = _temp3 === void 0 ? {} : _temp3,
      _ref3$place = _ref3.place,
      place = _ref3$place === void 0 ? 2 : _ref3$place;

  return numeral(value).format("0" + decimalPlace(place) + "%");
}; // 中文缩写


var renderNumberAbbr = function renderNumberAbbr(value, params) {
  if (isEmpty(value)) return emptyValue;

  var _ref4 = params || {},
      _ref4$maxValue = _ref4.maxValue,
      maxValue = _ref4$maxValue === void 0 ? 0 : _ref4$maxValue;

  var unit = '';
  var newValue = value;
  maxValue = maxValue || value;
  abbrList.some(function (abbr) {
    if (maxValue < abbr.number) return false;
    unit = abbr.unit;
    newValue = Number(value) / abbr.number;
    return true;
  });
  return renderNumber(newValue) + unit;
};

var getFormatter = function getFormatter(format) {
  if (format === void 0) {
    format = '';
  }

  var res = format.match(/\.(\d)([\S]+)/);

  if (res && res[1] && res[2]) {
    var place = res[1];
    var type = res[2];
    var fun = renderNumeralMap[type] || renderNumeralMap['string'];
    return function (value) {
      return fun(value, {
        place: +place
      });
    };
  }

  return renderNumeralMap[format] || renderNumeralMap['string'];
};

var renderNumeralMap = {
  number: renderNumber,
  decimal: renderDecimal,
  integer: renderInteger,
  percent: renderPercent,
  string: renderString,
  abbr: renderNumberAbbr
};

var Summary = function Summary(Props, ref) {
  var renderData = Props.renderData,
      summary = Props.summary,
      isSummary = Props.isSummary,
      isLocked = Props.isLocked,
      lockList = Props.lockList,
      style = Props.style,
      scrollX = Props.scrollX,
      sizes = Props.sizes;
  var columnCount = renderData.columns.length;

  if (!isSummary || !summary || !columnCount) {
    return null;
  }

  var summaryObjs = summary.map(function (text, i) {
    var _renderData$columns$i = renderData.columns[i],
        align = _renderData$columns$i.align,
        formatter = _renderData$columns$i.formatter;
    return {
      text: getFormatter(formatter)(text),
      size: sizes[i],
      align: align
    };
  });
  var leftSummary = [];
  var rightSummary = [];

  if (isLocked && lockList && renderData.columns.length > 1) {
    var lockString = '';
    renderData.columns.forEach(function (item) {
      lockString += lockList.includes(item.name) ? '1' : '0';
    });
    var list = lockString.split('0');
    var leftList = list[0];
    var rightList = list[list.length - 1];
    leftSummary = summaryObjs.slice(0, leftList.length);
    rightSummary = summaryObjs.slice(summaryObjs.length - rightList.length, summaryObjs.length);
  }

  var renderItems = function renderItems(list) {
    if (!list.length) {
      return null;
    }

    return list.map(function (item, i) {
      return React.createElement("div", {
        key: i,
        className: "rocketChart-table-summaryItem",
        style: {
          width: item.size,
          textAlign: item.align
        }
      }, React.createElement(EllipsisCell, {
        value: item.text
      }));
    });
  };

  return React.createElement("div", {
    className: "rocketChart-table-summary",
    style: style
  }, React.createElement("div", {
    ref: ref,
    className: "rocketChart-table-summaryInner"
  }, renderItems(summaryObjs)), React.createElement("div", {
    className: "rocketChart-table-summaryLeft"
  }, renderItems(leftSummary)), React.createElement("div", {
    className: "rocketChart-table-summaryRight"
  }, renderItems(rightSummary)));
};

var Summary$1 = React.forwardRef(Summary);

var defaultStyle = {
  '--cell-border-vertical': 'none',
  '--header-cell-border': 'none',
  '--row-hover-color': 'transparent',
  overflow: 'auto',
  fontSize: '14px'
};
var themeProps = {
  dark: {
    '--bgcolor': '#222',
    '--color': '#ccc',
    '--header-color': '#20a0ff',
    '--header-bgcolor': '#222',
    '--border-color': '#3c3c3c'
  },
  "default": {
    '--bgcolor': '#fff',
    '--color': 'rgba(0,0,0,.65)',
    '--header-color': 'rgba(0,0,0,.65)',
    '--header-bgcolor': '#f3f7fc',
    '--border-color': '#e6e6e6'
  }
};
var sizeProps = {
  small: {
    desktop: {
      '--header-row-height': '28px',
      '--row-height': '24px',
      '--table-font-size': '12px',
      defaultColumnWidth: 120
    },
    mobile: {
      '--header-row-height': '22px',
      '--row-height': '20px',
      '--table-font-size': '12px',
      defaultColumnWidth: 60
    }
  },
  "default": {
    desktop: {
      '--header-row-height': '48px',
      '--row-height': '40px',
      '--table-font-size': '14px',
      defaultColumnWidth: 120
    },
    mobile: {
      '--header-row-height': '26px',
      '--row-height': '24px',
      '--table-font-size': '12px',
      defaultColumnWidth: 80
    }
  }
};
var getPropsByType = function getPropsByType(theme, size, device) {
  if (theme === void 0) {
    theme = 'default';
  }

  if (size === void 0) {
    size = 'default';
  }

  if (device === void 0) {
    device = 'desktop';
  }

  var sizeProp = sizeProps[size] || sizeProps["default"];
  sizeProp = sizeProp[device] || sizeProp.desktop;

  var _merge = merge$2({}, defaultStyle, themeProps[theme] || themeProps["default"], sizeProp),
      defaultColumnWidth = _merge.defaultColumnWidth,
      style = objectWithoutPropertiesLoose(_merge, ["defaultColumnWidth"]);

  return {
    defaultColumnWidth: defaultColumnWidth,
    style: style
  };
};

var defaultPageSizeOptions = [10, 30, 50];
var cellPadding = 6;
var fixCursor = debounce$2(function () {
  var $html = document.querySelector('html');

  if ($html) {
    $html.style.cursor = 'inherit';
  }
}, 500, {
  leading: false
});

var BasicTable = function BasicTable(_ref) {
  var tableProps = _ref.tableProps,
      container = _ref.container,
      device = _ref.device,
      _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? 'default' : _ref$theme;

  var _tableProps$dataSourc = tableProps.dataSource,
      dataSource = _tableProps$dataSourc === void 0 ? [] : _tableProps$dataSourc,
      _tableProps$columns = tableProps.columns,
      columns = _tableProps$columns === void 0 ? [] : _tableProps$columns,
      _tableProps$datasetPa = tableProps.datasetParams,
      datasetParams = _tableProps$datasetPa === void 0 ? {} : _tableProps$datasetPa,
      restProps = objectWithoutPropertiesLoose(tableProps, ["dataSource", "columns", "datasetParams"]);

  var onChange = datasetParams.onChange,
      sorts = datasetParams.sorts,
      _datasetParams$pagina = datasetParams.pagination,
      pagination = _datasetParams$pagina === void 0 ? {} : _datasetParams$pagina,
      _datasetParams$scroll = datasetParams.scrollX,
      scrollX = _datasetParams$scroll === void 0 ? false : _datasetParams$scroll,
      _datasetParams$ellips = datasetParams.ellipsis,
      ellipsis = _datasetParams$ellips === void 0 ? false : _datasetParams$ellips,
      lockList = datasetParams.lockList,
      summary = datasetParams.summary,
      _datasetParams$keepDa = datasetParams.keepDataSource,
      keepDataSource = _datasetParams$keepDa === void 0 ? false : _datasetParams$keepDa,
      renderCell = datasetParams.renderCell,
      setCellProps = datasetParams.setCellProps,
      size = datasetParams.size,
      drag = datasetParams.drag,
      colSizes = datasetParams.colSizes,
      onColSizesChange = datasetParams.onColSizesChange;
  var current = pagination.current,
      _pagination$defaultCu = pagination.defaultCurrent,
      defaultCurrent = _pagination$defaultCu === void 0 ? 1 : _pagination$defaultCu,
      _pagination$defaultPa = pagination.defaultPageSize,
      defaultPageSize = _pagination$defaultPa === void 0 ? defaultPageSizeOptions[1] : _pagination$defaultPa,
      pageSize = pagination.pageSize,
      pageSizeOptions = pagination.pageSizeOptions,
      _pagination$show = pagination.show,
      showPagination = _pagination$show === void 0 ? true : _pagination$show;
  var containerWidth = container.offsetWidth;
  var containerHeight = container.offsetHeight;
  var pageHeight = device === 'desktop' ? 34 : 28;
  var isLocked = !!(Array.isArray(lockList) && lockList.length);
  var isSummary = !!(Array.isArray(summary) && summary.length);

  var _getPropsByType = getPropsByType(theme, size, device),
      style = _getPropsByType.style,
      defaultColumnWidth = _getPropsByType.defaultColumnWidth;

  var summaryHeight = parseInt(style['--header-row-height']);
  var averageWidth = containerWidth / columns.length;
  var columnWidth = Math.max(averageWidth, defaultColumnWidth);

  var _useState = useState(),
      tableRef = _useState[0],
      setTableRef = _useState[1];

  var _useState2 = useState(),
      summaryRef = _useState2[0],
      setSummaryRef = _useState2[1];

  var _useState3 = useState({
    current: defaultCurrent,
    size: defaultPageSize,
    sizeOptions: defaultPageSizeOptions
  }),
      page = _useState3[0],
      setPage = _useState3[1];

  var _useState4 = useState({
    dataSource: [],
    columns: []
  }),
      renderData = _useState4[0],
      setRenderData = _useState4[1];

  var _useState5 = useState([]),
      selfSorts = _useState5[0],
      setSelfSorts = _useState5[1];

  var _useState6 = useState([]),
      pagedData = _useState6[0],
      setPagedData = _useState6[1];

  var _useState7 = useState([]),
      dragSizes = _useState7[0],
      setDragSizes = _useState7[1];

  var bottomHeight = 0;
  showPagination && (bottomHeight += pageHeight);
  isSummary && (bottomHeight += summaryHeight);
  var getSummaryRef = useCallback(function (node) {
    return node && setSummaryRef(node);
  }, []);
  var getTableRef = useCallback(function (node) {
    return node && setTableRef(node);
  }, []);
  var onChangeHandler = useCallback(function (newProps, trigger) {
    if (trigger === void 0) {
      trigger = '';
    }

    if (isFunction$3(onChange)) {
      var state = cloneDeep(_extends_1({
        page: page,
        sorts: selfSorts
      }, newProps));
      onChange(state, trigger);
    }
  }, [onChange, page, selfSorts]);

  var pageChange = function pageChange(index, size) {
    if (!showPagination) {
      return;
    }

    var newSize = pageSize || size || page.size;
    var newCurrent = current || index || page.current;
    var maxCurrent = Math.ceil(dataSource.length / newSize);
    setPage(_extends_1({}, page, {
      current: Math.min(newCurrent, maxCurrent),
      size: newSize
    }));
    onChangeHandler({
      page: _extends_1({}, page, {
        current: index,
        size: size
      })
    }, 'pagination');
  };

  var sortsChange = useCallback(function (newSort) {
    if (!sorts) {
      setSelfSorts(newSort);
    }

    onChangeHandler({
      sorts: newSort
    }, 'sorts');
  }, [onChangeHandler, sorts]);
  useEffect(function () {
    if (drag && colSizes && colSizes.length) {
      setDragSizes(colSizes.map(function (item) {
        return item * containerWidth;
      }));
      return;
    }

    var defaultSizes = collectNodes$1(columns, 'leaf-only').map(function (col) {
      var _col$width;

      return (_col$width = col.width) !== null && _col$width !== void 0 ? _col$width : columnWidth;
    });
    setDragSizes(defaultSizes);
  }, [averageWidth, columnWidth, columns, colSizes, containerWidth]); // 分页变化

  useEffect(function () {
    var options = pageSizeOptions || defaultPageSizeOptions;
    setPage({
      current: current || defaultCurrent,
      size: pageSize && options.includes(pageSize) ? pageSize : defaultPageSize,
      sizeOptions: options
    });
  }, [current, defaultCurrent, defaultPageSize, pageSize, pageSizeOptions]); // 排序

  useEffect(function () {
    setSelfSorts(sorts || []);
  }, [sorts]); // 计算分页数据

  useEffect(function () {
    if (!showPagination) {
      setPagedData(dataSource);
      return;
    }

    var data = dataSource;
    var length = pageSize || page.size;
    var start = ((current || page.current) - 1) * length;
    var end = start + length;
    data = dataSource.slice(start, end);
    setPagedData(data);
  }, [current, dataSource, page, pageSize, showPagination]); // 滚动

  useEffect(function () {
    if (!tableRef) {
      return;
    }

    if (!summaryRef) {
      return;
    }

    var tableDom = tableRef.doms.mainBody;
    var summaryDom = summaryRef;

    var updateScrollLeft = function updateScrollLeft(e) {
      summaryDom.style.left = -e.target.scrollLeft + "px";
    };

    tableDom.addEventListener('scroll', updateScrollLeft);
    return function () {
      tableDom.removeEventListener('scroll', updateScrollLeft);
    };
  }, [tableRef, summaryRef]); // 计算渲染数据

  useEffect(function () {
    var enhancers = [makeSortTransform({
      sorts: selfSorts,
      onChangeSorts: sortsChange,
      mode: 'single',
      keepDataSource: keepDataSource
    })];

    if (drag) {
      enhancers.push(makeColumnResizeTransform({
        sizes: dragSizes,
        onChangeSizes: function onChangeSizes(sizes) {
          setDragSizes(sizes);
          var percent = sizes.map(function (item) {
            return +(item / containerWidth).toFixed(3);
          });
          onColSizesChange && onColSizesChange(percent); // fix bug 手动移除html上的cursor。。。

          fixCursor();
        },
        disableUserSelectWhenResizing: true,
        appendExpander: true,
        minSize: 80
      }));
    }

    var data = applyTransforms.apply(void 0, [{
      columns: columns,
      dataSource: pagedData
    }].concat(enhancers));

    var render = function render(col, value, record, rowIndex) {
      var formatedValue = getFormatter(col.formatter)(value);
      var result = isFunction$3(renderCell) ? renderCell(formatedValue, record, rowIndex) : formatedValue;
      return ellipsis ? React.createElement(EllipsisCell, {
        value: formatedValue,
        width: (col.width || 0) - cellPadding * 2
      }, result) : result;
    };

    data.columns.forEach(function (item, i) {
      item.render = function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return render.apply(void 0, [item].concat(args));
      };

      if (dragSizes.length) {
        item.width = dragSizes[i];
      } else if (!drag && (scrollX || isLocked && lockList)) {
        item.width = columnWidth;
      }

      if (lockList && lockList.includes(item.name)) {
        item.lock = true;
      }

      if (setCellProps) {
        item.getCellProps = function (value, record) {
          return setCellProps(value, item.code, record);
        };
      }
    });
    setRenderData(data);
  }, [columns, containerWidth, ellipsis, isLocked, keepDataSource, lockList, pagedData, scrollX, selfSorts, sortsChange, renderCell, setCellProps, dragSizes, drag, columnWidth, onColSizesChange]);
  console.log(dragSizes, renderData.columns);
  return React.createElement(React.Fragment, null, React.createElement(BaseTable$1 // TODO scale verticalScroll
  , Object.assign({
    // TODO scale verticalScroll
    useVirtual: {
      vertical: renderData.dataSource.length >= 200,
      horizontal: 'auto',
      header: 'auto'
    },
    ref: getTableRef
  }, restProps, {
    isStickyHead: true,
    style: _extends_1({}, style, {
      '--header-cell-border': drag ? '1px solid var(--border-color)' : 'none',
      height: containerHeight - bottomHeight - parseInt(style['--table-font-size'])
    }),
    dataSource: renderData.dataSource,
    columns: renderData.columns
  })), React.createElement("div", {
    className: "rocketChart-table-bottom",
    style: {
      height: bottomHeight
    }
  }, React.createElement(Summary$1, {
    style: {
      fontSize: style['--table-font-size'],
      backgroundColor: style['--header-bgcolor'],
      height: summaryHeight
    },
    ref: getSummaryRef,
    renderData: renderData,
    summary: summary,
    isSummary: isSummary,
    isLocked: isLocked,
    lockList: lockList,
    scrollX: scrollX,
    sizes: dragSizes
  }), React.createElement(ChartPagination, {
    style: style,
    show: showPagination,
    page: page,
    total: dataSource.length,
    onChange: pageChange
  })));
};

var classnames = createCommonjsModule(function (module) {
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if ( module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else {
		window.classNames = classNames;
	}
}());
});

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isFunction$1(x) {
    return typeof x === 'function';
}

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var _enable_super_gross_mode_that_will_cause_bad_things = false;
var config$1 = {
    Promise: undefined,
    set useDeprecatedSynchronousErrorHandling(value) {
        if (value) {
            var error = /*@__PURE__*/ new Error();
            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
        }
        _enable_super_gross_mode_that_will_cause_bad_things = value;
    },
    get useDeprecatedSynchronousErrorHandling() {
        return _enable_super_gross_mode_that_will_cause_bad_things;
    },
};

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function hostReportError(err) {
    setTimeout(function () { throw err; }, 0);
}

/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */
var empty = {
    closed: true,
    next: function (value) { },
    error: function (err) {
        if (config$1.useDeprecatedSynchronousErrorHandling) {
            throw err;
        }
        else {
            hostReportError(err);
        }
    },
    complete: function () { }
};

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var isArray = /*@__PURE__*/ (function () { return Array.isArray || (function (x) { return x && typeof x.length === 'number'; }); })();

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isObject(x) {
    return x !== null && typeof x === 'object';
}

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var UnsubscriptionErrorImpl = /*@__PURE__*/ (function () {
    function UnsubscriptionErrorImpl(errors) {
        Error.call(this);
        this.message = errors ?
            errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '';
        this.name = 'UnsubscriptionError';
        this.errors = errors;
        return this;
    }
    UnsubscriptionErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
    return UnsubscriptionErrorImpl;
})();
var UnsubscriptionError = UnsubscriptionErrorImpl;

/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_UnsubscriptionError PURE_IMPORTS_END */
var Subscription = /*@__PURE__*/ (function () {
    function Subscription(unsubscribe) {
        this.closed = false;
        this._parentOrParents = null;
        this._subscriptions = null;
        if (unsubscribe) {
            this._ctorUnsubscribe = true;
            this._unsubscribe = unsubscribe;
        }
    }
    Subscription.prototype.unsubscribe = function () {
        var errors;
        if (this.closed) {
            return;
        }
        var _a = this, _parentOrParents = _a._parentOrParents, _ctorUnsubscribe = _a._ctorUnsubscribe, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parentOrParents = null;
        this._subscriptions = null;
        if (_parentOrParents instanceof Subscription) {
            _parentOrParents.remove(this);
        }
        else if (_parentOrParents !== null) {
            for (var index = 0; index < _parentOrParents.length; ++index) {
                var parent_1 = _parentOrParents[index];
                parent_1.remove(this);
            }
        }
        if (isFunction$1(_unsubscribe)) {
            if (_ctorUnsubscribe) {
                this._unsubscribe = undefined;
            }
            try {
                _unsubscribe.call(this);
            }
            catch (e) {
                errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];
            }
        }
        if (isArray(_subscriptions)) {
            var index = -1;
            var len = _subscriptions.length;
            while (++index < len) {
                var sub = _subscriptions[index];
                if (isObject(sub)) {
                    try {
                        sub.unsubscribe();
                    }
                    catch (e) {
                        errors = errors || [];
                        if (e instanceof UnsubscriptionError) {
                            errors = errors.concat(flattenUnsubscriptionErrors(e.errors));
                        }
                        else {
                            errors.push(e);
                        }
                    }
                }
            }
        }
        if (errors) {
            throw new UnsubscriptionError(errors);
        }
    };
    Subscription.prototype.add = function (teardown) {
        var subscription = teardown;
        if (!teardown) {
            return Subscription.EMPTY;
        }
        switch (typeof teardown) {
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {
                    return subscription;
                }
                else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                }
                else if (!(subscription instanceof Subscription)) {
                    var tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [tmp];
                }
                break;
            default: {
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
            }
        }
        var _parentOrParents = subscription._parentOrParents;
        if (_parentOrParents === null) {
            subscription._parentOrParents = this;
        }
        else if (_parentOrParents instanceof Subscription) {
            if (_parentOrParents === this) {
                return subscription;
            }
            subscription._parentOrParents = [_parentOrParents, this];
        }
        else if (_parentOrParents.indexOf(this) === -1) {
            _parentOrParents.push(this);
        }
        else {
            return subscription;
        }
        var subscriptions = this._subscriptions;
        if (subscriptions === null) {
            this._subscriptions = [subscription];
        }
        else {
            subscriptions.push(subscription);
        }
        return subscription;
    };
    Subscription.prototype.remove = function (subscription) {
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    Subscription.EMPTY = (function (empty) {
        empty.closed = true;
        return empty;
    }(new Subscription()));
    return Subscription;
}());
function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);
}

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var rxSubscriber = /*@__PURE__*/ (function () {
    return typeof Symbol === 'function'
        ? /*@__PURE__*/ Symbol('rxSubscriber')
        : '@@rxSubscriber_' + /*@__PURE__*/ Math.random();
})();

/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */
var Subscriber = /*@__PURE__*/ (function (_super) {
    __extends(Subscriber, _super);
    function Subscriber(destinationOrNext, error, complete) {
        var _this = _super.call(this) || this;
        _this.syncErrorValue = null;
        _this.syncErrorThrown = false;
        _this.syncErrorThrowable = false;
        _this.isStopped = false;
        switch (arguments.length) {
            case 0:
                _this.destination = empty;
                break;
            case 1:
                if (!destinationOrNext) {
                    _this.destination = empty;
                    break;
                }
                if (typeof destinationOrNext === 'object') {
                    if (destinationOrNext instanceof Subscriber) {
                        _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
                        _this.destination = destinationOrNext;
                        destinationOrNext.add(_this);
                    }
                    else {
                        _this.syncErrorThrowable = true;
                        _this.destination = new SafeSubscriber(_this, destinationOrNext);
                    }
                    break;
                }
            default:
                _this.syncErrorThrowable = true;
                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
                break;
        }
        return _this;
    }
    Subscriber.prototype[rxSubscriber] = function () { return this; };
    Subscriber.create = function (next, error, complete) {
        var subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    };
    Subscriber.prototype.next = function (value) {
        if (!this.isStopped) {
            this._next(value);
        }
    };
    Subscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    };
    Subscriber.prototype.complete = function () {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        this.destination.error(err);
        this.unsubscribe();
    };
    Subscriber.prototype._complete = function () {
        this.destination.complete();
        this.unsubscribe();
    };
    Subscriber.prototype._unsubscribeAndRecycle = function () {
        var _parentOrParents = this._parentOrParents;
        this._parentOrParents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parentOrParents = _parentOrParents;
        return this;
    };
    return Subscriber;
}(Subscription));
var SafeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SafeSubscriber, _super);
    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        _this._parentSubscriber = _parentSubscriber;
        var next;
        var context = _this;
        if (isFunction$1(observerOrNext)) {
            next = observerOrNext;
        }
        else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (observerOrNext !== empty) {
                context = Object.create(observerOrNext);
                if (isFunction$1(context.unsubscribe)) {
                    _this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = _this.unsubscribe.bind(_this);
            }
        }
        _this._context = context;
        _this._next = next;
        _this._error = error;
        _this._complete = complete;
        return _this;
    }
    SafeSubscriber.prototype.next = function (value) {
        if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (!config$1.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            }
            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            var useDeprecatedSynchronousErrorHandling = config$1.useDeprecatedSynchronousErrorHandling;
            if (this._error) {
                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            }
            else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                if (useDeprecatedSynchronousErrorHandling) {
                    throw err;
                }
                hostReportError(err);
            }
            else {
                if (useDeprecatedSynchronousErrorHandling) {
                    _parentSubscriber.syncErrorValue = err;
                    _parentSubscriber.syncErrorThrown = true;
                }
                else {
                    hostReportError(err);
                }
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.complete = function () {
        var _this = this;
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
                var wrappedComplete = function () { return _this._complete.call(_this._context); };
                if (!config$1.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(wrappedComplete);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                    this.unsubscribe();
                }
            }
            else {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            this.unsubscribe();
            if (config$1.useDeprecatedSynchronousErrorHandling) {
                throw err;
            }
            else {
                hostReportError(err);
            }
        }
    };
    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
        if (!config$1.useDeprecatedSynchronousErrorHandling) {
            throw new Error('bad call');
        }
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            if (config$1.useDeprecatedSynchronousErrorHandling) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
            }
            else {
                hostReportError(err);
                return true;
            }
        }
        return false;
    };
    SafeSubscriber.prototype._unsubscribe = function () {
        var _parentSubscriber = this._parentSubscriber;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    };
    return SafeSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */
function canReportError(observer) {
    while (observer) {
        var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;
        if (closed_1 || isStopped) {
            return false;
        }
        else if (destination && destination instanceof Subscriber) {
            observer = destination;
        }
        else {
            observer = null;
        }
    }
    return true;
}

/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */
function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof Subscriber) {
            return nextOrObserver;
        }
        if (nextOrObserver[rxSubscriber]) {
            return nextOrObserver[rxSubscriber]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new Subscriber(empty);
    }
    return new Subscriber(nextOrObserver, error, complete);
}

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var observable = /*@__PURE__*/ (function () { return typeof Symbol === 'function' && Symbol.observable || '@@observable'; })();

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function identity(x) {
    return x;
}

/** PURE_IMPORTS_START _identity PURE_IMPORTS_END */
function pipeFromArray(fns) {
    if (fns.length === 0) {
        return identity;
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}

/** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */
var Observable = /*@__PURE__*/ (function () {
    function Observable(subscribe) {
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var operator = this.operator;
        var sink = toSubscriber(observerOrNext, error, complete);
        if (operator) {
            sink.add(operator.call(sink, this.source));
        }
        else {
            sink.add(this.source || (config$1.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?
                this._subscribe(sink) :
                this._trySubscribe(sink));
        }
        if (config$1.useDeprecatedSynchronousErrorHandling) {
            if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) {
                    throw sink.syncErrorValue;
                }
            }
        }
        return sink;
    };
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            if (config$1.useDeprecatedSynchronousErrorHandling) {
                sink.syncErrorThrown = true;
                sink.syncErrorValue = err;
            }
            if (canReportError(sink)) {
                sink.error(err);
            }
            else {
                console.warn(err);
            }
        }
    };
    Observable.prototype.forEach = function (next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var subscription;
            subscription = _this.subscribe(function (value) {
                try {
                    next(value);
                }
                catch (err) {
                    reject(err);
                    if (subscription) {
                        subscription.unsubscribe();
                    }
                }
            }, reject, resolve);
        });
    };
    Observable.prototype._subscribe = function (subscriber) {
        var source = this.source;
        return source && source.subscribe(subscriber);
    };
    Observable.prototype[observable] = function () {
        return this;
    };
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
        }
        if (operations.length === 0) {
            return this;
        }
        return pipeFromArray(operations)(this);
    };
    Observable.prototype.toPromise = function (promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());
function getPromiseCtor(promiseCtor) {
    if (!promiseCtor) {
        promiseCtor =  Promise;
    }
    if (!promiseCtor) {
        throw new Error('no Promise impl found');
    }
    return promiseCtor;
}

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var ObjectUnsubscribedErrorImpl = /*@__PURE__*/ (function () {
    function ObjectUnsubscribedErrorImpl() {
        Error.call(this);
        this.message = 'object unsubscribed';
        this.name = 'ObjectUnsubscribedError';
        return this;
    }
    ObjectUnsubscribedErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
    return ObjectUnsubscribedErrorImpl;
})();
var ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;

/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
var SubjectSubscription = /*@__PURE__*/ (function (_super) {
    __extends(SubjectSubscription, _super);
    function SubjectSubscription(subject, subscriber) {
        var _this = _super.call(this) || this;
        _this.subject = subject;
        _this.subscriber = subscriber;
        _this.closed = false;
        return _this;
    }
    SubjectSubscription.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.closed = true;
        var subject = this.subject;
        var observers = subject.observers;
        this.subject = null;
        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
        }
        var subscriberIndex = observers.indexOf(this.subscriber);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    };
    return SubjectSubscription;
}(Subscription));

/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */
var SubjectSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SubjectSubscriber, _super);
    function SubjectSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        return _this;
    }
    return SubjectSubscriber;
}(Subscriber));
var Subject = /*@__PURE__*/ (function (_super) {
    __extends(Subject, _super);
    function Subject() {
        var _this = _super.call(this) || this;
        _this.observers = [];
        _this.closed = false;
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
    }
    Subject.prototype[rxSubscriber] = function () {
        return new SubjectSubscriber(this);
    };
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype.next = function (value) {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        if (!this.isStopped) {
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].next(value);
            }
        }
    };
    Subject.prototype.error = function (err) {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].error(err);
        }
        this.observers.length = 0;
    };
    Subject.prototype.complete = function () {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].complete();
        }
        this.observers.length = 0;
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    };
    Subject.prototype._trySubscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        else {
            return _super.prototype._trySubscribe.call(this, subscriber);
        }
    };
    Subject.prototype._subscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        else if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription.EMPTY;
        }
        else if (this.isStopped) {
            subscriber.complete();
            return Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            return new SubjectSubscription(this, subscriber);
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new Observable();
        observable.source = this;
        return observable;
    };
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(Observable));
var AnonymousSubject = /*@__PURE__*/ (function (_super) {
    __extends(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
    }
    AnonymousSubject.prototype.next = function (value) {
        var destination = this.destination;
        if (destination && destination.next) {
            destination.next(value);
        }
    };
    AnonymousSubject.prototype.error = function (err) {
        var destination = this.destination;
        if (destination && destination.error) {
            this.destination.error(err);
        }
    };
    AnonymousSubject.prototype.complete = function () {
        var destination = this.destination;
        if (destination && destination.complete) {
            this.destination.complete();
        }
    };
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var source = this.source;
        if (source) {
            return this.source.subscribe(subscriber);
        }
        else {
            return Subscription.EMPTY;
        }
    };
    return AnonymousSubject;
}(Subject));

/** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */
var BehaviorSubject = /*@__PURE__*/ (function (_super) {
    __extends(BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function () {
            return this.getValue();
        },
        enumerable: true,
        configurable: true
    });
    BehaviorSubject.prototype._subscribe = function (subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        if (subscription && !subscription.closed) {
            subscriber.next(this._value);
        }
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
        if (this.hasError) {
            throw this.thrownError;
        }
        else if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        else {
            return this._value;
        }
    };
    BehaviorSubject.prototype.next = function (value) {
        _super.prototype.next.call(this, this._value = value);
    };
    return BehaviorSubject;
}(Subject));

/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
var Action = /*@__PURE__*/ (function (_super) {
    __extends(Action, _super);
    function Action(scheduler, work) {
        return _super.call(this) || this;
    }
    Action.prototype.schedule = function (state, delay) {
        return this;
    };
    return Action;
}(Subscription));

/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */
var AsyncAction = /*@__PURE__*/ (function (_super) {
    __extends(AsyncAction, _super);
    function AsyncAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.pending = false;
        return _this;
    }
    AsyncAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (this.closed) {
            return this;
        }
        this.state = state;
        var id = this.id;
        var scheduler = this.scheduler;
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        this.pending = true;
        this.delay = delay;
        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
        return this;
    };
    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (delay !== null && this.delay === delay && this.pending === false) {
            return id;
        }
        clearInterval(id);
        return undefined;
    };
    AsyncAction.prototype.execute = function (state, delay) {
        if (this.closed) {
            return new Error('executing a cancelled action');
        }
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) {
            return error;
        }
        else if (this.pending === false && this.id != null) {
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
    };
    AsyncAction.prototype._execute = function (state, delay) {
        var errored = false;
        var errorValue = undefined;
        try {
            this.work(state);
        }
        catch (e) {
            errored = true;
            errorValue = !!e && e || new Error(e);
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    };
    AsyncAction.prototype._unsubscribe = function () {
        var id = this.id;
        var scheduler = this.scheduler;
        var actions = scheduler.actions;
        var index = actions.indexOf(this);
        this.work = null;
        this.state = null;
        this.pending = false;
        this.scheduler = null;
        if (index !== -1) {
            actions.splice(index, 1);
        }
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, null);
        }
        this.delay = null;
    };
    return AsyncAction;
}(Action));

var Scheduler = /*@__PURE__*/ (function () {
    function Scheduler(SchedulerAction, now) {
        if (now === void 0) {
            now = Scheduler.now;
        }
        this.SchedulerAction = SchedulerAction;
        this.now = now;
    }
    Scheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) {
            delay = 0;
        }
        return new this.SchedulerAction(this, work).schedule(state, delay);
    };
    Scheduler.now = function () { return Date.now(); };
    return Scheduler;
}());

/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */
var AsyncScheduler = /*@__PURE__*/ (function (_super) {
    __extends(AsyncScheduler, _super);
    function AsyncScheduler(SchedulerAction, now) {
        if (now === void 0) {
            now = Scheduler.now;
        }
        var _this = _super.call(this, SchedulerAction, function () {
            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
                return AsyncScheduler.delegate.now();
            }
            else {
                return now();
            }
        }) || this;
        _this.actions = [];
        _this.active = false;
        _this.scheduled = undefined;
        return _this;
    }
    AsyncScheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) {
            delay = 0;
        }
        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
            return AsyncScheduler.delegate.schedule(work, delay, state);
        }
        else {
            return _super.prototype.schedule.call(this, work, delay, state);
        }
    };
    AsyncScheduler.prototype.flush = function (action) {
        var actions = this.actions;
        if (this.active) {
            actions.push(action);
            return;
        }
        var error;
        this.active = true;
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (action = actions.shift());
        this.active = false;
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsyncScheduler;
}(Scheduler));

/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
var EMPTY = /*@__PURE__*/ new Observable(function (subscriber) { return subscriber.complete(); });
function empty$1(scheduler) {
    return scheduler ? emptyScheduled(scheduler) : EMPTY;
}
function emptyScheduled(scheduler) {
    return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
}

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isScheduler(value) {
    return value && typeof value.schedule === 'function';
}

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var subscribeToArray = function (array) {
    return function (subscriber) {
        for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
            subscriber.next(array[i]);
        }
        subscriber.complete();
    };
};

/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */
function scheduleArray(input, scheduler) {
    return new Observable(function (subscriber) {
        var sub = new Subscription();
        var i = 0;
        sub.add(scheduler.schedule(function () {
            if (i === input.length) {
                subscriber.complete();
                return;
            }
            subscriber.next(input[i++]);
            if (!subscriber.closed) {
                sub.add(this.schedule());
            }
        }));
        return sub;
    });
}

/** PURE_IMPORTS_START _Observable,_util_subscribeToArray,_scheduled_scheduleArray PURE_IMPORTS_END */
function fromArray(input, scheduler) {
    if (!scheduler) {
        return new Observable(subscribeToArray(input));
    }
    else {
        return scheduleArray(input, scheduler);
    }
}

/** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */
var asyncScheduler = /*@__PURE__*/ new AsyncScheduler(AsyncAction);
var async = asyncScheduler;

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function noop$1() { }

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
function map(project, thisArg) {
    return function mapOperation(source) {
        if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }
        return source.lift(new MapOperator(project, thisArg));
    };
}
var MapOperator = /*@__PURE__*/ (function () {
    function MapOperator(project, thisArg) {
        this.project = project;
        this.thisArg = thisArg;
    }
    MapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    };
    return MapOperator;
}());
var MapSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(MapSubscriber, _super);
    function MapSubscriber(destination, project, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.count = 0;
        _this.thisArg = thisArg || _this;
        return _this;
    }
    MapSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.project.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return MapSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */
var subscribeToPromise = function (promise) {
    return function (subscriber) {
        promise.then(function (value) {
            if (!subscriber.closed) {
                subscriber.next(value);
                subscriber.complete();
            }
        }, function (err) { return subscriber.error(err); })
            .then(null, hostReportError);
        return subscriber;
    };
};

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function getSymbolIterator() {
    if (typeof Symbol !== 'function' || !Symbol.iterator) {
        return '@@iterator';
    }
    return Symbol.iterator;
}
var iterator = /*@__PURE__*/ getSymbolIterator();

/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
var subscribeToIterable = function (iterable) {
    return function (subscriber) {
        var iterator$1 = iterable[iterator]();
        do {
            var item = void 0;
            try {
                item = iterator$1.next();
            }
            catch (err) {
                subscriber.error(err);
                return subscriber;
            }
            if (item.done) {
                subscriber.complete();
                break;
            }
            subscriber.next(item.value);
            if (subscriber.closed) {
                break;
            }
        } while (true);
        if (typeof iterator$1.return === 'function') {
            subscriber.add(function () {
                if (iterator$1.return) {
                    iterator$1.return();
                }
            });
        }
        return subscriber;
    };
};

/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
var subscribeToObservable = function (obj) {
    return function (subscriber) {
        var obs = obj[observable]();
        if (typeof obs.subscribe !== 'function') {
            throw new TypeError('Provided object does not correctly implement Symbol.observable');
        }
        else {
            return obs.subscribe(subscriber);
        }
    };
};

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isPromise(value) {
    return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}

/** PURE_IMPORTS_START _subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */
var subscribeTo = function (result) {
    if (!!result && typeof result[observable] === 'function') {
        return subscribeToObservable(result);
    }
    else if (isArrayLike(result)) {
        return subscribeToArray(result);
    }
    else if (isPromise(result)) {
        return subscribeToPromise(result);
    }
    else if (!!result && typeof result[iterator] === 'function') {
        return subscribeToIterable(result);
    }
    else {
        var value = isObject(result) ? 'an invalid object' : "'" + result + "'";
        var msg = "You provided " + value + " where a stream was expected."
            + ' You can provide an Observable, Promise, Array, or Iterable.';
        throw new TypeError(msg);
    }
};

/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable PURE_IMPORTS_END */
function scheduleObservable(input, scheduler) {
    return new Observable(function (subscriber) {
        var sub = new Subscription();
        sub.add(scheduler.schedule(function () {
            var observable$1 = input[observable]();
            sub.add(observable$1.subscribe({
                next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },
                error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },
                complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },
            }));
        }));
        return sub;
    });
}

/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */
function schedulePromise(input, scheduler) {
    return new Observable(function (subscriber) {
        var sub = new Subscription();
        sub.add(scheduler.schedule(function () {
            return input.then(function (value) {
                sub.add(scheduler.schedule(function () {
                    subscriber.next(value);
                    sub.add(scheduler.schedule(function () { return subscriber.complete(); }));
                }));
            }, function (err) {
                sub.add(scheduler.schedule(function () { return subscriber.error(err); }));
            });
        }));
        return sub;
    });
}

/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator PURE_IMPORTS_END */
function scheduleIterable(input, scheduler) {
    if (!input) {
        throw new Error('Iterable cannot be null');
    }
    return new Observable(function (subscriber) {
        var sub = new Subscription();
        var iterator$1;
        sub.add(function () {
            if (iterator$1 && typeof iterator$1.return === 'function') {
                iterator$1.return();
            }
        });
        sub.add(scheduler.schedule(function () {
            iterator$1 = input[iterator]();
            sub.add(scheduler.schedule(function () {
                if (subscriber.closed) {
                    return;
                }
                var value;
                var done;
                try {
                    var result = iterator$1.next();
                    value = result.value;
                    done = result.done;
                }
                catch (err) {
                    subscriber.error(err);
                    return;
                }
                if (done) {
                    subscriber.complete();
                }
                else {
                    subscriber.next(value);
                    this.schedule();
                }
            }));
        }));
        return sub;
    });
}

/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
function isInteropObservable(input) {
    return input && typeof input[observable] === 'function';
}

/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
function isIterable(input) {
    return input && typeof input[iterator] === 'function';
}

/** PURE_IMPORTS_START _scheduleObservable,_schedulePromise,_scheduleArray,_scheduleIterable,_util_isInteropObservable,_util_isPromise,_util_isArrayLike,_util_isIterable PURE_IMPORTS_END */
function scheduled(input, scheduler) {
    if (input != null) {
        if (isInteropObservable(input)) {
            return scheduleObservable(input, scheduler);
        }
        else if (isPromise(input)) {
            return schedulePromise(input, scheduler);
        }
        else if (isArrayLike(input)) {
            return scheduleArray(input, scheduler);
        }
        else if (isIterable(input) || typeof input === 'string') {
            return scheduleIterable(input, scheduler);
        }
    }
    throw new TypeError((input !== null && typeof input || input) + ' is not observable');
}

/** PURE_IMPORTS_START _Observable,_util_subscribeTo,_scheduled_scheduled PURE_IMPORTS_END */
function from(input, scheduler) {
    if (!scheduler) {
        if (input instanceof Observable) {
            return input;
        }
        return new Observable(subscribeTo(input));
    }
    else {
        return scheduled(input, scheduler);
    }
}

/** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_util_subscribeTo PURE_IMPORTS_END */
var SimpleInnerSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SimpleInnerSubscriber, _super);
    function SimpleInnerSubscriber(parent) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        return _this;
    }
    SimpleInnerSubscriber.prototype._next = function (value) {
        this.parent.notifyNext(value);
    };
    SimpleInnerSubscriber.prototype._error = function (error) {
        this.parent.notifyError(error);
        this.unsubscribe();
    };
    SimpleInnerSubscriber.prototype._complete = function () {
        this.parent.notifyComplete();
        this.unsubscribe();
    };
    return SimpleInnerSubscriber;
}(Subscriber));
var SimpleOuterSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SimpleOuterSubscriber, _super);
    function SimpleOuterSubscriber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SimpleOuterSubscriber.prototype.notifyNext = function (innerValue) {
        this.destination.next(innerValue);
    };
    SimpleOuterSubscriber.prototype.notifyError = function (err) {
        this.destination.error(err);
    };
    SimpleOuterSubscriber.prototype.notifyComplete = function () {
        this.destination.complete();
    };
    return SimpleOuterSubscriber;
}(Subscriber));
function innerSubscribe(result, innerSubscriber) {
    if (innerSubscriber.closed) {
        return undefined;
    }
    if (result instanceof Observable) {
        return result.subscribe(innerSubscriber);
    }
    return subscribeTo(result)(innerSubscriber);
}

/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */
function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    if (typeof resultSelector === 'function') {
        return function (source) { return source.pipe(mergeMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };
    }
    else if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };
}
var MergeMapOperator = /*@__PURE__*/ (function () {
    function MergeMapOperator(project, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        this.project = project;
        this.concurrent = concurrent;
    }
    MergeMapOperator.prototype.call = function (observer, source) {
        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
    };
    return MergeMapOperator;
}());
var MergeMapSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(MergeMapSubscriber, _super);
    function MergeMapSubscriber(destination, project, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.concurrent = concurrent;
        _this.hasCompleted = false;
        _this.buffer = [];
        _this.active = 0;
        _this.index = 0;
        return _this;
    }
    MergeMapSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            this._tryNext(value);
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeMapSubscriber.prototype._tryNext = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.active++;
        this._innerSub(result);
    };
    MergeMapSubscriber.prototype._innerSub = function (ish) {
        var innerSubscriber = new SimpleInnerSubscriber(this);
        var destination = this.destination;
        destination.add(innerSubscriber);
        var innerSubscription = innerSubscribe(ish, innerSubscriber);
        if (innerSubscription !== innerSubscriber) {
            destination.add(innerSubscription);
        }
    };
    MergeMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
        this.unsubscribe();
    };
    MergeMapSubscriber.prototype.notifyNext = function (innerValue) {
        this.destination.next(innerValue);
    };
    MergeMapSubscriber.prototype.notifyComplete = function () {
        var buffer = this.buffer;
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeMapSubscriber;
}(SimpleOuterSubscriber));

/** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */
function mergeAll(concurrent) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    return mergeMap(identity, concurrent);
}

/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */
function defer(observableFactory) {
    return new Observable(function (subscriber) {
        var input;
        try {
            input = observableFactory();
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        var source = input ? from(input) : empty$1();
        return source.subscribe(subscriber);
    });
}

/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */
function fromEvent(target, eventName, options, resultSelector) {
    if (isFunction$1(options)) {
        resultSelector = options;
        options = undefined;
    }
    if (resultSelector) {
        return fromEvent(target, eventName, options).pipe(map(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
    }
    return new Observable(function (subscriber) {
        function handler(e) {
            if (arguments.length > 1) {
                subscriber.next(Array.prototype.slice.call(arguments));
            }
            else {
                subscriber.next(e);
            }
        }
        setupSubscription(target, eventName, handler, subscriber, options);
    });
}
function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
    var unsubscribe;
    if (isEventTarget(sourceObj)) {
        var source_1 = sourceObj;
        sourceObj.addEventListener(eventName, handler, options);
        unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };
    }
    else if (isJQueryStyleEventEmitter(sourceObj)) {
        var source_2 = sourceObj;
        sourceObj.on(eventName, handler);
        unsubscribe = function () { return source_2.off(eventName, handler); };
    }
    else if (isNodeStyleEventEmitter(sourceObj)) {
        var source_3 = sourceObj;
        sourceObj.addListener(eventName, handler);
        unsubscribe = function () { return source_3.removeListener(eventName, handler); };
    }
    else if (sourceObj && sourceObj.length) {
        for (var i = 0, len = sourceObj.length; i < len; i++) {
            setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
        }
    }
    else {
        throw new TypeError('Invalid event target');
    }
    subscriber.add(unsubscribe);
}
function isNodeStyleEventEmitter(sourceObj) {
    return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
}
function isJQueryStyleEventEmitter(sourceObj) {
    return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
}
function isEventTarget(sourceObj) {
    return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
}

/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */
function merge$1() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var concurrent = Number.POSITIVE_INFINITY;
    var scheduler = null;
    var last = observables[observables.length - 1];
    if (isScheduler(last)) {
        scheduler = observables.pop();
        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
            concurrent = observables.pop();
        }
    }
    else if (typeof last === 'number') {
        concurrent = observables.pop();
    }
    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {
        return observables[0];
    }
    return mergeAll(concurrent)(fromArray(observables, scheduler));
}

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
function filter(predicate, thisArg) {
    return function filterOperatorFunction(source) {
        return source.lift(new FilterOperator(predicate, thisArg));
    };
}
var FilterOperator = /*@__PURE__*/ (function () {
    function FilterOperator(predicate, thisArg) {
        this.predicate = predicate;
        this.thisArg = thisArg;
    }
    FilterOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
    };
    return FilterOperator;
}());
var FilterSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(FilterSubscriber, _super);
    function FilterSubscriber(destination, predicate, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.thisArg = thisArg;
        _this.count = 0;
        return _this;
    }
    FilterSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.predicate.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.destination.next(value);
        }
    };
    return FilterSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
function distinctUntilChanged(compare, keySelector) {
    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };
}
var DistinctUntilChangedOperator = /*@__PURE__*/ (function () {
    function DistinctUntilChangedOperator(compare, keySelector) {
        this.compare = compare;
        this.keySelector = keySelector;
    }
    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
    };
    return DistinctUntilChangedOperator;
}());
var DistinctUntilChangedSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DistinctUntilChangedSubscriber, _super);
    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
        var _this = _super.call(this, destination) || this;
        _this.keySelector = keySelector;
        _this.hasKey = false;
        if (typeof compare === 'function') {
            _this.compare = compare;
        }
        return _this;
    }
    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
        return x === y;
    };
    DistinctUntilChangedSubscriber.prototype._next = function (value) {
        var key;
        try {
            var keySelector = this.keySelector;
            key = keySelector ? keySelector(value) : value;
        }
        catch (err) {
            return this.destination.error(err);
        }
        var result = false;
        if (this.hasKey) {
            try {
                var compare = this.compare;
                result = compare(this.key, key);
            }
            catch (err) {
                return this.destination.error(err);
            }
        }
        else {
            this.hasKey = true;
        }
        if (!result) {
            this.key = key;
            this.destination.next(value);
        }
    };
    return DistinctUntilChangedSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
function mapTo(value) {
    return function (source) { return source.lift(new MapToOperator(value)); };
}
var MapToOperator = /*@__PURE__*/ (function () {
    function MapToOperator(value) {
        this.value = value;
    }
    MapToOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapToSubscriber(subscriber, this.value));
    };
    return MapToOperator;
}());
var MapToSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(MapToSubscriber, _super);
    function MapToSubscriber(destination, value) {
        var _this = _super.call(this, destination) || this;
        _this.value = value;
        return _this;
    }
    MapToSubscriber.prototype._next = function (x) {
        this.destination.next(this.value);
    };
    return MapToSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
function scan(accumulator, seed) {
    var hasSeed = false;
    if (arguments.length >= 2) {
        hasSeed = true;
    }
    return function scanOperatorFunction(source) {
        return source.lift(new ScanOperator(accumulator, seed, hasSeed));
    };
}
var ScanOperator = /*@__PURE__*/ (function () {
    function ScanOperator(accumulator, seed, hasSeed) {
        if (hasSeed === void 0) {
            hasSeed = false;
        }
        this.accumulator = accumulator;
        this.seed = seed;
        this.hasSeed = hasSeed;
    }
    ScanOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
    };
    return ScanOperator;
}());
var ScanSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ScanSubscriber, _super);
    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
        var _this = _super.call(this, destination) || this;
        _this.accumulator = accumulator;
        _this._seed = _seed;
        _this.hasSeed = hasSeed;
        _this.index = 0;
        return _this;
    }
    Object.defineProperty(ScanSubscriber.prototype, "seed", {
        get: function () {
            return this._seed;
        },
        set: function (value) {
            this.hasSeed = true;
            this._seed = value;
        },
        enumerable: true,
        configurable: true
    });
    ScanSubscriber.prototype._next = function (value) {
        if (!this.hasSeed) {
            this.seed = value;
            this.destination.next(value);
        }
        else {
            return this._tryNext(value);
        }
    };
    ScanSubscriber.prototype._tryNext = function (value) {
        var index = this.index++;
        var result;
        try {
            result = this.accumulator(this.seed, value, index);
        }
        catch (err) {
            this.destination.error(err);
        }
        this.seed = result;
        this.destination.next(result);
    };
    return ScanSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */
var defaultThrottleConfig = {
    leading: true,
    trailing: false
};

/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async,_throttle PURE_IMPORTS_END */
function throttleTime(duration, scheduler, config) {
    if (scheduler === void 0) {
        scheduler = async;
    }
    if (config === void 0) {
        config = defaultThrottleConfig;
    }
    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };
}
var ThrottleTimeOperator = /*@__PURE__*/ (function () {
    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {
        this.duration = duration;
        this.scheduler = scheduler;
        this.leading = leading;
        this.trailing = trailing;
    }
    ThrottleTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));
    };
    return ThrottleTimeOperator;
}());
var ThrottleTimeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ThrottleTimeSubscriber, _super);
    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
        var _this = _super.call(this, destination) || this;
        _this.duration = duration;
        _this.scheduler = scheduler;
        _this.leading = leading;
        _this.trailing = trailing;
        _this._hasTrailingValue = false;
        _this._trailingValue = null;
        return _this;
    }
    ThrottleTimeSubscriber.prototype._next = function (value) {
        if (this.throttled) {
            if (this.trailing) {
                this._trailingValue = value;
                this._hasTrailingValue = true;
            }
        }
        else {
            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));
            if (this.leading) {
                this.destination.next(value);
            }
            else if (this.trailing) {
                this._trailingValue = value;
                this._hasTrailingValue = true;
            }
        }
    };
    ThrottleTimeSubscriber.prototype._complete = function () {
        if (this._hasTrailingValue) {
            this.destination.next(this._trailingValue);
            this.destination.complete();
        }
        else {
            this.destination.complete();
        }
    };
    ThrottleTimeSubscriber.prototype.clearThrottle = function () {
        var throttled = this.throttled;
        if (throttled) {
            if (this.trailing && this._hasTrailingValue) {
                this.destination.next(this._trailingValue);
                this._trailingValue = null;
                this._hasTrailingValue = false;
            }
            throttled.unsubscribe();
            this.remove(throttled);
            this.throttled = null;
        }
    };
    return ThrottleTimeSubscriber;
}(Subscriber));
function dispatchNext(arg) {
    var subscriber = arg.subscriber;
    subscriber.clearThrottle();
}

/**
 * A collection of shims that provide minimal functionality of the ES6 collections.
 *
 * These implementations are not meant to be used outside of the ResizeObserver
 * modules as they cover only a limited range of use cases.
 */
/* eslint-disable require-jsdoc, valid-jsdoc */
var MapShim = (function () {
    if (typeof Map !== 'undefined') {
        return Map;
    }
    /**
     * Returns index in provided array that matches the specified key.
     *
     * @param {Array<Array>} arr
     * @param {*} key
     * @returns {number}
     */
    function getIndex(arr, key) {
        var result = -1;
        arr.some(function (entry, index) {
            if (entry[0] === key) {
                result = index;
                return true;
            }
            return false;
        });
        return result;
    }
    return /** @class */ (function () {
        function class_1() {
            this.__entries__ = [];
        }
        Object.defineProperty(class_1.prototype, "size", {
            /**
             * @returns {boolean}
             */
            get: function () {
                return this.__entries__.length;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {*} key
         * @returns {*}
         */
        class_1.prototype.get = function (key) {
            var index = getIndex(this.__entries__, key);
            var entry = this.__entries__[index];
            return entry && entry[1];
        };
        /**
         * @param {*} key
         * @param {*} value
         * @returns {void}
         */
        class_1.prototype.set = function (key, value) {
            var index = getIndex(this.__entries__, key);
            if (~index) {
                this.__entries__[index][1] = value;
            }
            else {
                this.__entries__.push([key, value]);
            }
        };
        /**
         * @param {*} key
         * @returns {void}
         */
        class_1.prototype.delete = function (key) {
            var entries = this.__entries__;
            var index = getIndex(entries, key);
            if (~index) {
                entries.splice(index, 1);
            }
        };
        /**
         * @param {*} key
         * @returns {void}
         */
        class_1.prototype.has = function (key) {
            return !!~getIndex(this.__entries__, key);
        };
        /**
         * @returns {void}
         */
        class_1.prototype.clear = function () {
            this.__entries__.splice(0);
        };
        /**
         * @param {Function} callback
         * @param {*} [ctx=null]
         * @returns {void}
         */
        class_1.prototype.forEach = function (callback, ctx) {
            if (ctx === void 0) { ctx = null; }
            for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
                var entry = _a[_i];
                callback.call(ctx, entry[1], entry[0]);
            }
        };
        return class_1;
    }());
})();

/**
 * Detects whether window and document objects are available in current environment.
 */
var isBrowser$2 = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;

// Returns global object of a current environment.
var global$1 = (function () {
    if (typeof global !== 'undefined' && global.Math === Math) {
        return global;
    }
    if (typeof self !== 'undefined' && self.Math === Math) {
        return self;
    }
    if (typeof window !== 'undefined' && window.Math === Math) {
        return window;
    }
    // eslint-disable-next-line no-new-func
    return Function('return this')();
})();

/**
 * A shim for the requestAnimationFrame which falls back to the setTimeout if
 * first one is not supported.
 *
 * @returns {number} Requests' identifier.
 */
var requestAnimationFrame$1 = (function () {
    if (typeof requestAnimationFrame === 'function') {
        // It's required to use a bounded function because IE sometimes throws
        // an "Invalid calling object" error if rAF is invoked without the global
        // object on the left hand side.
        return requestAnimationFrame.bind(global$1);
    }
    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };
})();

// Defines minimum timeout before adding a trailing call.
var trailingTimeout = 2;
/**
 * Creates a wrapper function which ensures that provided callback will be
 * invoked only once during the specified delay period.
 *
 * @param {Function} callback - Function to be invoked after the delay period.
 * @param {number} delay - Delay after which to invoke callback.
 * @returns {Function}
 */
function throttle (callback, delay) {
    var leadingCall = false, trailingCall = false, lastCallTime = 0;
    /**
     * Invokes the original callback function and schedules new invocation if
     * the "proxy" was called during current request.
     *
     * @returns {void}
     */
    function resolvePending() {
        if (leadingCall) {
            leadingCall = false;
            callback();
        }
        if (trailingCall) {
            proxy();
        }
    }
    /**
     * Callback invoked after the specified delay. It will further postpone
     * invocation of the original function delegating it to the
     * requestAnimationFrame.
     *
     * @returns {void}
     */
    function timeoutCallback() {
        requestAnimationFrame$1(resolvePending);
    }
    /**
     * Schedules invocation of the original function.
     *
     * @returns {void}
     */
    function proxy() {
        var timeStamp = Date.now();
        if (leadingCall) {
            // Reject immediately following calls.
            if (timeStamp - lastCallTime < trailingTimeout) {
                return;
            }
            // Schedule new call to be in invoked when the pending one is resolved.
            // This is important for "transitions" which never actually start
            // immediately so there is a chance that we might miss one if change
            // happens amids the pending invocation.
            trailingCall = true;
        }
        else {
            leadingCall = true;
            trailingCall = false;
            setTimeout(timeoutCallback, delay);
        }
        lastCallTime = timeStamp;
    }
    return proxy;
}

// Minimum delay before invoking the update of observers.
var REFRESH_DELAY = 20;
// A list of substrings of CSS properties used to find transition events that
// might affect dimensions of observed elements.
var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];
// Check if MutationObserver is available.
var mutationObserverSupported = typeof MutationObserver !== 'undefined';
/**
 * Singleton controller class which handles updates of ResizeObserver instances.
 */
var ResizeObserverController = /** @class */ (function () {
    /**
     * Creates a new instance of ResizeObserverController.
     *
     * @private
     */
    function ResizeObserverController() {
        /**
         * Indicates whether DOM listeners have been added.
         *
         * @private {boolean}
         */
        this.connected_ = false;
        /**
         * Tells that controller has subscribed for Mutation Events.
         *
         * @private {boolean}
         */
        this.mutationEventsAdded_ = false;
        /**
         * Keeps reference to the instance of MutationObserver.
         *
         * @private {MutationObserver}
         */
        this.mutationsObserver_ = null;
        /**
         * A list of connected observers.
         *
         * @private {Array<ResizeObserverSPI>}
         */
        this.observers_ = [];
        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
    }
    /**
     * Adds observer to observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be added.
     * @returns {void}
     */
    ResizeObserverController.prototype.addObserver = function (observer) {
        if (!~this.observers_.indexOf(observer)) {
            this.observers_.push(observer);
        }
        // Add listeners if they haven't been added yet.
        if (!this.connected_) {
            this.connect_();
        }
    };
    /**
     * Removes observer from observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be removed.
     * @returns {void}
     */
    ResizeObserverController.prototype.removeObserver = function (observer) {
        var observers = this.observers_;
        var index = observers.indexOf(observer);
        // Remove observer if it's present in registry.
        if (~index) {
            observers.splice(index, 1);
        }
        // Remove listeners if controller has no connected observers.
        if (!observers.length && this.connected_) {
            this.disconnect_();
        }
    };
    /**
     * Invokes the update of observers. It will continue running updates insofar
     * it detects changes.
     *
     * @returns {void}
     */
    ResizeObserverController.prototype.refresh = function () {
        var changesDetected = this.updateObservers_();
        // Continue running updates if changes have been detected as there might
        // be future ones caused by CSS transitions.
        if (changesDetected) {
            this.refresh();
        }
    };
    /**
     * Updates every observer from observers list and notifies them of queued
     * entries.
     *
     * @private
     * @returns {boolean} Returns "true" if any observer has detected changes in
     *      dimensions of it's elements.
     */
    ResizeObserverController.prototype.updateObservers_ = function () {
        // Collect observers that have active observations.
        var activeObservers = this.observers_.filter(function (observer) {
            return observer.gatherActive(), observer.hasActive();
        });
        // Deliver notifications in a separate cycle in order to avoid any
        // collisions between observers, e.g. when multiple instances of
        // ResizeObserver are tracking the same element and the callback of one
        // of them changes content dimensions of the observed target. Sometimes
        // this may result in notifications being blocked for the rest of observers.
        activeObservers.forEach(function (observer) { return observer.broadcastActive(); });
        return activeObservers.length > 0;
    };
    /**
     * Initializes DOM listeners.
     *
     * @private
     * @returns {void}
     */
    ResizeObserverController.prototype.connect_ = function () {
        // Do nothing if running in a non-browser environment or if listeners
        // have been already added.
        if (!isBrowser$2 || this.connected_) {
            return;
        }
        // Subscription to the "Transitionend" event is used as a workaround for
        // delayed transitions. This way it's possible to capture at least the
        // final state of an element.
        document.addEventListener('transitionend', this.onTransitionEnd_);
        window.addEventListener('resize', this.refresh);
        if (mutationObserverSupported) {
            this.mutationsObserver_ = new MutationObserver(this.refresh);
            this.mutationsObserver_.observe(document, {
                attributes: true,
                childList: true,
                characterData: true,
                subtree: true
            });
        }
        else {
            document.addEventListener('DOMSubtreeModified', this.refresh);
            this.mutationEventsAdded_ = true;
        }
        this.connected_ = true;
    };
    /**
     * Removes DOM listeners.
     *
     * @private
     * @returns {void}
     */
    ResizeObserverController.prototype.disconnect_ = function () {
        // Do nothing if running in a non-browser environment or if listeners
        // have been already removed.
        if (!isBrowser$2 || !this.connected_) {
            return;
        }
        document.removeEventListener('transitionend', this.onTransitionEnd_);
        window.removeEventListener('resize', this.refresh);
        if (this.mutationsObserver_) {
            this.mutationsObserver_.disconnect();
        }
        if (this.mutationEventsAdded_) {
            document.removeEventListener('DOMSubtreeModified', this.refresh);
        }
        this.mutationsObserver_ = null;
        this.mutationEventsAdded_ = false;
        this.connected_ = false;
    };
    /**
     * "Transitionend" event handler.
     *
     * @private
     * @param {TransitionEvent} event
     * @returns {void}
     */
    ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {
        var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;
        // Detect whether transition may affect dimensions of an element.
        var isReflowProperty = transitionKeys.some(function (key) {
            return !!~propertyName.indexOf(key);
        });
        if (isReflowProperty) {
            this.refresh();
        }
    };
    /**
     * Returns instance of the ResizeObserverController.
     *
     * @returns {ResizeObserverController}
     */
    ResizeObserverController.getInstance = function () {
        if (!this.instance_) {
            this.instance_ = new ResizeObserverController();
        }
        return this.instance_;
    };
    /**
     * Holds reference to the controller's instance.
     *
     * @private {ResizeObserverController}
     */
    ResizeObserverController.instance_ = null;
    return ResizeObserverController;
}());

/**
 * Defines non-writable/enumerable properties of the provided target object.
 *
 * @param {Object} target - Object for which to define properties.
 * @param {Object} props - Properties to be defined.
 * @returns {Object} Target object.
 */
var defineConfigurable = (function (target, props) {
    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
        var key = _a[_i];
        Object.defineProperty(target, key, {
            value: props[key],
            enumerable: false,
            writable: false,
            configurable: true
        });
    }
    return target;
});

/**
 * Returns the global object associated with provided element.
 *
 * @param {Object} target
 * @returns {Object}
 */
var getWindowOf = (function (target) {
    // Assume that the element is an instance of Node, which means that it
    // has the "ownerDocument" property from which we can retrieve a
    // corresponding global object.
    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
    // Return the local global object if it's not possible extract one from
    // provided element.
    return ownerGlobal || global$1;
});

// Placeholder of an empty content rectangle.
var emptyRect = createRectInit(0, 0, 0, 0);
/**
 * Converts provided string to a number.
 *
 * @param {number|string} value
 * @returns {number}
 */
function toFloat(value) {
    return parseFloat(value) || 0;
}
/**
 * Extracts borders size from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @param {...string} positions - Borders positions (top, right, ...)
 * @returns {number}
 */
function getBordersSize$1(styles) {
    var positions = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        positions[_i - 1] = arguments[_i];
    }
    return positions.reduce(function (size, position) {
        var value = styles['border-' + position + '-width'];
        return size + toFloat(value);
    }, 0);
}
/**
 * Extracts paddings sizes from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @returns {Object} Paddings box.
 */
function getPaddings(styles) {
    var positions = ['top', 'right', 'bottom', 'left'];
    var paddings = {};
    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
        var position = positions_1[_i];
        var value = styles['padding-' + position];
        paddings[position] = toFloat(value);
    }
    return paddings;
}
/**
 * Calculates content rectangle of provided SVG element.
 *
 * @param {SVGGraphicsElement} target - Element content rectangle of which needs
 *      to be calculated.
 * @returns {DOMRectInit}
 */
function getSVGContentRect(target) {
    var bbox = target.getBBox();
    return createRectInit(0, 0, bbox.width, bbox.height);
}
/**
 * Calculates content rectangle of provided HTMLElement.
 *
 * @param {HTMLElement} target - Element for which to calculate the content rectangle.
 * @returns {DOMRectInit}
 */
function getHTMLElementContentRect(target) {
    // Client width & height properties can't be
    // used exclusively as they provide rounded values.
    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
    // By this condition we can catch all non-replaced inline, hidden and
    // detached elements. Though elements with width & height properties less
    // than 0.5 will be discarded as well.
    //
    // Without it we would need to implement separate methods for each of
    // those cases and it's not possible to perform a precise and performance
    // effective test for hidden elements. E.g. even jQuery's ':visible' filter
    // gives wrong results for elements with width & height less than 0.5.
    if (!clientWidth && !clientHeight) {
        return emptyRect;
    }
    var styles = getWindowOf(target).getComputedStyle(target);
    var paddings = getPaddings(styles);
    var horizPad = paddings.left + paddings.right;
    var vertPad = paddings.top + paddings.bottom;
    // Computed styles of width & height are being used because they are the
    // only dimensions available to JS that contain non-rounded values. It could
    // be possible to utilize the getBoundingClientRect if only it's data wasn't
    // affected by CSS transformations let alone paddings, borders and scroll bars.
    var width = toFloat(styles.width), height = toFloat(styles.height);
    // Width & height include paddings and borders when the 'border-box' box
    // model is applied (except for IE).
    if (styles.boxSizing === 'border-box') {
        // Following conditions are required to handle Internet Explorer which
        // doesn't include paddings and borders to computed CSS dimensions.
        //
        // We can say that if CSS dimensions + paddings are equal to the "client"
        // properties then it's either IE, and thus we don't need to subtract
        // anything, or an element merely doesn't have paddings/borders styles.
        if (Math.round(width + horizPad) !== clientWidth) {
            width -= getBordersSize$1(styles, 'left', 'right') + horizPad;
        }
        if (Math.round(height + vertPad) !== clientHeight) {
            height -= getBordersSize$1(styles, 'top', 'bottom') + vertPad;
        }
    }
    // Following steps can't be applied to the document's root element as its
    // client[Width/Height] properties represent viewport area of the window.
    // Besides, it's as well not necessary as the <html> itself neither has
    // rendered scroll bars nor it can be clipped.
    if (!isDocumentElement(target)) {
        // In some browsers (only in Firefox, actually) CSS width & height
        // include scroll bars size which can be removed at this step as scroll
        // bars are the only difference between rounded dimensions + paddings
        // and "client" properties, though that is not always true in Chrome.
        var vertScrollbar = Math.round(width + horizPad) - clientWidth;
        var horizScrollbar = Math.round(height + vertPad) - clientHeight;
        // Chrome has a rather weird rounding of "client" properties.
        // E.g. for an element with content width of 314.2px it sometimes gives
        // the client width of 315px and for the width of 314.7px it may give
        // 314px. And it doesn't happen all the time. So just ignore this delta
        // as a non-relevant.
        if (Math.abs(vertScrollbar) !== 1) {
            width -= vertScrollbar;
        }
        if (Math.abs(horizScrollbar) !== 1) {
            height -= horizScrollbar;
        }
    }
    return createRectInit(paddings.left, paddings.top, width, height);
}
/**
 * Checks whether provided element is an instance of the SVGGraphicsElement.
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */
var isSVGGraphicsElement = (function () {
    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
    // interface.
    if (typeof SVGGraphicsElement !== 'undefined') {
        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };
    }
    // If it's so, then check that element is at least an instance of the
    // SVGElement and that it has the "getBBox" method.
    // eslint-disable-next-line no-extra-parens
    return function (target) { return (target instanceof getWindowOf(target).SVGElement &&
        typeof target.getBBox === 'function'); };
})();
/**
 * Checks whether provided element is a document element (<html>).
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */
function isDocumentElement(target) {
    return target === getWindowOf(target).document.documentElement;
}
/**
 * Calculates an appropriate content rectangle for provided html or svg element.
 *
 * @param {Element} target - Element content rectangle of which needs to be calculated.
 * @returns {DOMRectInit}
 */
function getContentRect(target) {
    if (!isBrowser$2) {
        return emptyRect;
    }
    if (isSVGGraphicsElement(target)) {
        return getSVGContentRect(target);
    }
    return getHTMLElementContentRect(target);
}
/**
 * Creates rectangle with an interface of the DOMRectReadOnly.
 * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
 *
 * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
 * @returns {DOMRectReadOnly}
 */
function createReadOnlyRect(_a) {
    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
    // If DOMRectReadOnly is available use it as a prototype for the rectangle.
    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
    var rect = Object.create(Constr.prototype);
    // Rectangle's properties are not writable and non-enumerable.
    defineConfigurable(rect, {
        x: x, y: y, width: width, height: height,
        top: y,
        right: x + width,
        bottom: height + y,
        left: x
    });
    return rect;
}
/**
 * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
 * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
 *
 * @param {number} x - X coordinate.
 * @param {number} y - Y coordinate.
 * @param {number} width - Rectangle's width.
 * @param {number} height - Rectangle's height.
 * @returns {DOMRectInit}
 */
function createRectInit(x, y, width, height) {
    return { x: x, y: y, width: width, height: height };
}

/**
 * Class that is responsible for computations of the content rectangle of
 * provided DOM element and for keeping track of it's changes.
 */
var ResizeObservation = /** @class */ (function () {
    /**
     * Creates an instance of ResizeObservation.
     *
     * @param {Element} target - Element to be observed.
     */
    function ResizeObservation(target) {
        /**
         * Broadcasted width of content rectangle.
         *
         * @type {number}
         */
        this.broadcastWidth = 0;
        /**
         * Broadcasted height of content rectangle.
         *
         * @type {number}
         */
        this.broadcastHeight = 0;
        /**
         * Reference to the last observed content rectangle.
         *
         * @private {DOMRectInit}
         */
        this.contentRect_ = createRectInit(0, 0, 0, 0);
        this.target = target;
    }
    /**
     * Updates content rectangle and tells whether it's width or height properties
     * have changed since the last broadcast.
     *
     * @returns {boolean}
     */
    ResizeObservation.prototype.isActive = function () {
        var rect = getContentRect(this.target);
        this.contentRect_ = rect;
        return (rect.width !== this.broadcastWidth ||
            rect.height !== this.broadcastHeight);
    };
    /**
     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
     * from the corresponding properties of the last observed content rectangle.
     *
     * @returns {DOMRectInit} Last observed content rectangle.
     */
    ResizeObservation.prototype.broadcastRect = function () {
        var rect = this.contentRect_;
        this.broadcastWidth = rect.width;
        this.broadcastHeight = rect.height;
        return rect;
    };
    return ResizeObservation;
}());

var ResizeObserverEntry = /** @class */ (function () {
    /**
     * Creates an instance of ResizeObserverEntry.
     *
     * @param {Element} target - Element that is being observed.
     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
     */
    function ResizeObserverEntry(target, rectInit) {
        var contentRect = createReadOnlyRect(rectInit);
        // According to the specification following properties are not writable
        // and are also not enumerable in the native implementation.
        //
        // Property accessors are not being used as they'd require to define a
        // private WeakMap storage which may cause memory leaks in browsers that
        // don't support this type of collections.
        defineConfigurable(this, { target: target, contentRect: contentRect });
    }
    return ResizeObserverEntry;
}());

var ResizeObserverSPI = /** @class */ (function () {
    /**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback function that is invoked
     *      when one of the observed elements changes it's content dimensions.
     * @param {ResizeObserverController} controller - Controller instance which
     *      is responsible for the updates of observer.
     * @param {ResizeObserver} callbackCtx - Reference to the public
     *      ResizeObserver instance which will be passed to callback function.
     */
    function ResizeObserverSPI(callback, controller, callbackCtx) {
        /**
         * Collection of resize observations that have detected changes in dimensions
         * of elements.
         *
         * @private {Array<ResizeObservation>}
         */
        this.activeObservations_ = [];
        /**
         * Registry of the ResizeObservation instances.
         *
         * @private {Map<Element, ResizeObservation>}
         */
        this.observations_ = new MapShim();
        if (typeof callback !== 'function') {
            throw new TypeError('The callback provided as parameter 1 is not a function.');
        }
        this.callback_ = callback;
        this.controller_ = controller;
        this.callbackCtx_ = callbackCtx;
    }
    /**
     * Starts observing provided element.
     *
     * @param {Element} target - Element to be observed.
     * @returns {void}
     */
    ResizeObserverSPI.prototype.observe = function (target) {
        if (!arguments.length) {
            throw new TypeError('1 argument required, but only 0 present.');
        }
        // Do nothing if current environment doesn't have the Element interface.
        if (typeof Element === 'undefined' || !(Element instanceof Object)) {
            return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
            throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        // Do nothing if element is already being observed.
        if (observations.has(target)) {
            return;
        }
        observations.set(target, new ResizeObservation(target));
        this.controller_.addObserver(this);
        // Force the update of observations.
        this.controller_.refresh();
    };
    /**
     * Stops observing provided element.
     *
     * @param {Element} target - Element to stop observing.
     * @returns {void}
     */
    ResizeObserverSPI.prototype.unobserve = function (target) {
        if (!arguments.length) {
            throw new TypeError('1 argument required, but only 0 present.');
        }
        // Do nothing if current environment doesn't have the Element interface.
        if (typeof Element === 'undefined' || !(Element instanceof Object)) {
            return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
            throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        // Do nothing if element is not being observed.
        if (!observations.has(target)) {
            return;
        }
        observations.delete(target);
        if (!observations.size) {
            this.controller_.removeObserver(this);
        }
    };
    /**
     * Stops observing all elements.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.disconnect = function () {
        this.clearActive();
        this.observations_.clear();
        this.controller_.removeObserver(this);
    };
    /**
     * Collects observation instances the associated element of which has changed
     * it's content rectangle.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.gatherActive = function () {
        var _this = this;
        this.clearActive();
        this.observations_.forEach(function (observation) {
            if (observation.isActive()) {
                _this.activeObservations_.push(observation);
            }
        });
    };
    /**
     * Invokes initial callback function with a list of ResizeObserverEntry
     * instances collected from active resize observations.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.broadcastActive = function () {
        // Do nothing if observer doesn't have active observations.
        if (!this.hasActive()) {
            return;
        }
        var ctx = this.callbackCtx_;
        // Create ResizeObserverEntry instance for every active observation.
        var entries = this.activeObservations_.map(function (observation) {
            return new ResizeObserverEntry(observation.target, observation.broadcastRect());
        });
        this.callback_.call(ctx, entries, ctx);
        this.clearActive();
    };
    /**
     * Clears the collection of active observations.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.clearActive = function () {
        this.activeObservations_.splice(0);
    };
    /**
     * Tells whether observer has active observations.
     *
     * @returns {boolean}
     */
    ResizeObserverSPI.prototype.hasActive = function () {
        return this.activeObservations_.length > 0;
    };
    return ResizeObserverSPI;
}());

// Registry of internal observers. If WeakMap is not available use current shim
// for the Map collection as it has all required methods and because WeakMap
// can't be fully polyfilled anyway.
var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
/**
 * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
 * exposing only those methods and properties that are defined in the spec.
 */
var ResizeObserver = /** @class */ (function () {
    /**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback that is invoked when
     *      dimensions of the observed elements change.
     */
    function ResizeObserver(callback) {
        if (!(this instanceof ResizeObserver)) {
            throw new TypeError('Cannot call a class as a function.');
        }
        if (!arguments.length) {
            throw new TypeError('1 argument required, but only 0 present.');
        }
        var controller = ResizeObserverController.getInstance();
        var observer = new ResizeObserverSPI(callback, controller, this);
        observers.set(this, observer);
    }
    return ResizeObserver;
}());
// Expose public methods of ResizeObserver.
[
    'observe',
    'unobserve',
    'disconnect'
].forEach(function (method) {
    ResizeObserver.prototype[method] = function () {
        var _a;
        return (_a = observers.get(this))[method].apply(_a, arguments);
    };
});

var index = (function () {
    // Export existing implementation if available.
    if (typeof global$1.ResizeObserver !== 'undefined') {
        return global$1.ResizeObserver;
    }
    return ResizeObserver;
})();

function safeGetValue(column, record, rowIndex) {
    if (column.getValue) {
        return column.getValue(record, rowIndex);
    }
    return record[column.code];
}
function safeGetRowKey(primaryKey, record, rowIndex) {
    let key;
    if (typeof primaryKey === 'string') {
        key = record[primaryKey];
    }
    else if (typeof primaryKey === 'function') {
        key = primaryKey(record, rowIndex);
    }
    if (key == null) {
        key = String(rowIndex);
    }
    return key;
}
function safeGetCellProps(column, record, rowIndex) {
    if (column.getCellProps) {
        const value = safeGetValue(column, record, rowIndex);
        return column.getCellProps(value, record, rowIndex) || {};
    }
    return {};
}
function safeRender(column, record, rowIndex) {
    const value = safeGetValue(column, record, rowIndex);
    if (column.render) {
        return column.render(value, record, rowIndex);
    }
    return value;
}

const prefix$1 = 'art-';
// artTableWrapper modifiers: use-outer-border
// artTable modifiers: lock empty sticky has-header
const Classes = {
    /** BaseTable 表格组件的外层包裹 div */
    artTableWrapper: `${prefix$1}table-wrapper`,
    /** BaseTable 主要内容 div；包含 3 个 left/main/right section */
    artTable: `${prefix$1}table`,
    lockShadow: `${prefix$1}lock-shadow`,
    mainSection: `${prefix$1}main-section`,
    leftSection: `${prefix$1}left-section`,
    rightSection: `${prefix$1}right-section`,
    tableInner: `${prefix$1}table-inner`,
    tableHeaderWrapper: `${prefix$1}table-header-wrapper`,
    tableHeader: `${prefix$1}table-header`,
    tableBody: `${prefix$1}table-body`,
    /** 表格行 */
    tableRow: `${prefix$1}table-row`,
    /** 表头行 */
    tableHeaderRow: `${prefix$1}table-header-row`,
    /** 单元格 */
    tableCell: `${prefix$1}table-cell`,
    /** 表头的单元格 */
    tableHeaderCell: `${prefix$1}table-header-cell`,
    virtualBlank: `${prefix$1}virtual-blank`,
    stickyScroll: `${prefix$1}sticky-scroll`,
    stickyScrollItem: `${prefix$1}sticky-scroll-item`,
    /** 空白表格的（唯一）单元格 */
    emptyTableCell: `${prefix$1}empty-table-cell`,
    /** 数据为空时表格内容的外层 div */
    emptyWrapper: `${prefix$1}empty-wrapper`,
    emptyImage: `${prefix$1}empty-image`,
    emptyTips: `${prefix$1}empty-tips`,
    loadingWrapper: `${prefix$1}loading-wrapper`,
    loadingIndicatorWrapper: `${prefix$1}loading-indicator-wrapper`,
    loadingIndicator: `${prefix$1}loading-indicator`,
    loadingIndicatorIcon: `${prefix$1}loading-indicator-icon`,
    loadingContentWrapper: `${prefix$1}loading-content-wrapper`,
};
const Z = {
    lock: 20,
    scrollItem: 30,
    header: 5,
    virtual: 3,
    tableInner: 2,
    shadow: 1,
};
const ArtTableWrapper = styled__default.div `
  --color: #333;
  --bgcolor: white;
  --header-color: #5a6c84;
  --header-bgcolor: #e9edf2;
  --border-color: #dfe3e8;

  --row-height: 48px;
  --row-hover-color: #f5f5f5;
  --header-row-height: 32px;

  --cell-border: 1px solid var(--border-color);
  --cell-border-horizontal: var(--cell-border);
  --cell-border-vertical: var(--cell-border);

  --header-cell-border: 1px solid var(--border-color);
  --header-cell-border-horizontal: var(--header-cell-border);
  --header-cell-border-vertical: var(--header-cell-border);

  --cell-border-top: var(--cell-border-horizontal);
  --cell-border-bottom: var(--cell-border-horizontal);
  --cell-border-left: var(--cell-border-vertical);
  --cell-border-right: var(--cell-border-vertical);

  --header-cell-border-top: var(--header-cell-border-horizontal);
  --header-cell-border-bottom: var(--header-cell-border-horizontal);
  --header-cell-border-left: var(--header-cell-border-vertical);
  --header-cell-border-right: var(--header-cell-border-vertical);

  background: var(--bgcolor);
  box-sizing: border-box;
  * {
    box-sizing: border-box;
  }

  // 表格外边框由 art-table-wrapper 提供，而不是由单元格提供
  &.use-outer-border {
    border: 1px solid var(--border-color);

    .${Classes.tableCell}.first, .${Classes.tableHeaderCell}.first {
      border-left: none;
    }
    .${Classes.tableCell}.last, .${Classes.tableHeaderCell}.last {
      border-right: none;
    }
    .${Classes.tableHeaderRow}.first .${Classes.tableHeaderCell}, .${Classes.tableRow}.first .${Classes.tableCell} {
      border-top: none;
    }
    .${Classes.tableRow}.last .${Classes.tableCell} {
      border-bottom: none;
    }
  }

  // 表格 header 总是从 body 中同步滚动 scrollLeft
  .${Classes.tableHeader} {
    overflow: hidden;
  }

  .${Classes.virtualBlank} {
    background: var(--bgcolor);
    // 这里是为了遮盖 z-index=1 的 lock-shadow
    z-index: ${Z.virtual};
  }
`;
const MainSection = styled__default.div `
  // 表格的基本样式
  .${Classes.tableBody} {
    overflow: auto;
  }
  .${Classes.tableHeader} {
    overflow: hidden;
  }
`;
const EmptyTableCell = styled__default.td `
  height: 200px;

  .use-outer-border & {
    border: none;
  }
`;
const ArtTable = styled__default.div `
  // 表格的主要样式
  cursor: default;
  color: var(--color);
  font-size: 12px;
  line-height: 1.28571;
  position: relative;

  &.has-header {
    .${Classes.tableRow}.first td {
      border-top: none;
    }
  }

  &.sticky {
    .${Classes.tableHeaderWrapper} {
      position: sticky;
      top: 0;
      z-index: ${Z.header};
    }
  }

  .${Classes.tableHeaderWrapper} {
    background: var(--header-bgcolor);
  }

  .${Classes.tableRow} {
    &.hovered {
      background: var(--row-hover-color);
    }
  }

  table {
    width: 100%;
    table-layout: fixed;
    background: var(--bgcolor);
  }

  .${Classes.tableCell} {
    height: var(--row-height);
  }
  td,
  th {
    padding: 8px 12px;
    text-overflow: ellipsis;
    word-break: break-all;
    overflow: hidden;
  }

  // 表头单元格的基本样式
  th {
    height: var(--header-row-height);
    color: var(--header-color);
    font-weight: 400;
    background: var(--header-bgcolor);
    text-align: left;
  }

  // 表格的边框样式
  table {
    border-collapse: collapse;
    border-spacing: 0;
  }

  td {
    border-left: var(--cell-border-left);
    border-right: var(--cell-border-right);
    border-top: var(--cell-border-top);
    border-bottom: var(--cell-border-bottom);
  }

  th {
    border-left: var(--header-cell-border-left);
    border-right: var(--header-cell-border-right);
    border-top: var(--header-cell-border-top);
    border-bottom: var(--header-cell-border-bottom);
  }
`;
const LockSectionBase = styled__default.div `
  z-index: ${Z.lock};

  table {
    width: auto;
    overflow: hidden;
  }

  .${Classes.tableBody} {
    overflow: hidden;
  }
`;
const LeftSection = styled__default(LockSectionBase) `
  position: absolute;
  left: 0;
  top: 0;

  &.${Classes.lockShadow} {
    &::before {
      content: '';
      position: absolute;
      top: 6px;
      width: 10px;
      bottom: 6px;
      z-index: ${Z.shadow};
      right: 0;
      box-shadow: 0 0 5px 1px rgba(0, 0, 0, 0.3);
    }
    > .${Classes.tableInner} {
      position: relative;
      // 这里是为了遮盖 z-index=1 的 lock-shadow
      z-index: ${Z.tableInner};
    }
  }
`;
const RightSection = styled__default(LockSectionBase) `
  position: absolute;
  right: 0;
  top: 0;

  &.${Classes.lockShadow} {
    &::before {
      content: '';
      position: absolute;
      top: 6px;
      width: 10px;
      bottom: 6px;
      z-index: ${Z.shadow};
      left: 0;
      box-shadow: 0 0 5px 1px rgba(0, 0, 0, 0.3);
    }
    > .${Classes.tableInner} {
      position: relative;
      z-index: ${Z.tableInner};
    }
  }
`;
const EmptyWrapper = styled__default.div `
  color: #99a3b3;
  font-size: 12px;
  text-align: center;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);

  .${Classes.emptyImage} {
    width: 50px;
    height: 50px;
  }

  .${Classes.emptyTips} {
    margin-top: 16px;
    line-height: 1.5;
  }
`;
const StickyScroll = styled__default.div `
  overflow: auto;
  position: sticky;
  bottom: 0;
  z-index: ${Z.scrollItem};
  margin-top: -17px;

  .${Classes.stickyScrollItem} {
    // 必须有高度才能出现滚动条
    height: 1px;
    visibility: hidden;
  }
`;
const Styled = {
    ArtTableWrapper,
    ArtTable,
    MainSection,
    LeftSection,
    RightSection,
    StickyScroll,
    EmptyWrapper,
    EmptyTableCell,
};

EmptyTable.defaultProps = {
    emptyContent: (React.createElement(React.Fragment, null,
        React.createElement("img", { alt: "empty-image", className: Classes.emptyImage, src: "//img.alicdn.com/tfs/TB1l1LcM3HqK1RjSZJnXXbNLpXa-50-50.svg" }),
        React.createElement("div", { className: Classes.emptyTips },
            "\u6CA1\u6709\u7B26\u5408\u67E5\u8BE2\u6761\u4EF6\u7684\u6570\u636E",
            React.createElement("br", null),
            "\u8BF7\u4FEE\u6539\u6761\u4EF6\u540E\u91CD\u65B0\u67E5\u8BE2"))),
};
function EmptyTable({ colgroup, colSpan, isLoading, emptyContent, }) {
    return (React.createElement("table", null,
        colgroup,
        React.createElement("tbody", null,
            React.createElement("tr", null,
                React.createElement(Styled.EmptyTableCell, { className: Classes.emptyTableCell, colSpan: colSpan }, !isLoading && React.createElement(Styled.EmptyWrapper, { className: Classes.emptyWrapper }, emptyContent))))));
}

function isLeafNode(node) {
    return node.children == null || node.children.length === 0;
}

/** 遍历所有节点，并将节点收集到一个数组中.
 * order 参数可用于指定遍历规则：
 * * `pre` 前序遍历
 * * `post` 后续遍历
 * * `leaf-only` 忽略内部节点，只收集叶子节点
 * */
function collectNodes(nodes, order) {
    const result = [];
    dfs(nodes);
    return result;
    function dfs(nodes) {
        for (const node of nodes) {
            if (isLeafNode(node)) {
                result.push(node);
            }
            else {
                if (order === 'pre') {
                    result.push(node);
                    dfs(node.children);
                }
                else if (order === 'post') {
                    dfs(node.children);
                    result.push(node);
                }
                else {
                    dfs(node.children);
                }
            }
        }
    }
}

/** 获取一棵树的高度/深度 (0-based) */
function getTreeDepth(nodes) {
    let maxDepth = -1;
    dfs(nodes, 0);
    return maxDepth;
    function dfs(columns, depth) {
        for (const column of columns) {
            if (isLeafNode(column)) {
                maxDepth = Math.max(maxDepth, depth);
            }
            else {
                dfs(column.children, depth + 1);
            }
        }
    }
}

function groupBy(list, iteratee) {
    const groups = {};
    for (const item of list) {
        const key = iteratee(item);
        if (groups[key] == null) {
            groups[key] = [];
        }
        groups[key].push(item);
    }
    return groups;
}
function fromEntries(entries) {
    const result = {};
    for (const [key, value] of entries) {
        result[key] = value;
    }
    return result;
}

/** 在表格的单元格的渲染过程中，先渲染的单元格的 colSpan/rowSpan 会影响到后续单元格是否被渲染
 * `SpanManager` 会在内部维护一份状态来记录最近渲染单元格的 colSpan/rowSpan，
 * 方便后续的单元格快速判断 "是否需要跳过渲染" */
class SpanManager {
    constructor() {
        this.rects = [];
    }
    testSkip(rowIndex, colIndex) {
        return this.rects.some(({ left, right, top, bottom }) => left <= colIndex && colIndex < right && top <= rowIndex && rowIndex < bottom);
    }
    stripUpwards(rowIndex) {
        this.rects = this.rects.filter(rect => rect.bottom > rowIndex);
    }
    add(rowIndex, colIndex, colSpan, rowSpan) {
        this.rects.push({
            left: colIndex,
            right: colIndex + colSpan,
            top: rowIndex,
            bottom: rowIndex + rowSpan,
        });
    }
}

/** styled-components 类库的版本，ali-react-table 同时支持 v3 和 v5 */
const STYLED_VERSION = createGlobalStyle != null ? 'v5' : 'v3';
const STYLED_REF_PROP = STYLED_VERSION === 'v3' ? 'innerRef' : 'ref';
const OVERSCAN_SIZE = 100;
const LOADING_ICON_SIZE = 40;
const AUTO_VIRTUAL_THRESHOLD = 80;
function sum(arr) {
    let result = 0;
    arr.forEach((x) => {
        result += x;
    });
    return result;
}
function batchAdjustLeftCellSizes(leftTableRows, mainTableRows) {
    const leftRowCount = leftTableRows.length;
    // 批量获取 left-section 中每个单元格在 main-section 中对应单元格的尺寸
    const sizes = [];
    for (let i = 0; i < leftRowCount; i++) {
        const leftRow = leftTableRows.item(i);
        const leftCellCount = leftRow.cells.length;
        const mainRow = mainTableRows.item(i);
        for (let j = 0; j < leftCellCount; j++) {
            const cell = mainRow.cells.item(j);
            sizes.push({ h: cell.offsetHeight, w: cell.offsetWidth });
        }
    }
    // 批量设置 left-section 中的单元格的尺寸
    let n = 0;
    for (let i = 0; i < leftRowCount; i++) {
        const leftRow = leftTableRows.item(i);
        const cellCount = leftRow.cells.length;
        for (let j = 0; j < cellCount; j++) {
            const cell = leftRow.cells.item(j);
            const size = sizes[n];
            n += 1;
            cell.style.width = `${size.w}px`;
            cell.style.height = `${size.h}px`;
        }
    }
}
function batchAdjustRightCellSizes(rightTableRows, mainTableRows) {
    const rightRowCount = rightTableRows.length;
    // 批量获取 right-section 中每个单元格在 main-section 中对应单元格的尺寸
    // 获取尺寸时注意 right-section/main-section 是"靠右对齐"
    // 古下面代码中是"从右往左"迭代 main-section 中的单元格的
    const sizes = [];
    for (let i = 0; i < rightRowCount; i++) {
        const rightRow = rightTableRows.item(i);
        const rightCellCount = rightRow.cells.length;
        const mainRow = mainTableRows.item(i);
        const mainCellCount = mainRow.cells.length;
        for (let j = 0; j < rightCellCount; j++) {
            const mainCell = mainRow.cells.item(mainCellCount - 1 - j);
            sizes.push({ h: mainCell.offsetHeight, w: mainCell.offsetWidth });
        }
    }
    // 批量设置 right-section 中的单元格的尺寸
    let n = 0;
    for (let i = 0; i < rightRowCount; i++) {
        const rightRow = rightTableRows.item(i);
        const rightCellCount = rightRow.cells.length;
        for (let j = 0; j < rightCellCount; j++) {
            // 从右往左设置单元格尺寸
            const rightCell = rightRow.cells.item(rightCellCount - 1 - j);
            const size = sizes[n];
            n += 1;
            rightCell.style.width = `${size.w}px`;
            rightCell.style.height = `${size.h}px`;
        }
    }
}
// 使用 defer 避免过早引用 window，导致在 SSR 场景下报错
const throttledWindowResize$ = defer(() => fromEvent(window, 'resize').pipe(throttleTime(150, asyncScheduler, { leading: true, trailing: true })));
/** 获取默认的滚动条大小 */
function getScrollbarSizeImpl() {
    const scrollDiv = document.createElement('div');
    scrollDiv.style.position = 'absolute';
    scrollDiv.style.width = '100px';
    scrollDiv.style.height = '100px';
    scrollDiv.style.overflow = 'scroll';
    scrollDiv.style.top = '-9999px';
    document.body.appendChild(scrollDiv);
    const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    const scrollbarHeight = scrollDiv.offsetHeight - scrollDiv.clientHeight;
    document.body.removeChild(scrollDiv);
    return { width: scrollbarWidth, height: scrollbarHeight };
}
let scrollBarSize$;
function getScrollbarSize() {
    if (scrollBarSize$ == null) {
        scrollBarSize$ = new BehaviorSubject(getScrollbarSizeImpl());
        throttledWindowResize$.pipe(map(() => getScrollbarSizeImpl())).subscribe(scrollBarSize$);
    }
    return scrollBarSize$.value;
}
/** 同步两个元素之间的 scrollLeft
 *  在 x.onScroll 中设置 y.scrollLeft 将会触发 y.onScroll (反之亦然)
 *  为了避免相互调用，在设置 scrollLeft 该方法会用 .skip 记录接下来需要忽略的 scroll 事件
 */
function syncScrollLeft(x, y) {
    const otherScrollTarget = (target) => {
        return target === 'x' ? 'y' : 'x';
    };
    const scrollSkipState$ = merge$1(fromEvent(x, 'scroll').pipe(mapTo('x')), fromEvent(y, 'scroll').pipe(mapTo('y'))).pipe(scan((acc, target) => {
        if (acc.skip === target) {
            return { skip: null, fire: false, target };
        }
        else {
            return { skip: otherScrollTarget(target), fire: true, target };
        }
    }, { skip: null, fire: false, target: null }));
    return scrollSkipState$.subscribe(({ fire, target }) => {
        if (fire) {
            if (target === 'x') {
                y.scrollLeft = x.scrollLeft;
            }
            else {
                x.scrollLeft = y.scrollLeft;
            }
        }
    });
}
function query(elem, className) {
    return elem === null || elem === void 0 ? void 0 : elem.querySelector('.' + className);
}
function queryAll(elem, className) {
    return elem === null || elem === void 0 ? void 0 : elem.querySelectorAll('.' + className);
}

function resolveVirtualEnabled(virtualEnum, defaultValue) {
    if (virtualEnum == null || virtualEnum === 'auto') {
        return defaultValue;
    }
    return virtualEnum;
}
/** 检查列配置 & 设置默认宽度 & 剔除隐藏的列 */
function processColumns(columns, defaultColumnWidth) {
    function dfs(columns) {
        const result = [];
        for (let column of columns) {
            if (column.width == null) {
                if (defaultColumnWidth != null) {
                    column = Object.assign(Object.assign({}, column), { width: defaultColumnWidth });
                }
                else if (process.env.NODE_ENV !== 'production' && isLeafNode(column) && column.lock) {
                    console.warn('锁列需要指定列宽度', column);
                }
            }
            if (isLeafNode(column)) {
                // 被隐藏的列 会在这里被剔除
                if (!column.hidden) {
                    result.push(column);
                }
            }
            else {
                const nextChildren = dfs(column.children);
                // 如果 nextChildren 为空，说明所有的子节点均被隐藏了，在这里隐藏父节点
                if (nextChildren.length > 0) {
                    result.push(Object.assign(Object.assign({}, column), { children: nextChildren }));
                }
            }
        }
        return result;
    }
    return dfs(columns);
}
function getLeftNestedLockCount(columns) {
    let nestedCount = 0;
    for (const col of columns) {
        if (isLock(col)) {
            nestedCount += 1;
        }
        else {
            break;
        }
    }
    return nestedCount;
    function isLock(col) {
        if (isLeafNode(col)) {
            return col.lock;
        }
        else {
            return col.lock || col.children.some(isLock);
        }
    }
}
function getDerivedStateFromProps(props, state) {
    const { useVirtual: useVirtualProp, columns: columnsProp, dataSource: dataSourceProp, defaultColumnWidth } = props;
    const columns = processColumns(columnsProp, defaultColumnWidth);
    const leftNestedLockCount = getLeftNestedLockCount(columns);
    const mainFlat = collectNodes(columns, 'leaf-only');
    if (leftNestedLockCount === columns.length) {
        // 处理所有的列均为 lock
        return {
            flat: { left: [], right: [], main: mainFlat, center: mainFlat },
            nested: { left: [], right: [], main: columns, center: columns },
            useVirtual: { horizontal: false, vertical: false, header: false },
        };
    }
    const leftNested = columns.slice(0, leftNestedLockCount);
    const rightNestedLockCount = getLeftNestedLockCount(columns.slice().reverse());
    const centerNested = columns.slice(leftNestedLockCount, columns.length - rightNestedLockCount);
    const rightNested = columns.slice(columns.length - rightNestedLockCount);
    const shouldEnableHozVirtual = mainFlat.length >= AUTO_VIRTUAL_THRESHOLD && mainFlat.every((col) => col.width != null);
    const shouldEnableVerVirtual = dataSourceProp.length >= AUTO_VIRTUAL_THRESHOLD;
    const useVirtual = typeof useVirtualProp !== 'object'
        ? {
            horizontal: resolveVirtualEnabled(useVirtualProp, shouldEnableHozVirtual),
            vertical: resolveVirtualEnabled(useVirtualProp, shouldEnableVerVirtual),
            header: resolveVirtualEnabled(useVirtualProp, false),
        }
        : {
            horizontal: resolveVirtualEnabled(useVirtualProp.horizontal, shouldEnableHozVirtual),
            vertical: resolveVirtualEnabled(useVirtualProp.vertical, shouldEnableVerVirtual),
            header: resolveVirtualEnabled(useVirtualProp.header, shouldEnableVerVirtual),
        };
    return {
        flat: {
            left: collectNodes(leftNested, 'leaf-only'),
            main: mainFlat,
            right: collectNodes(rightNested, 'leaf-only'),
            center: collectNodes(centerNested, 'leaf-only'),
        },
        nested: {
            left: leftNested,
            main: columns,
            right: rightNested,
            center: centerNested,
        },
        useVirtual,
    };
}

function range(n) {
    const array = [];
    for (let i = 0; i < n; i++) {
        array.push(i);
    }
    return array;
}
/** 根据当前横向虚拟滚动 对 nested.center 进行过滤，结果只保留当前视野内可见的那些列配置 */
function filterNestedCenter(centerNested, hoz, leftFlatCount) {
    return dfs(centerNested, leftFlatCount).filtered;
    function dfs(cols, startColIndex) {
        let leafCount = 0;
        const filtered = [];
        for (const col of cols) {
            const colIndex = startColIndex + leafCount;
            if (isLeafNode(col)) {
                leafCount += 1;
                if (leftFlatCount + hoz.leftIndex <= colIndex && colIndex < leftFlatCount + hoz.rightIndex) {
                    filtered.push({ colIndex, col });
                }
            }
            else {
                const dfsRes = dfs(col.children, colIndex);
                leafCount += dfsRes.leafCount;
                if (dfsRes.filtered.length > 0) {
                    filtered.push({ colIndex, col, children: dfsRes.filtered });
                }
            }
        }
        return { filtered, leafCount };
    }
}
/** 根据输入的 nested 列配置，算出相应的 leveled & flat 配置方便渲染 */
function calculateLeveledAndFlat(inputNested, rowCount) {
    const leveled = [];
    for (let depth = 0; depth < rowCount; depth++) {
        leveled.push([]);
    }
    const flat = [];
    dfs(inputNested, 0);
    return { flat, leveled };
    function dfs(input, depth) {
        let leafCount = 0;
        for (let i = 0; i < input.length; i++) {
            const indexedCol = input[i];
            if (isLeafNode(indexedCol)) {
                leafCount += 1;
                const wrapped = {
                    type: 'normal',
                    width: indexedCol.col.width,
                    col: indexedCol.col,
                    colIndex: indexedCol.colIndex,
                    colSpan: 1,
                    isLeaf: true,
                };
                leveled[depth].push(wrapped);
                flat.push(wrapped);
            }
            else {
                const dfsRes = dfs(indexedCol.children, depth + 1);
                leafCount += dfsRes.leafCount;
                if (dfsRes.leafCount > 0) {
                    leveled[depth].push({
                        type: 'normal',
                        width: indexedCol.col.width,
                        col: indexedCol.col,
                        colIndex: indexedCol.colIndex,
                        colSpan: dfsRes.leafCount,
                        isLeaf: false,
                    });
                }
            }
        }
        return { leafCount };
    }
}
/** 包装列配置，附加上 colIndex 属性 */
function attachColIndex(inputNested, colIndexOffset) {
    return dfs(inputNested, colIndexOffset).result;
    function dfs(input, startColIndex) {
        const result = [];
        let leafCount = 0;
        for (let i = 0; i < input.length; i++) {
            const col = input[i];
            const colIndex = startColIndex + leafCount;
            if (isLeafNode(col)) {
                leafCount += 1;
                result.push({ colIndex, col });
            }
            else {
                const sub = dfs(col.children, colIndex);
                leafCount += sub.leafCount;
                if (sub.leafCount > 0) {
                    result.push({ col, colIndex, children: sub.result });
                }
            }
        }
        return { result, leafCount };
    }
}
/** 计算用于渲染表头的数据结构 */
function calculateRenderInfo({ flat, nested, side, hoz, useVirtual }, rowCount) {
    if (side === 'main' && useVirtual.header) {
        const leftPart = calculateLeveledAndFlat(attachColIndex(nested.left, 0), rowCount);
        const filtered = filterNestedCenter(nested.center, hoz, flat.left.length);
        const centerPart = calculateLeveledAndFlat(filtered, rowCount);
        const rightPart = calculateLeveledAndFlat(attachColIndex(nested.right, flat.left.length + flat.center.length), rowCount);
        return {
            flat: [
                ...leftPart.flat,
                { type: 'blank', width: hoz.leftBlank, blankSide: 'left' },
                ...centerPart.flat,
                { type: 'blank', width: hoz.rightBlank, blankSide: 'right' },
                ...rightPart.flat,
            ],
            leveled: range(rowCount).map((depth) => [
                ...leftPart.leveled[depth],
                { type: 'blank', width: hoz.leftBlank, blankSide: 'left' },
                ...centerPart.leveled[depth],
                { type: 'blank', width: hoz.rightBlank, blankSide: 'right' },
                ...rightPart.leveled[depth],
            ]),
        };
    }
    const colIndexOffset = side === 'right' ? flat.left.length + flat.center.length : 0;
    return calculateLeveledAndFlat(attachColIndex(nested[side], colIndexOffset), rowCount);
}
function TableHeader(props) {
    const { nested, flat } = props;
    const colCount = flat.main.length;
    const rowCount = getTreeDepth(nested.main) + 1;
    const renderInfo = calculateRenderInfo(props, rowCount);
    const tbody = renderInfo.leveled.map((wrappedCols, level) => {
        const headerCells = wrappedCols.map((wrapped) => {
            var _a, _b;
            if (wrapped.type === 'normal') {
                const headerCellProps = (_a = wrapped.col.headerCellProps) !== null && _a !== void 0 ? _a : {};
                return (React.createElement("th", Object.assign({ key: wrapped.colIndex }, headerCellProps, { className: classnames(Classes.tableHeaderCell, {
                        first: wrapped.colIndex === 0,
                        last: wrapped.colIndex + wrapped.colSpan === colCount,
                    }, headerCellProps.className), colSpan: wrapped.colSpan, rowSpan: wrapped.isLeaf ? rowCount - level : undefined, style: Object.assign({ textAlign: wrapped.col.align }, headerCellProps.style) }), (_b = wrapped.col.title) !== null && _b !== void 0 ? _b : wrapped.col.name));
            }
            else {
                if (wrapped.width > 0) {
                    return React.createElement("th", { key: wrapped.blankSide });
                }
                else {
                    return null;
                }
            }
        });
        return (React.createElement("tr", { key: level, className: classnames(Classes.tableHeaderRow, {
                first: level === 0,
                last: level === rowCount - 1,
            }) }, headerCells));
    });
    return (React.createElement("div", { className: Classes.tableHeader },
        React.createElement("table", null,
            React.createElement("colgroup", null, renderInfo.flat.map((wrapped) => {
                if (wrapped.type === 'blank') {
                    if (wrapped.width > 0) {
                        return React.createElement("col", { key: wrapped.blankSide, style: { width: wrapped.width } });
                    }
                    else {
                        return null;
                    }
                }
                else {
                    return React.createElement("col", { key: wrapped.colIndex, style: { width: wrapped.width } });
                }
            })),
            React.createElement("tbody", null, tbody))));
}

const ITEM_SIZE = 40;
class ItemSizeStore {
    constructor() {
        this.cache = [];
    }
    static getFullRenderRange(itemCount) {
        return {
            topIndex: 0,
            topBlank: 0,
            bottomIndex: itemCount,
            bottomBlank: 0,
        };
    }
    getRenderRangeWhenBelowView(itemCount) {
        const start = { topIndex: 0, topBlank: 0 };
        const end = this.getEnd(0, start, itemCount);
        return Object.assign(Object.assign({}, start), end);
    }
    getRenderRangeWhenAboveView(itemCount) {
        const totalSize = this.getEstimatedTotalSize(itemCount);
        const start = this.getStart(totalSize, itemCount);
        const end = this.getEnd(totalSize, start, itemCount);
        return Object.assign(Object.assign({}, start), end);
    }
    getRenderRangeWhenInView(offset, maxRenderHeight, itemCount) {
        const start = this.getStart(offset, itemCount);
        const end = this.getEnd(offset + maxRenderHeight, start, itemCount);
        return Object.assign(Object.assign({}, start), end);
    }
    binarySearchStart(searchOffset) {
        let min = 0;
        let max = this.cache.length - 1;
        while (min < max) {
            const middle = Math.ceil((min + max) / 2);
            const middleOffset = this.cache[middle].offset;
            if (middleOffset <= searchOffset) {
                min = middle;
            }
            else {
                max = middle - 1;
            }
        }
        return max;
    }
    /** 获取虚拟滚动在 开始位置上的信息 */
    getStart(offset, itemCount) {
        if (this.cache.length === 0) {
            return { topIndex: 0, topBlank: 0 };
        }
        const maxBottom = this.getMaxBottom();
        if (maxBottom < offset) {
            const lack = offset - maxBottom;
            // 快速滚动时，需要限制补足数量的最大值，防止元素数量超过 itemCount
            const maxLackCount = itemCount - this.cache.length;
            const lackCount = Math.min(Math.floor(lack / ITEM_SIZE), maxLackCount);
            // 中间缺失的直接使用 ITEM_SIZE 进行补足
            for (let i = 0, cntOffset = maxBottom; i < lackCount; i += 1, cntOffset += ITEM_SIZE) {
                this.cache.push({ offset: cntOffset, size: ITEM_SIZE });
            }
            const topIndex = this.cache.length - 1;
            const topBlank = this.cache[topIndex].offset;
            return this.overscanUpwards(topIndex, topBlank);
        }
        else {
            const topIndex = this.binarySearchStart(offset);
            const topBlank = this.cache[topIndex].offset;
            return this.overscanUpwards(topIndex, topBlank);
        }
    }
    overscanUpwards(topIndex, topBlank) {
        let overscanSize = 0;
        let overscanCount = 0;
        while (overscanCount < topIndex && overscanSize < OVERSCAN_SIZE) {
            overscanCount += 1;
            overscanSize += this.getItemSize(topIndex - overscanCount);
        }
        return {
            topIndex: topIndex - overscanCount,
            topBlank: topBlank - overscanSize,
        };
    }
    /** 获取虚拟滚动 在结束位置上的信息 */
    getEnd(endOffset, startInfo, itemCount) {
        let bottomIndex = startInfo.topIndex;
        let offset = startInfo.topBlank;
        while (bottomIndex < itemCount && offset < endOffset) {
            offset += this.getItemSize(bottomIndex);
            bottomIndex += 1;
        }
        const bottomBlank = this.getEstimatedTotalSize(itemCount) - offset;
        return this.overscanDownwards(bottomIndex, bottomBlank, itemCount);
    }
    overscanDownwards(bottomIndex, bottomBlank, itemCount) {
        let overscanSize = 0;
        let overscanCount = 0;
        while (overscanCount < itemCount - bottomIndex && overscanSize < OVERSCAN_SIZE) {
            overscanSize += this.getItemSize(bottomIndex + overscanCount);
            overscanCount += 1;
        }
        return {
            bottomIndex: bottomIndex + overscanCount,
            bottomBlank: bottomBlank - overscanSize,
        };
    }
    getItemSize(index) {
        return index < this.cache.length ? this.cache[index].size : ITEM_SIZE;
    }
    setMaxItemCount(itemCount) {
        if (itemCount < this.cache.length) {
            this.cache.length = itemCount;
        }
    }
    updateItem(index, offset, size) {
        this.cache[index] = { offset, size };
    }
    getEstimatedTotalSize(itemCount) {
        let measuredTotalSize = 0;
        let measuredCount = 0;
        const size = this.cache.length;
        if (size > 0) {
            const lastItem = this.cache[size - 1];
            measuredTotalSize = lastItem.offset + lastItem.size;
            measuredCount = size;
        }
        const unmeasuredTotalSize = (itemCount - measuredCount) * ITEM_SIZE;
        return measuredTotalSize + unmeasuredTotalSize;
    }
    getMaxBottom() {
        if (this.cache.length === 0) {
            return 0;
        }
        const item = this.cache[this.cache.length - 1];
        return item.offset + item.size;
    }
}

function getRect(ele) {
    if (ele === window) {
        return { left: 0, top: 0, bottom: window.innerHeight, right: window.innerWidth };
    }
    else {
        return ele.getBoundingClientRect();
    }
}
function getClipRect(target, flowRoot) {
    const targetRect = getRect(target);
    const rootRect = getRect(flowRoot);
    return {
        offsetY: Math.max(0, rootRect.top - targetRect.top),
        offsetX: Math.max(0, rootRect.left - targetRect.left),
        clipRect: {
            left: Math.max(targetRect.left, rootRect.left),
            top: Math.max(targetRect.top, rootRect.top),
            right: Math.min(targetRect.right, rootRect.right),
            bottom: Math.min(targetRect.bottom, rootRect.bottom),
        },
    };
}
/** 基于 ResizeObserver 和 scroll event 封装的 RxJS observable；
 * 用于监听一个元素的在页面中的「可见范围」的不断变化 */
class VisibleClipRectObservable extends Observable {
    constructor(target, flowRoot) {
        super((subscriber) => {
            const subscription = merge$1(fromEvent(flowRoot, 'scroll'), fromEvent(flowRoot, 'resize')).subscribe(callback);
            const resizeObserver = new index(callback);
            resizeObserver.observe(target);
            function callback() {
                subscriber.next(getClipRect(target, flowRoot));
            }
            return () => {
                subscription.unsubscribe();
                resizeObserver.disconnect();
            };
        });
    }
}

const LoadingIndicatorIcon = ({ size }) => (React.createElement("svg", { className: Classes.loadingIndicatorIcon, style: {
        margin: 'auto',
        display: 'block',
        shapeRendering: 'auto',
    }, width: size, height: size, viewBox: "0 0 100 100", preserveAspectRatio: "xMidYMid" },
    React.createElement("circle", { cx: "50", cy: "50", r: "40", fill: "none", stroke: "#23a7fa", strokeDasharray: "188 64", strokeLinecap: "round", strokeWidth: "10" },
        React.createElement("animateTransform", { attributeName: "transform", dur: "1.5s", keyTimes: "0;1", repeatCount: "indefinite", type: "rotate", values: "0 50 50;360 50 50" }))));
Loading.defaultProps = {
    visible: true,
};
function Loading({ visible, children }) {
    return (React.createElement("div", { className: Classes.loadingWrapper, style: { position: 'relative' } },
        visible && (React.createElement("div", { className: Classes.loadingIndicatorWrapper, style: { position: 'absolute', left: 0, right: 0, top: 0, bottom: 0 } },
            React.createElement("div", { className: Classes.loadingIndicator, style: {
                    position: 'sticky',
                    zIndex: 1,
                    top: LOADING_ICON_SIZE,
                    left: 0,
                    right: 0,
                } },
                React.createElement(LoadingIndicatorIcon, { size: LOADING_ICON_SIZE })))),
        React.createElement("div", { className: Classes.loadingContentWrapper, style: { filter: visible ? 'blur(1px)' : 'none' } }, children)));
}

class BaseTable extends React.Component {
    constructor(props) {
        super(props);
        this.store = new ItemSizeStore();
        this.artTableRef = React.createRef();
        this.artTableWrapperRef = React.createRef();
        this.rootSubscription = new Subscription();
        this.hoveredTableRows = [];
        /**
         * 对于的锁定列和表头，因为我们对其设置了 overflow: hidden，导致在不会触发 scroll 事件。
         * 我们监听其 wheel 事件，然后手动同步 scrollTop/scrollLeft
         */
        this.onWheelInOverflowHiddenPart = (e) => {
            const { scrollLeft: x, scrollTop: y } = this.doms.mainBody;
            this.syncScroll(x + e.deltaX, y + e.deltaY);
        };
        this.syncScrollFromMainBody = () => {
            const { scrollLeft: x, scrollTop: y } = this.doms.mainBody;
            this.syncScroll(x, y);
        };
        this.onRowEnterOrLeave = (rowIndex, kind) => {
            var _a, _b;
            // 移除原先的 hover 效果
            this.hoveredTableRows.forEach((tr) => {
                tr.classList.remove('hovered');
            });
            if (kind === 'leave') {
                this.hoveredTableRows = [];
                return;
            }
            // 添加新的 hover 效果
            const rowSelector = `*[data-rowindex="${rowIndex}"]`;
            const mainRow = this.doms.mainBody.querySelector(rowSelector);
            const leftLockRow = (_a = this.doms.leftBody) === null || _a === void 0 ? void 0 : _a.querySelector(rowSelector);
            const rightLockRow = (_b = this.doms.rightBody) === null || _b === void 0 ? void 0 : _b.querySelector(rowSelector);
            this.hoveredTableRows = [mainRow, leftLockRow, rightLockRow].filter(Boolean);
            this.hoveredTableRows.forEach((tr) => {
                tr.classList.add('hovered');
            });
        };
        this.adjustSize = () => {
            this.adjustLoadingPosition();
            this.adjustNeedRenderLock();
            this.adjustSizeOfLockCells();
            this.adjustSizeOfLockBodies();
            this.adjustSizeOfLockHeaderCells();
        };
        this.state = Object.assign(Object.assign({}, getDerivedStateFromProps(props)), { hasScroll: true, needRenderLock: true, offsetY: 0, offsetX: 0, 
            // 因为 ResizeObserver 在一开始总是会调用一次所提供的回调函数
            // 故这里为 maxRenderHeight/maxRenderWidth 设置一个默认值即可（因为这两个默认值很快就会被覆盖）
            // https://stackoverflow.com/questions/60026223/does-resizeobserver-invokes-initially-on-page-load
            maxRenderHeight: 600, maxRenderWidth: 800 });
    }
    /** 自定义滚动条宽度为table宽度，使滚动条滑块宽度相同 */
    updateStickyScroll() {
        const { stickyScroll, mainBody, stickyScrollItem } = this.doms;
        if (!mainBody) {
            return;
        }
        const refTable = mainBody.querySelector('table');
        if (!refTable) {
            return;
        }
        const bodyWidth = mainBody.offsetWidth;
        const tableWidth = refTable.offsetWidth;
        const scrollbarSize = getScrollbarSize();
        stickyScroll.style.marginTop = `-${scrollbarSize.height}px`;
        // 如果有纵向滚动条，需要减少一个滚动条的宽度
        if (mainBody.scrollHeight > mainBody.clientHeight) {
            stickyScroll.style.width = `${bodyWidth - scrollbarSize.width}px`;
        }
        else {
            stickyScroll.style.width = 'auto';
        }
        if (bodyWidth >= tableWidth) {
            if (this.state.hasScroll) {
                this.setState({ hasScroll: false });
            }
            // 考虑下mac下面隐藏滚动条的情况
        }
        else if (!this.state.hasScroll && scrollbarSize.height > 5) {
            this.setState({ hasScroll: true });
        }
        // 设置子节点宽度
        stickyScrollItem.style.width = `${tableWidth}px`;
    }
    // 通过头部和扁平的结构渲染表格
    renderTableSection(side, renderRange) {
        const { hasHeader } = this.props;
        const onWheel = side !== 'main' ? this.onWheelInOverflowHiddenPart : null;
        const onScroll = side === 'main' ? this.syncScrollFromMainBody : null;
        return (React.createElement("div", { className: classnames(Classes.tableInner) },
            hasHeader && this.renderTableHeader(side, renderRange),
            this.renderTableBody(side, renderRange, onWheel, onScroll)));
    }
    renderTableHeader(side, { horizontal: hoz }) {
        const { stickyTop } = this.props;
        const { flat, nested, useVirtual } = this.state;
        return (React.createElement("div", { className: classnames(Classes.tableHeaderWrapper), style: { top: stickyTop }, onWheel: this.onWheelInOverflowHiddenPart },
            React.createElement(TableHeader, { nested: nested, flat: flat, hoz: hoz, side: side, useVirtual: useVirtual })));
    }
    updateOffsetX(nextOffsetX) {
        if (this.state.useVirtual.horizontal) {
            if (Math.abs(nextOffsetX - this.state.offsetX) >= OVERSCAN_SIZE / 2) {
                this.setState({ offsetX: nextOffsetX });
            }
        }
    }
    /** 同步滚动偏移量 */
    syncScroll(x, y) {
        this.updateOffsetX(x);
        const header = this.doms.mainHeader;
        const scrollNode = this.doms.mainBody;
        if (header) {
            header.scrollLeft = x;
        }
        scrollNode.scrollLeft = x;
        scrollNode.scrollTop = y;
        if (this.isLock()) {
            const { rightBody, leftBody, rightSection, leftSection } = this.doms;
            if (leftBody) {
                leftBody.scrollTop = y;
            }
            if (rightBody) {
                rightBody.scrollTop = y;
            }
            if (this.state.needRenderLock) {
                if (x <= 0) {
                    // 滚动条在最左端
                    leftSection === null || leftSection === void 0 ? void 0 : leftSection.classList.remove(Classes.lockShadow);
                    rightSection === null || rightSection === void 0 ? void 0 : rightSection.classList.add(Classes.lockShadow);
                }
                else if (x >= scrollNode.scrollWidth - scrollNode.clientWidth) {
                    // 滚动条在最右端
                    leftSection === null || leftSection === void 0 ? void 0 : leftSection.classList.add(Classes.lockShadow);
                    rightSection === null || rightSection === void 0 ? void 0 : rightSection.classList.remove(Classes.lockShadow);
                }
                else {
                    // 滚动条在中间
                    leftSection === null || leftSection === void 0 ? void 0 : leftSection.classList.add(Classes.lockShadow);
                    rightSection === null || rightSection === void 0 ? void 0 : rightSection.classList.add(Classes.lockShadow);
                }
            }
            else {
                // 不需要渲染 left-section / right-section
                leftSection === null || leftSection === void 0 ? void 0 : leftSection.classList.remove(Classes.lockShadow);
                rightSection === null || rightSection === void 0 ? void 0 : rightSection.classList.remove(Classes.lockShadow);
            }
        }
    }
    getVerticalRenderRange() {
        const { dataSource } = this.props;
        const { useVirtual, offsetY, maxRenderHeight } = this.state;
        const itemCount = dataSource.length;
        if (useVirtual.vertical) {
            if (maxRenderHeight <= 0) {
                // maxRenderHeight <= 0 说明表格目前在 viewport 之外
                if (offsetY <= 0) {
                    // 表格在 viewport 下方
                    return this.store.getRenderRangeWhenBelowView(itemCount);
                }
                else {
                    // 表格在 viewport 上方
                    return this.store.getRenderRangeWhenAboveView(itemCount);
                }
            }
            else {
                // 表格与 viewport 相交
                return this.store.getRenderRangeWhenInView(offsetY, maxRenderHeight, itemCount);
            }
        }
        else {
            return ItemSizeStore.getFullRenderRange(itemCount);
        }
    }
    getHorizontalRenderRange() {
        const { offsetX, maxRenderWidth, useVirtual, flat } = this.state;
        if (!useVirtual.horizontal) {
            return { leftIndex: 0, leftBlank: 0, rightIndex: flat.main.length, rightBlank: 0 };
        }
        let leftIndex = 0;
        let centerCount = 0;
        let leftBlank = 0;
        let centerRenderWidth = 0;
        const overscannedOffsetX = Math.max(0, offsetX - OVERSCAN_SIZE);
        while (leftIndex < flat.center.length) {
            const col = flat.center[leftIndex];
            if (col.width + leftBlank < overscannedOffsetX) {
                leftIndex += 1;
                leftBlank += col.width;
            }
            else {
                break;
            }
        }
        // 考虑 over scan 之后，中间部分的列至少需要渲染的宽度
        const minCenterRenderWidth = maxRenderWidth + (overscannedOffsetX - leftBlank) + 2 * OVERSCAN_SIZE;
        while (leftIndex + centerCount < flat.center.length) {
            const col = flat.center[leftIndex + centerCount];
            if (col.width + centerRenderWidth < minCenterRenderWidth) {
                centerRenderWidth += col.width;
                centerCount += 1;
            }
            else {
                break;
            }
        }
        const rightBlankCount = flat.center.length - leftIndex - centerCount;
        const rightBlank = sum(flat.center.slice(flat.center.length - rightBlankCount).map((col) => col.width));
        return {
            leftIndex: leftIndex,
            leftBlank,
            rightIndex: leftIndex + centerCount,
            rightBlank,
        };
    }
    getRenderRange() {
        return {
            vertical: this.getVerticalRenderRange(),
            horizontal: this.getHorizontalRenderRange(),
        };
    }
    getFlatHozWrappedCols(side, hoz) {
        const { flat } = this.state;
        if (side !== 'main') {
            const colIndexShift = side === 'right' ? flat.main.length - flat.right.length : 0;
            return flat[side].map((col, i) => ({ type: 'normal', col, colIndex: i + colIndexShift }));
        }
        const wrappedCols = [
            ...flat.left.map((col, i) => ({ type: 'normal', col, colIndex: i })),
            hoz.leftBlank > 0 && { type: 'blank', blankSide: 'left', width: hoz.leftBlank },
            ...flat.center
                .slice(hoz.leftIndex, hoz.rightIndex)
                .map((col, i) => ({ type: 'normal', col, colIndex: flat.left.length + hoz.leftIndex + i })),
            hoz.rightBlank > 0 && { type: 'blank', blankSide: 'right', width: hoz.rightBlank },
            ...flat.right.map((col, i) => ({ type: 'normal', col, colIndex: flat.main.length - flat.right.length + i })),
        ];
        return wrappedCols.filter(Boolean);
    }
    renderTableBody(side, renderRange, onWheel, onScroll) {
        const { onRowEnterOrLeave } = this;
        const { vertical: ver, horizontal: hoz } = renderRange;
        const { isLoading, dataSource, getRowProps, primaryKey, emptyContent } = this.props;
        const { flat } = this.state;
        const colCount = flat.main.length;
        const leftFlatCount = flat.left.length;
        const wrappedCols = this.getFlatHozWrappedCols(side, hoz);
        const colgroup = (React.createElement("colgroup", null, wrappedCols.map((wrapped) => {
            if (wrapped.type === 'blank') {
                return React.createElement("col", { key: wrapped.blankSide, style: { width: wrapped.width } });
            }
            return React.createElement("col", { key: wrapped.colIndex, style: { width: wrapped.col.width } });
        })));
        if (ver.bottomIndex - ver.topIndex === 0) {
            return (React.createElement("div", { className: Classes.tableBody, onWheel: onWheel, onScroll: onScroll },
                React.createElement(EmptyTable, { colgroup: colgroup, colSpan: wrappedCols.length, isLoading: isLoading, emptyContent: emptyContent })));
        }
        const spanManager = new SpanManager();
        const rows = dataSource.slice(ver.topIndex, ver.bottomIndex).map(renderRow);
        return (React.createElement("div", { className: Classes.tableBody, onWheel: onWheel, onScroll: onScroll },
            React.createElement("div", { key: "top-blank", className: classnames(Classes.virtualBlank, 'top'), style: {
                    height: ver.topBlank,
                } }),
            React.createElement("table", null,
                colgroup,
                React.createElement("tbody", null, rows)),
            React.createElement("div", { key: "bottom-blank", className: classnames(Classes.virtualBlank, 'bottom'), style: {
                    height: ver.bottomBlank,
                } })));
        function renderRow(record, i) {
            const rowIndex = ver.topIndex + i;
            spanManager.stripUpwards(rowIndex);
            const rowProps = getRowProps(record, rowIndex);
            const rowClass = classnames(Classes.tableRow, {
                first: rowIndex === 0,
                last: rowIndex === dataSource.length - 1,
                even: rowIndex % 2 === 0,
                odd: rowIndex % 2 === 1,
            }, rowProps === null || rowProps === void 0 ? void 0 : rowProps.className);
            return (React.createElement("tr", Object.assign({}, rowProps, { className: rowClass, key: safeGetRowKey(primaryKey, record, rowIndex), "data-rowindex": rowIndex, onMouseEnter: (e) => {
                    var _a;
                    onRowEnterOrLeave(rowIndex, 'enter');
                    (_a = rowProps === null || rowProps === void 0 ? void 0 : rowProps.onMouseEnter) === null || _a === void 0 ? void 0 : _a.call(rowProps, e);
                }, onMouseLeave: (e) => {
                    var _a;
                    onRowEnterOrLeave(rowIndex, 'leave');
                    (_a = rowProps === null || rowProps === void 0 ? void 0 : rowProps.onMouseLeave) === null || _a === void 0 ? void 0 : _a.call(rowProps, e);
                } }), wrappedCols.map((wrapped) => {
                if (wrapped.type === 'blank') {
                    return React.createElement("td", { key: wrapped.blankSide });
                }
                return renderCell(record, rowIndex, wrapped.col, wrapped.colIndex);
            })));
        }
        function renderCell(record, rowIndex, column, colIndex) {
            var _a;
            if (spanManager.testSkip(rowIndex, colIndex)) {
                return null;
            }
            const cellProps = safeGetCellProps(column, record, rowIndex);
            let colSpan = 1;
            let rowSpan = 1;
            if (column.getSpanRect) {
                const value = safeGetValue(column, record, rowIndex);
                const spanRect = column.getSpanRect(value, record, rowIndex);
                colSpan = spanRect == null ? 1 : spanRect.right - colIndex;
                rowSpan = spanRect == null ? 1 : spanRect.bottom - rowIndex;
            }
            else {
                if (cellProps.colSpan != null) {
                    colSpan = cellProps.colSpan;
                }
                if (cellProps.rowSpan != null) {
                    rowSpan = cellProps.rowSpan;
                }
            }
            // rowSpan/colSpan 不能过大，避免 rowSpan/colSpan 影响因虚拟滚动而未渲染的单元格
            rowSpan = Math.min(rowSpan, ver.bottomIndex - rowIndex);
            colSpan = Math.min(colSpan, leftFlatCount + hoz.rightIndex - colIndex);
            const hasSpan = colSpan > 1 || rowSpan > 1;
            if (hasSpan) {
                spanManager.add(rowIndex, colIndex, colSpan, rowSpan);
            }
            const cls = classnames(Classes.tableCell, {
                first: colIndex === 0,
                last: colIndex === colCount - 1,
            });
            if (column.align) {
                cellProps.style = (_a = cellProps.style) !== null && _a !== void 0 ? _a : {};
                cellProps.style.textAlign = column.align;
            }
            return React.createElement('td', Object.assign(Object.assign({ key: colIndex, className: cls }, cellProps), (hasSpan ? { colSpan, rowSpan } : null)), safeRender(column, record, rowIndex));
        }
    }
    isLock() {
        const { nested } = this.state;
        return nested.left.length > 0 || nested.right.length > 0;
    }
    render() {
        const { dataSource, className, style, hasHeader, useOuterBorder, isLoading, isStickyHead } = this.props;
        const styleWrapper = (node) => {
            const wrapperClassName = classnames(Classes.artTableWrapper, className, {
                'use-outer-border': useOuterBorder,
            });
            const artTableWrapperProps = {
                className: wrapperClassName,
                style,
                [STYLED_REF_PROP]: this.artTableWrapperRef,
            };
            return React.createElement(Styled.ArtTableWrapper, Object.assign({}, artTableWrapperProps), node);
        };
        const withStickyScroll = (node) => (React.createElement(React.Fragment, null,
            node,
            React.createElement(Styled.StickyScroll, { className: Classes.stickyScroll, style: {
                    display: this.state.hasScroll ? 'block' : 'none',
                    bottom: this.props.stickyBottom,
                } },
                React.createElement("div", { className: Classes.stickyScrollItem }))));
        const loadingWrapper = (node) => {
            return React.createElement(Loading, { visible: isLoading }, node);
        };
        const tableClass = classnames(Classes.artTable, {
            sticky: isStickyHead,
            empty: dataSource.length === 0,
            lock: this.isLock(),
            'has-header': hasHeader,
        });
        const renderRange = this.getRenderRange();
        const artTableProps = {
            className: tableClass,
            [STYLED_REF_PROP]: this.artTableRef,
        };
        const artTable = (React.createElement(Styled.ArtTable, Object.assign({}, artTableProps),
            this.renderLeftSection(renderRange),
            this.renderMainSection(renderRange),
            this.renderRightSection(renderRange)));
        return styleWrapper(withStickyScroll(loadingWrapper(artTable)));
    }
    renderLeftSection(renderRange) {
        const { dataSource } = this.props;
        const { nested, needRenderLock } = this.state;
        if (!needRenderLock || nested.left.length === 0 || dataSource.length === 0) {
            return null;
        }
        return (React.createElement(Styled.LeftSection, { className: Classes.leftSection }, this.renderTableSection('left', renderRange)));
    }
    renderMainSection(renderRange) {
        return (React.createElement(Styled.MainSection, { className: classnames(Classes.mainSection) }, this.renderTableSection('main', renderRange)));
    }
    renderRightSection(renderRange) {
        const { dataSource } = this.props;
        const { nested, needRenderLock } = this.state;
        if (!needRenderLock || nested.right.length === 0 || dataSource.length === 0) {
            return null;
        }
        return (React.createElement(Styled.RightSection, { className: Classes.rightSection }, this.renderTableSection('right', renderRange)));
    }
    didMountOrUpdate(prevProps) {
        this.adjustSize();
        this.updateItemSizeStore(prevProps);
        this.syncScrollFromMainBody();
        this.updateStickyScroll();
    }
    componentDidMount() {
        this.updateDoms();
        this.didMountOrUpdate();
        this.initSubscriptions();
    }
    resolveFlowRoot() {
        const { flowRoot } = this.props;
        const wrapper = this.artTableWrapperRef.current;
        if (flowRoot === 'auto') {
            const computedStyle = getComputedStyle(wrapper);
            return computedStyle.overflowY !== 'visible' ? wrapper : window;
        }
        else if (flowRoot === 'self') {
            return wrapper;
        }
        else {
            return typeof flowRoot === 'function' ? flowRoot() : flowRoot;
        }
    }
    initSubscriptions() {
        const { mainBody, stickyScroll } = this.doms;
        this.rootSubscription.add(syncScrollLeft(mainBody, stickyScroll));
        this.rootSubscription.add(throttledWindowResize$.subscribe(() => {
            this.updateStickyScroll();
            this.adjustSize();
        }));
        // 在一些情况下 flowRoot 需要在父组件 didMount 时才会准备好
        // 故这里使用 requestAnimationFrame 等到下一个动画帧
        const rafId = requestAnimationFrame(() => {
            const resoledFlowRoot = this.resolveFlowRoot();
            const sizeAndOffset$ = new VisibleClipRectObservable(mainBody, resoledFlowRoot).pipe(filter(() => {
                const { horizontal, vertical } = this.state.useVirtual;
                return horizontal || vertical;
            }), map(({ clipRect, offsetY }) => ({
                maxRenderHeight: clipRect.bottom - clipRect.top,
                maxRenderWidth: clipRect.right - clipRect.left,
                offsetY,
            })), distinctUntilChanged((x, y) => {
                // 因为 overscan 的存在，滚动较小的距离时不需要触发组件重渲染
                return (Math.abs(x.maxRenderWidth - y.maxRenderWidth) < OVERSCAN_SIZE / 2 &&
                    Math.abs(x.maxRenderHeight - y.maxRenderHeight) < OVERSCAN_SIZE / 2 &&
                    Math.abs(x.offsetY - y.offsetY) < OVERSCAN_SIZE / 2);
            }));
            this.rootSubscription.add(sizeAndOffset$.subscribe((sizeAndOffset) => {
                this.setState(sizeAndOffset);
            }));
        });
        this.rootSubscription.add(() => {
            cancelAnimationFrame(rafId);
        });
    }
    componentDidUpdate(prevProps) {
        this.updateDoms();
        this.didMountOrUpdate(prevProps);
    }
    componentWillUnmount() {
        this.rootSubscription.unsubscribe();
    }
    /** 更新 DOM 节点的引用，方便其他方法直接操作 DOM */
    updateDoms() {
        const artTableWrapper = this.artTableWrapperRef.current;
        const artTable = this.artTableRef.current;
        const mainSection = query(artTable, Classes.mainSection);
        const leftSection = query(artTable, Classes.leftSection);
        const rightSection = query(artTable, Classes.rightSection);
        this.doms = {
            artTableWrapper,
            artTable,
            mainSection,
            mainHeader: query(mainSection, Classes.tableHeader),
            mainBody: query(mainSection, Classes.tableBody),
            leftSection,
            leftHeader: query(leftSection, Classes.tableHeader),
            leftBody: query(leftSection, Classes.tableBody),
            rightSection,
            rightHeader: query(rightSection, Classes.tableHeader),
            rightBody: query(rightSection, Classes.tableBody),
            stickyScroll: query(artTableWrapper, Classes.stickyScroll),
            stickyScrollItem: query(artTableWrapper, Classes.stickyScrollItem),
        };
    }
    updateItemSizeStore(prevProps) {
        var _a;
        if (prevProps != null) {
            if (prevProps.dataSource.length !== this.props.dataSource.length) {
                this.store.setMaxItemCount(this.props.dataSource.length);
            }
        }
        const virtualTop = this.doms.mainBody.querySelector(`.${Classes.virtualBlank}.top`);
        const virtualTopHeight = (_a = virtualTop === null || virtualTop === void 0 ? void 0 : virtualTop.clientHeight) !== null && _a !== void 0 ? _a : 0;
        queryAll(this.doms.mainBody, Classes.tableRow).forEach((tr) => {
            const rowIndex = Number(tr.dataset.rowindex);
            this.store.updateItem(rowIndex, tr.offsetTop + virtualTopHeight, tr.offsetHeight);
        });
    }
    adjustLoadingPosition() {
        const { mainSection, artTableWrapper } = this.doms;
        const loadingIndicator = query(artTableWrapper, Classes.loadingIndicator);
        if (!loadingIndicator) {
            return;
        }
        const { clipRect } = getClipRect(mainSection, this.resolveFlowRoot());
        const height = clipRect.bottom - clipRect.top;
        loadingIndicator.style.top = `${height / 2 - LOADING_ICON_SIZE / 2}px`;
        loadingIndicator.style.marginTop = `${height / 2 - LOADING_ICON_SIZE / 2}px`;
    }
    // 同步左右两侧锁列的单元格高度
    adjustSizeOfLockCells() {
        if (!this.isLock()) {
            return;
        }
        const mainTableRows = queryAll(this.doms.mainBody, Classes.tableRow);
        if (this.doms.leftBody) {
            const leftTableRows = queryAll(this.doms.leftBody, Classes.tableRow);
            batchAdjustLeftCellSizes(leftTableRows, mainTableRows);
        }
        if (this.doms.rightBody) {
            const rightTableRows = queryAll(this.doms.rightBody, Classes.tableRow);
            batchAdjustRightCellSizes(rightTableRows, mainTableRows);
        }
    }
    adjustSizeOfLockBodies() {
        if (this.isLock()) {
            const { mainBody, rightSection } = this.doms;
            let width = 0;
            if (mainBody.scrollHeight > mainBody.clientHeight) {
                width = getScrollbarSize().width;
            }
            rightSection && (rightSection.style.right = `${width}px`);
        }
    }
    /** 更新左右两侧锁列表头的 tr 的高度 */
    adjustSizeOfLockHeaderCells() {
        if (!this.isLock()) {
            return;
        }
        const mainTableRows = queryAll(this.doms.mainHeader, Classes.tableHeaderRow);
        if (this.doms.leftHeader) {
            const leftTableRows = queryAll(this.doms.leftHeader, Classes.tableHeaderRow);
            batchAdjustLeftCellSizes(leftTableRows, mainTableRows);
        }
        if (this.doms.rightHeader) {
            const rightTableRows = queryAll(this.doms.rightHeader, Classes.tableHeaderRow);
            batchAdjustRightCellSizes(rightTableRows, mainTableRows);
        }
    }
    /** 计算表格所有列的渲染宽度之和，判断表格是否需要渲染锁列 */
    adjustNeedRenderLock() {
        let nextNeedRenderLock;
        const { dataSource } = this.props;
        const { needRenderLock } = this.state;
        const { mainBody, artTable } = this.doms;
        if (this.isLock() && dataSource.length > 0) {
            const firstRow = query(mainBody, Classes.tableRow);
            if (firstRow == null) {
                // fixme 理论上 firstRow 不为 null，但实际情况下非常低概率还是会出现为 null 的情况
                return;
            }
            const sumOfColWidth = Array.from(firstRow.cells).reduce((sum, cell) => {
                return sum + cell.offsetWidth;
            }, 0);
            nextNeedRenderLock = sumOfColWidth > artTable.clientWidth;
        }
        else {
            nextNeedRenderLock = false;
        }
        if (needRenderLock !== nextNeedRenderLock) {
            this.setState({ needRenderLock: nextNeedRenderLock });
        }
    }
}
BaseTable.defaultProps = {
    isStickyHead: true,
    stickyTop: 0,
    stickyBottom: 0,
    useVirtual: 'auto',
    hasHeader: true,
    isLoading: false,
    getRowProps: noop$1,
    flowRoot: 'auto',
};
BaseTable.getDerivedStateFromProps = getDerivedStateFromProps;

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function _defineProperty$2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty$2(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose$6(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties$3(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose$6(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

/**
 * Copyright IBM Corp. 2018, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
var defaultAttributes = {
  // Reference:
  // https://github.com/IBM/carbon-components-react/issues/1392
  // https://github.com/PolymerElements/iron-iconset-svg/pull/47
  // `focusable` is a string attribute which is why we do not use a boolean here
  focusable: 'false',
  preserveAspectRatio: 'xMidYMid meet'
};
/**
 * Get supplementary HTML attributes for a given <svg> element based on existing
 * attributes.
 */

function getAttributes() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      width = _ref.width,
      height = _ref.height,
      _ref$viewBox = _ref.viewBox,
      viewBox = _ref$viewBox === void 0 ? "0 0 ".concat(width, " ").concat(height) : _ref$viewBox,
      attributes = _objectWithoutProperties$3(_ref, ["width", "height", "viewBox"]);

  var tabindex = attributes.tabindex,
      rest = _objectWithoutProperties$3(attributes, ["tabindex"]);

  var iconAttributes = _objectSpread2(_objectSpread2(_objectSpread2({}, defaultAttributes), rest), {}, {
    width: width,
    height: height,
    viewBox: viewBox
  }); // TODO: attributes.title assumes that the consumer will implement <title> and
  // correctly set `aria-labelledby`.


  if (iconAttributes['aria-label'] || iconAttributes['aria-labelledby'] || iconAttributes.title) {
    iconAttributes.role = 'img'; // Reference:
    // https://allyjs.io/tutorials/focusing-in-svg.html

    if (tabindex !== undefined && tabindex !== null) {
      iconAttributes.focusable = 'true';
      iconAttributes.tabindex = tabindex;
    }
  } else {
    iconAttributes['aria-hidden'] = true;
  }

  return iconAttributes;
}

/**
 * Copyright IBM Corp. 2019, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
 */

function _defineProperty$1$1(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends$8() {
  _extends$8 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$8.apply(this, arguments);
}

function ownKeys$1(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys$1(Object(source), true).forEach(function (key) {
        _defineProperty$1$1(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$1(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose$1$1(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties$1$1(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose$1$1(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var Icon = /*#__PURE__*/React.forwardRef(function Icon(_ref, ref) {
  var className = _ref.className,
      children = _ref.children,
      tabIndex = _ref.tabIndex,
      rest = _objectWithoutProperties$1$1(_ref, ["className", "children", "tabIndex"]);

  var _getAttributes = getAttributes(_objectSpread2$1(_objectSpread2$1({}, rest), {}, {
    tabindex: tabIndex
  })),
      tabindex = _getAttributes.tabindex,
      props = _objectWithoutProperties$1$1(_getAttributes, ["tabindex"]);

  if (className) {
    props.className = className;
  }

  if (tabindex !== undefined && tabindex !== null) {
    props.tabIndex = tabindex;
  }

  if (ref) {
    props.ref = ref;
  }

  return /*#__PURE__*/React.createElement('svg', props, children);
});
Icon.displayName = 'Icon';
Icon.propTypes = {
  'aria-hidden': propTypes.string,
  'aria-label': propTypes.string,
  'aria-labelledby': propTypes.string,
  className: propTypes.string,
  children: propTypes.node,
  height: propTypes.number,
  preserveAspectRatio: propTypes.string,
  tabIndex: propTypes.string,
  viewBox: propTypes.string,
  width: propTypes.number,
  xmlns: propTypes.string
};
Icon.defaultProps = {
  xmlns: 'http://www.w3.org/2000/svg',
  preserveAspectRatio: 'xMidYMid meet'
};

/**
 * Copyright IBM Corp. 2019, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
 */

var _ref2 =
/*#__PURE__*/

/*#__PURE__*/
React.createElement("path", {
  d: "M12 8L22 16 12 24z"
});

var CaretRight16 = /*#__PURE__*/React.forwardRef(function CaretRight16(_ref, ref) {
  var children = _ref.children,
      rest = _objectWithoutProperties$1$1(_ref, ["children"]);

  return /*#__PURE__*/React.createElement(Icon, _extends$8({
    width: 16,
    height: 16,
    viewBox: "0 0 32 32",
    xmlns: "http://www.w3.org/2000/svg",
    fill: "currentColor",
    ref: ref
  }, rest), _ref2, children);
});

const ExpansionCell = styled__default.div `
  display: flex;
  align-items: center;
  cursor: pointer;
  height: 100%;
  padding: 0 12px;

  &.leaf {
    cursor: default;
  }

  .expansion-icon {
    fill: #999;
    flex: 0 0 16px;
    transition: transform 200ms;

    &.expanded {
      transform-origin: center center;
      transform: rotate(90deg);
    }
  }
`;
const treeMetaSymbol = Symbol('treeMetaSymbol');
const ICON_WIDTH = 16;
const BASE_INDENT = 10;
function makeTreeModeTransform({ onChangeOpenKeys, openKeys, primaryKey, indentSize = 16, isLeafNode: isLeafNode$1 = isLeafNode, }) {
    const openKeySet = new Set(openKeys);
    return ({ columns, dataSource }) => {
        return {
            columns: processColumns(columns),
            dataSource: processDataSource(dataSource),
        };
        function processDataSource(input) {
            const result = [];
            dfs(input, 0);
            function dfs(nodes, depth) {
                if (nodes == null) {
                    return;
                }
                for (const node of nodes) {
                    const rowKey = node[primaryKey];
                    const expanded = openKeySet.has(rowKey);
                    const isLeaf = isLeafNode$1(node, { depth, expanded, rowKey });
                    const treeMeta = { depth, isLeaf, expanded, rowKey };
                    result.push(Object.assign({ [treeMetaSymbol]: treeMeta }, node));
                    if (!isLeaf && expanded) {
                        dfs(node.children, depth + 1);
                    }
                }
            }
            return result;
        }
        function processColumns(columns) {
            if (columns.length === 0) {
                return columns;
            }
            const [firstCol, ...others] = columns;
            const render = (value, record, recordIndex) => {
                const content = safeRender(firstCol, record, recordIndex);
                if (record[treeMetaSymbol] == null) {
                    // 没有 treeMeta 信息的话，就返回原先的渲染结果
                    return content;
                }
                const { depth, isLeaf, rowKey, expanded } = record[treeMetaSymbol];
                if (isLeaf) {
                    return (React.createElement(ExpansionCell, { className: "expansion-cell leaf" },
                        React.createElement("span", { style: { marginLeft: BASE_INDENT + depth * indentSize } }, content)));
                }
                const marginLeft = -ICON_WIDTH + BASE_INDENT + depth * indentSize;
                if (expanded) {
                    return (React.createElement(ExpansionCell, { className: "expansion-cell expanded", onClick: () => {
                            onChangeOpenKeys(openKeys.filter((key) => key !== rowKey), rowKey, 'collapse');
                        } },
                        React.createElement(CaretRight16, { className: "expansion-icon expanded", style: { marginLeft } }),
                        content));
                }
                else {
                    return (React.createElement(ExpansionCell, { className: "expansion-cell collapsed", onClick: () => {
                            onChangeOpenKeys([...openKeys, rowKey], rowKey, 'expand');
                        } },
                        React.createElement(CaretRight16, { className: "expansion-icon collapsed", style: { marginLeft } }),
                        content));
                }
            };
            const getCellProps = (value, record, rowIndex) => {
                if (firstCol.getCellProps) {
                    const prevProps = firstCol.getCellProps(value, record, rowIndex);
                    return Object.assign(Object.assign({}, prevProps), { style: Object.assign(Object.assign({}, prevProps === null || prevProps === void 0 ? void 0 : prevProps.style), { padding: 0 }) });
                }
                return { style: { padding: 0 } };
            };
            return [Object.assign(Object.assign({}, firstCol), { render, getCellProps }), ...others];
        }
    };
}

function simpleEncode(path) {
    if (path.length === 0) {
        return 'key:@total@';
    }
    return `key:${path.join(' ')}`;
}

/** 根据指定的 code 序列计算下钻树 */
function buildDrillTree(data, codes, { encode = simpleEncode, totalValue = '总计', includeTopWrapper = false, isExpand = () => true, enforceExpandTotalNode = true, } = {}) {
    const emptyPath = [];
    const totalKey = encode(emptyPath);
    let array;
    let hasChild = false;
    if (codes.length === 0) {
        array = [];
    }
    else if (!enforceExpandTotalNode && !isExpand(totalKey)) {
        array = [];
        hasChild = data.length > 0;
    }
    else {
        array = dfs(data, []);
    }
    if (includeTopWrapper) {
        const rootNode = {
            key: totalKey,
            value: totalValue,
            path: emptyPath,
            children: array,
        };
        if (hasChild) {
            rootNode.hasChild = hasChild;
        }
        return [rootNode];
    }
    if (includeTopWrapper) {
        return [
            {
                key: totalKey,
                value: totalValue,
                path: emptyPath,
                children: array,
            },
        ];
    }
    return array;
    function dfs(slice, path) {
        const depth = path.length;
        const array = [];
        const code = codes[depth];
        const groups = groupBy(slice, (row) => row[code]);
        for (const groupKey of Object.keys(groups)) {
            path.push(groupKey);
            const node = {
                key: encode(path),
                value: groupKey,
                path: path.slice(),
            };
            array.push(node);
            const group = groups[groupKey];
            if (group.length > 0 && depth < codes.length - 1) {
                if (isExpand(node.key)) {
                    node.children = dfs(group, path);
                }
                else {
                    node.hasChild = true;
                }
            }
            path.pop();
        }
        return array;
    }
}

function fallbackAggregate(slice) {
    return slice.length === 1 ? slice[0] : {};
}
/** 根据表格左侧与上方的下钻树，从全量明细数据中计算对应的数据立方 */
function buildRecordMatrix({ data, leftCodes, topCodes, aggregate = fallbackAggregate, encode = simpleEncode, isLeftExpand = () => true, isTopExpand = () => true, prebuiltLeftTree, prebuiltTopTree, }) {
    const ctx = {
        peculiarity: new Set(),
    };
    const [leftRootDrillNode] = prebuiltLeftTree !== null && prebuiltLeftTree !== void 0 ? prebuiltLeftTree : buildDrillTree(data, leftCodes, {
        encode,
        includeTopWrapper: true,
        isExpand: isLeftExpand,
    });
    const [topRootDrillNode] = prebuiltTopTree !== null && prebuiltTopTree !== void 0 ? prebuiltTopTree : buildDrillTree(data, topCodes, {
        encode,
        includeTopWrapper: true,
        isExpand: isTopExpand,
    });
    const transientMatrixRow = buildByLeft(ctx, data, leftRootDrillNode, 0);
    return makeMatrix(transientMatrixRow);
    function buildByLeft(ctx, slice, drillNode, depth) {
        let children = null;
        let col;
        if (isLeafNode(drillNode)) {
            col = buildByTop(ctx, slice, topRootDrillNode, 0);
        }
        else {
            children = [];
            const code = leftCodes[depth];
            const groups = groupBy(slice, (dwdRow) => dwdRow[code]);
            ctx.peculiarity.add(code);
            for (const child of drillNode.children) {
                const group = groups[child.value];
                if (group) {
                    children.push(buildByLeft(ctx, group, child, depth + 1));
                }
            }
            ctx.peculiarity.delete(code);
            col = mergeColsByTopTree(ctx, children.map((child) => child.col));
        }
        return {
            leftKey: drillNode.key,
            children,
            col,
        };
    }
    function buildByTop(ctx, slice, drillNode, depth) {
        let children = null;
        let record;
        if (isLeafNode(drillNode)) {
            record = aggregate(slice, ctx);
        }
        else {
            children = [];
            const code = topCodes[depth];
            const groups = groupBy(slice, (dwdRow) => dwdRow[code]);
            ctx.peculiarity.add(code);
            for (const child of drillNode.children) {
                const group = groups[child.value];
                if (group) {
                    children.push(buildByTop(ctx, group, child, depth + 1));
                }
            }
            ctx.peculiarity.delete(code);
            record = aggregate(children.map((child) => child.record), ctx);
        }
        return {
            topKey: drillNode.key,
            topValue: drillNode.value,
            children,
            record,
        };
    }
    function mergeColsByTopTree(ctx, colsToMerge) {
        return dfs(ctx, colsToMerge, topRootDrillNode, 0);
        function dfs(ctx, cols, topDrillNode, depth) {
            let children = null;
            const record = aggregate(cols.map((c) => c.record), ctx);
            if (!isLeafNode(topDrillNode)) {
                const topCode = topCodes[depth];
                ctx.peculiarity.add(topCode);
                const drillChildDict = fromEntries(topDrillNode.children.map((child) => [child.value, child]));
                const colChildDictArray = cols.map((col) => fromEntries(col.children.map((child) => [child.topValue, child])));
                children = topDrillNode.children.map((item) => {
                    const childCols = colChildDictArray.map((colChildDict) => colChildDict[item.value]).filter(Boolean);
                    return dfs(ctx, childCols, drillChildDict[item.value], depth + 1);
                });
                ctx.peculiarity.delete(topCode);
            }
            return {
                topKey: topDrillNode.key,
                topValue: topDrillNode.value,
                record,
                children,
            };
        }
    }
    function makeMatrix(rootRow) {
        const result = new Map();
        dfsRow(result, rootRow);
        return result;
        function dfsRow(matrix, row) {
            const subMap = new Map();
            matrix.set(row.leftKey, subMap);
            dfsCol(subMap, row.col);
            if (!isLeafNode(row)) {
                row.children.forEach((childRow) => {
                    dfsRow(matrix, childRow);
                });
            }
        }
        function dfsCol(subMap, col) {
            subMap.set(col.topKey, col.record);
            if (!isLeafNode(col)) {
                col.children.forEach((childCol) => {
                    dfsCol(subMap, childCol);
                });
            }
        }
    }
}

const ExpandSpan = styled__default.span `
  display: inline-flex;
  align-items: center;
  padding: 2px 8px 2px 0;
  cursor: pointer;

  .icon {
    fill: currentColor;
    margin-right: 4px;

    &.expanded {
      transform-origin: center center;
      transform: rotate(90deg);
    }
  }
`;
function convertDrillTreeToCrossTree(drillTree, { indicators, encode = simpleEncode, generateSubtotalNode, enforceExpandTotalNode = true, expandKeys, onChangeExpandKeys = noop$1, supportsExpand, } = {}) {
    const totalKey = encode([]);
    // fixme 如果 expandKeys 没传的，应该认为所有的节点都是展开的
    const expandKeySet = new Set(expandKeys !== null && expandKeys !== void 0 ? expandKeys : []);
    return dfs(drillTree);
    /** 在 indicators 非空的情况下获取指标对应的 CrossTreeNode */
    function getIndicators(node, nodeData) {
        return indicators.map((indicator) => (Object.assign({ key: encode(node.path.concat([indicator.code])), value: indicator.name, data: Object.assign(Object.assign({}, nodeData), { indicator }) }, indicator)));
    }
    function drillNodeToTreeNode(node, nodeData) {
        if (indicators != null) {
            return {
                key: node.key,
                value: node.value,
                data: nodeData,
                children: getIndicators(node, nodeData),
            };
        }
        else {
            return {
                key: node.key,
                value: node.value,
                data: nodeData,
            };
        }
    }
    function dfs(drillNodes, depth) {
        const result = [];
        for (const node of drillNodes) {
            const nodeData = { dataKey: node.key, dataPath: node.path };
            if (isLeafNode(node) && !node.hasChild) {
                result.push(drillNodeToTreeNode(node, nodeData));
            }
            else {
                let needProcessChildren = true;
                let crossTreeNode = {
                    key: node.key,
                    value: node.value,
                    data: nodeData,
                };
                if (!supportsExpand || (enforceExpandTotalNode && node.key === totalKey)) {
                    // 不支持展开功能 或是强制展开
                    crossTreeNode.children = dfs(node.children);
                }
                else if (expandKeySet.has(node.key)) {
                    // 展开的父节点
                    crossTreeNode.title = (React.createElement(ExpandSpan, { onClick: () => {
                            onChangeExpandKeys(expandKeys.filter((k) => k !== node.key), node, 'collapse');
                        } },
                        React.createElement(CaretRight16, { className: "icon expanded" }),
                        node.value));
                    crossTreeNode.children = dfs(node.children);
                }
                else {
                    // 收拢的父节点
                    needProcessChildren = false;
                    crossTreeNode.title = (React.createElement(ExpandSpan, { onClick: () => {
                            onChangeExpandKeys(expandKeys.concat([node.key]), node, 'expand');
                        } },
                        React.createElement(CaretRight16, { className: "icon collapsed" }),
                        node.value));
                    if (indicators != null) {
                        crossTreeNode.children = getIndicators(node, nodeData);
                    }
                }
                if (needProcessChildren) {
                    const subtotalNodeData = generateSubtotalNode === null || generateSubtotalNode === void 0 ? void 0 : generateSubtotalNode(node);
                    if (subtotalNodeData) {
                        const { position = 'start', value } = subtotalNodeData;
                        const subtotalPath = node.path.concat([value]);
                        const subtotalDrillNode = {
                            key: encode(subtotalPath),
                            path: subtotalPath,
                            value,
                        };
                        const subtotalTreeNode = drillNodeToTreeNode(subtotalDrillNode, nodeData);
                        if (position === 'start') {
                            crossTreeNode.children.unshift(subtotalTreeNode);
                        }
                        else {
                            crossTreeNode.children.push(subtotalTreeNode);
                        }
                    }
                }
                result.push(crossTreeNode);
            }
        }
        return result;
    }
}

const ROW_KEY = 'rowKey';
const CrossTableClasses = {
    leftHeaderCell: 'left-header-cell',
    topHeaderCell: 'top-header-cell',
};

function buildCrossTable(options) {
    const { leftTree, topTree, leftTotalNode, topTotalNode, leftMetaColumns } = options;
    const leftHeaderWidth = Math.max(leftMetaColumns.length, getTreeDepth(leftTree) + 1);
    return {
        columns: getColumns(),
        dataSource: getDataSource(),
    };
    /** 获取表格的列配置 */
    function getColumns() {
        return [...getLeftPartColumns(), ...getDataPartColumns()];
        function getLeftPartColumns() {
            var _a;
            const leftPartColumns = [];
            for (let index = 0; index < leftHeaderWidth; index++) {
                const metaCol = (_a = leftMetaColumns[index]) !== null && _a !== void 0 ? _a : {};
                const staticMetaColConfig = __rest(metaCol, ["getCellProps", "render"]);
                leftPartColumns.push(Object.assign(Object.assign({ columnType: 'left', lock: true }, staticMetaColConfig), { getCellProps: leftHeaderGetCellPropsFactory(metaCol, index), getSpanRect: leftHeaderGetSpanRectFactory(metaCol, index), getValue: leftHeaderGetValueFactory(metaCol, index), render: leftHeaderRenderFactory(metaCol, index) }));
            }
            return leftPartColumns;
            function leftHeaderGetCellPropsFactory(metaCol, colIndex) {
                return (_value, row, rowIndex) => {
                    var _a;
                    const node = row.nodes[colIndex];
                    const customProps = (_a = metaCol.getCellProps) === null || _a === void 0 ? void 0 : _a.call(metaCol, node, colIndex);
                    return Object.assign({ className: classnames(CrossTableClasses.leftHeaderCell, customProps === null || customProps === void 0 ? void 0 : customProps.className) }, customProps);
                };
            }
            function leftHeaderGetSpanRectFactory(metaCol, colIndex) {
                return (_value, row) => row.rects[colIndex];
            }
            function leftHeaderGetValueFactory(metaCol, colIndex) {
                return (row, rowIndex) => {
                    const node = row.nodes[colIndex];
                    return node.value;
                };
            }
            function leftHeaderRenderFactory(metaCol, colIndex) {
                return (v, row, rowIndex) => {
                    var _a;
                    const node = row.nodes[colIndex];
                    if (metaCol.render) {
                        return metaCol.render(node, colIndex);
                    }
                    return (_a = node.title) !== null && _a !== void 0 ? _a : node.value;
                };
            }
        }
        /** 获取表格数据部分的列配置 */
        function getDataPartColumns() {
            if (topTree.length > 0) {
                return dfs(topTree, { valuePath: [], depth: 0 });
            }
            else if (topTotalNode) {
                return dfs([topTotalNode], { valuePath: [], depth: 0 });
            }
            else {
                return [];
            }
            function dfs(nodes, ctx) {
                const result = [];
                for (const node of nodes) {
                    ctx.valuePath.push(node.value);
                    if (isLeafNode(node)) {
                        // 叶子节点
                        result.push(getDataColumn(node, ctx.depth));
                    }
                    else {
                        const { key, value, children } = node, others = __rest(node
                        // 强制展开的节点
                        , ["key", "value", "children"]);
                        // 强制展开的节点
                        result.push(Object.assign(Object.assign({ columnType: 'data-parent' }, others), { name: value, children: dfs(children, { valuePath: ctx.valuePath, depth: ctx.depth + 1 }) }));
                    }
                    ctx.valuePath.pop();
                }
                return result;
            }
        }
        function getDataColumn(topNode, topDepth) {
            const columnGetValue = (row) => {
                const leftDepth = row.nodes.length - 1;
                const leftNode = row.nodes[leftDepth];
                return options.getValue(leftNode, topNode, leftDepth, topDepth);
            };
            const { key, value, children } = topNode, others = __rest(topNode, ["key", "value", "children"]);
            return Object.assign(Object.assign({ columnType: 'data' }, others), { getValue: columnGetValue, name: value, children: null, render(value, row) {
                    if (options.render) {
                        const leftDepth = row.nodes.length - 1;
                        const leftNode = row.nodes[leftDepth];
                        return options.render(value, leftNode, topNode, leftDepth, topDepth);
                    }
                    return value;
                },
                getCellProps(value, row) {
                    if (options.getCellProps) {
                        const leftDepth = row.nodes.length - 1;
                        const leftNode = row.nodes[leftDepth];
                        return options.getCellProps(value, leftNode, topNode, leftDepth, topDepth);
                    }
                } });
        }
    }
    function getDataSource() {
        const flatRows = [];
        const ctx = { depth: 0, nodes: [], rects: [], rowIndex: 0 };
        if (leftTree.length > 0) {
            dfs(leftTree, ctx);
        }
        else if (leftTotalNode) {
            dfs([leftTotalNode], ctx);
        } // else 表格没有行，展示空表格
        return flatRows;
        function dfs(nodes, ctx) {
            let count = 0;
            for (const node of nodes) {
                if (node.hidden) {
                    // 跳过被隐藏的节点
                    continue;
                }
                const rect = {
                    top: ctx.rowIndex + count,
                    bottom: -1,
                    left: ctx.depth,
                    right: -1,
                };
                const row = {
                    [ROW_KEY]: node.key,
                    rects: [...ctx.rects, rect],
                    nodes: [...ctx.nodes, node],
                };
                if (isLeafNode(node)) {
                    rect.right = leftHeaderWidth;
                    rect.bottom = rect.top + 1;
                    flatRows.push(row);
                    count += 1;
                }
                else {
                    ctx.rects.push(rect);
                    ctx.nodes.push(node);
                    const ret = dfs(node.children, {
                        nodes: ctx.nodes,
                        rects: ctx.rects,
                        depth: ctx.depth + 1,
                        rowIndex: ctx.rowIndex + count,
                    });
                    ctx.rects.pop();
                    ctx.nodes.pop();
                    count += ret.count;
                    rect.right = rect.left + 1;
                    rect.bottom = rect.top + ret.count;
                }
            }
            return { count };
        }
    }
}

const StyledBaseTableForCrossTable = styled__default(BaseTable) `
  // 使 art-table 默认的 hover 效果失效
  .${Classes.tableBody} tr.hovered {
    background-color: inherit;
  }

  .${Classes.tableBody} td.${CrossTableClasses.leftHeaderCell} {
    vertical-align: center;
    padding-top: 16px;
  }

  .${CrossTableClasses.topHeaderCell} {
    min-height: 24px;
    display: flex;
    align-items: center;
  }

  &.compact {
    .${Classes.tableCell} {
      height: 36px;
    }
    .${Classes.tableBody} td.${CrossTableClasses.leftHeaderCell} {
      padding-top: 8px;
    }
  }
`;
CrossTable.defaultProps = {
    leftMetaColumns: [],
};
function CrossTable(_a) {
    var { leftTree, leftTotalNode, topTree, topTotalNode, getValue, getCellProps, leftMetaColumns, render, className } = _a, others = __rest(_a, ["leftTree", "leftTotalNode", "topTree", "topTotalNode", "getValue", "getCellProps", "leftMetaColumns", "render", "className"]);
    const { dataSource, columns } = buildCrossTable({
        // 有的时候 leftTree/topTree 是通过 node.children 传入的
        // 此时 leftTree/topTree 等于 null 和等于空数组是等价的
        // 故在这里兼容 leftTree/topTree 为空的情况
        leftTree: leftTree !== null && leftTree !== void 0 ? leftTree : [],
        topTree: topTree !== null && topTree !== void 0 ? topTree : [],
        leftTotalNode,
        topTotalNode,
        getValue,
        getCellProps,
        render,
        leftMetaColumns,
    });
    return (React.createElement(StyledBaseTableForCrossTable, Object.assign({}, others, { dataSource: dataSource, columns: columns, primaryKey: ROW_KEY, className: classnames('compact', className) })));
}

function buildCrossTreeTable(options) {
    const { leftTree, topTree, primaryColumn, openKeys, onChangeOpenKeys, indentSize, isLeafNode: isLeafNodeOpt = isLeafNode, } = options;
    return makeTreeModeTransform({
        primaryKey: ROW_KEY,
        openKeys,
        onChangeOpenKeys,
        indentSize,
        isLeafNode(row, nodeMeta) {
            // 调用上层 isLeafNodeOpt 时，会从 row.node 中读取该表格行对应的 leftTreeNode
            return isLeafNodeOpt(row.node, nodeMeta);
        },
    })({
        columns: getColumns(),
        dataSource: getDataSource(),
    });
    /** 获取表格的列配置 */
    function getColumns() {
        return [
            Object.assign(Object.assign({}, primaryColumn), { getValue(row) {
                    return row.node.value;
                },
                getCellProps(value, row) {
                    if (primaryColumn.getCellProps) {
                        return primaryColumn.getCellProps(row.node, row.nodes.length - 1);
                    }
                },
                render(value, row) {
                    if (primaryColumn.render) {
                        return primaryColumn.render(row.node, row.nodes.length - 1);
                    }
                    return value;
                } }),
            ...getDataPartColumns(),
        ];
        /** 获取表格数据部分的列配置 */
        function getDataPartColumns() {
            return dfs(topTree, { depth: 0 });
            function dfs(nodes, ctx) {
                const result = [];
                for (const node of nodes) {
                    if (isLeafNode(node)) {
                        result.push(getDataColumn(node, ctx.depth));
                    }
                    else {
                        const { key, value, children } = node, others = __rest(node, ["key", "value", "children"]);
                        result.push(Object.assign(Object.assign({}, others), { name: value, children: dfs(children, { depth: ctx.depth + 1 }) }));
                    }
                }
                return result;
            }
        }
        function getDataColumn(topNode, topDepth) {
            const columnGetValue = (row) => {
                const leftDepth = row.nodes.length - 1;
                const leftNode = row.node;
                return options.getValue(leftNode, topNode, leftDepth, topDepth);
            };
            const { key, value, children } = topNode, others = __rest(topNode, ["key", "value", "children"]);
            return Object.assign(Object.assign({}, others), { getValue: columnGetValue, name: value, children: null, render(value, row) {
                    if (options.render) {
                        const leftDepth = row.nodes.length - 1;
                        const leftNode = row.node;
                        return options.render(value, leftNode, topNode, leftDepth, topDepth);
                    }
                    return value;
                },
                getCellProps(value, row) {
                    if (options.getCellProps) {
                        const leftDepth = row.nodes.length - 1;
                        const leftNode = row.node;
                        return options.getCellProps(value, leftNode, topNode, leftDepth, topDepth);
                    }
                } });
        }
    }
    function getDataSource() {
        return dfs(leftTree, { nodes: [] });
        function dfs(nodes, ctx) {
            const result = [];
            for (const node of nodes) {
                if (node.hidden) {
                    // 跳过被隐藏的节点
                    continue;
                }
                if (isLeafNode(node)) {
                    result.push({
                        [ROW_KEY]: node.key,
                        node,
                        nodes: [...ctx.nodes, node],
                    });
                }
                else {
                    const nodes = [...ctx.nodes, node];
                    ctx.nodes.push(node);
                    const children = dfs(node.children, ctx);
                    result.push({ [ROW_KEY]: node.key, node, nodes, children });
                    ctx.nodes.pop();
                }
            }
            return result;
        }
    }
}

class CrossTreeTable extends React.Component {
    constructor(props) {
        super(props);
        this.onChangeOpenKeys = (nextOpenKeys) => {
            this.props.onChangeOpenKeys(nextOpenKeys);
            if (!('openKeys' in this.props)) {
                this.setState({ openKeys: nextOpenKeys });
            }
        };
        this.state = {
            openKeys: props.defaultOpenKeys,
        };
    }
    static getDerivedStateFromProps(nextProps) {
        if ('openKeys' in nextProps) {
            return { openKeys: nextProps.openKeys };
        }
        return null;
    }
    render() {
        const _a = this.props, { leftTree, topTree, getValue, getCellProps, primaryColumn, render, openKeys: openKeysProp, defaultOpenKeys, onChangeOpenKeys, indentSize, isLeafNode } = _a, others = __rest(_a, ["leftTree", "topTree", "getValue", "getCellProps", "primaryColumn", "render", "openKeys", "defaultOpenKeys", "onChangeOpenKeys", "indentSize", "isLeafNode"]) // 透传其他 BaseTable 的 props
        ;
        const openKeys = openKeysProp !== null && openKeysProp !== void 0 ? openKeysProp : this.state.openKeys;
        const { dataSource, columns } = buildCrossTreeTable({
            // 有的时候 leftTree/topTree 是通过 node.children 传入的
            // 此时 leftTree/topTree 等于 null 和等于空数组是等价的
            // 故在这里兼容 leftTree/topTree 为空的情况
            leftTree: leftTree !== null && leftTree !== void 0 ? leftTree : [],
            topTree: topTree !== null && topTree !== void 0 ? topTree : [],
            getValue,
            getCellProps,
            render,
            primaryColumn,
            openKeys,
            onChangeOpenKeys: this.onChangeOpenKeys,
            indentSize,
            isLeafNode,
        });
        return React.createElement(BaseTable, Object.assign({}, others, { primaryKey: ROW_KEY, dataSource: dataSource, columns: columns }));
    }
}
CrossTreeTable.defaultProps = {
    defaultOpenKeys: [],
    onChangeOpenKeys: noop$1,
};

var defaultStatistics = {
  show: false,
  position: 'start',
  text: ['总计', '小计']
};

var Table = function Table(_ref) {
  var tableProps = _ref.tableProps,
      container = _ref.container,
      _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? 'default' : _ref$theme,
      device = _ref.device;

  var _tableProps$dataSourc = tableProps.dataSource,
      dataSource = _tableProps$dataSourc === void 0 ? [] : _tableProps$dataSourc,
      _tableProps$datasetPa = tableProps.datasetParams,
      datasetParams = _tableProps$datasetPa === void 0 ? {} : _tableProps$datasetPa,
      restProps = objectWithoutPropertiesLoose(tableProps, ["dataSource", "datasetParams"]);

  var _datasetParams$leftCo = datasetParams.leftCodes,
      leftCodes = _datasetParams$leftCo === void 0 ? [] : _datasetParams$leftCo,
      _datasetParams$topCod = datasetParams.topCodes,
      topCodes = _datasetParams$topCod === void 0 ? [] : _datasetParams$topCod,
      _datasetParams$indica = datasetParams.indicatorSide,
      indicatorSide = _datasetParams$indica === void 0 ? 'top' : _datasetParams$indica,
      _datasetParams$suppor = datasetParams.supportsExpand,
      supportsExpand = _datasetParams$suppor === void 0 ? false : _datasetParams$suppor,
      _datasetParams$ellips = datasetParams.ellipsis,
      ellipsis = _datasetParams$ellips === void 0 ? false : _datasetParams$ellips,
      setCellProps = datasetParams.setCellProps,
      size = datasetParams.size,
      _datasetParams$column = datasetParams.columns,
      columns = _datasetParams$column === void 0 ? {} : _datasetParams$column,
      percent = datasetParams.percent;
  var statistics = merge$2({}, defaultStatistics, datasetParams.statistics);
  var leftStatistics = merge$2({}, statistics, datasetParams.leftStatistics);
  var topStatistics = merge$2({}, statistics, datasetParams.topStatistics);

  var _getPropsByType = getPropsByType(theme, size, device),
      style = _getPropsByType.style,
      defaultColumnWidth = _getPropsByType.defaultColumnWidth;

  var indicators = datasetParams.indicators ? datasetParams.indicators.map(function (item) {
    var _columns$name;

    var code = item.code;
    var name = item.name || code;
    var expression = item.expression || "SUM(" + code + ")";
    return _extends_1({
      //单个指标下无 indicators 参数，对齐无效。。
      align: (_columns$name = columns[name]) === null || _columns$name === void 0 ? void 0 : _columns$name.align,
      expression: expression
    }, item, {
      name: name
    });
  }) : []; //多指标情况为透视 单指标为交叉

  var multipleIndicators = indicators.length > 1;

  var _useState = useState([]),
      leftExpandKeys = _useState[0],
      setLeftExpandKeys = _useState[1];

  var _useState2 = useState([]),
      topExpandKeys = _useState2[0],
      setTopExpandKeys = _useState2[1];

  var leftDrillTree = buildDrillTree(dataSource, leftCodes, {
    includeTopWrapper: true
  });

  var _convertDrillTreeToCr = convertDrillTreeToCrossTree(leftDrillTree, {
    indicators: multipleIndicators && indicatorSide === 'left' ? indicators : undefined,
    generateSubtotalNode: makeGenerateSubtotalNode(leftStatistics),
    supportsExpand: supportsExpand,
    expandKeys: leftExpandKeys,
    onChangeExpandKeys: setLeftExpandKeys
  }),
      leftTreeRoot = _convertDrillTreeToCr[0];

  var topDrillTree = buildDrillTree(dataSource, topCodes, {
    includeTopWrapper: true
  });

  var _convertDrillTreeToCr2 = convertDrillTreeToCrossTree(topDrillTree, {
    indicators: multipleIndicators && indicatorSide === 'top' ? indicators : undefined,
    generateSubtotalNode: makeGenerateSubtotalNode(topStatistics),
    supportsExpand: supportsExpand,
    expandKeys: topExpandKeys,
    onChangeExpandKeys: setTopExpandKeys
  }),
      topTreeRoot = _convertDrillTreeToCr2[0];

  var aggregate = createAggregateFunction(indicators);
  var matrix = buildRecordMatrix({
    data: dataSource,
    leftCodes: leftCodes,
    topCodes: topCodes,
    aggregate: aggregate
  });
  var cellNumber = getCellNumber(matrix); // 描述左侧维度列名，不传则显示空白

  var leftMetaColumns = leftCodes.map(function (item) {
    return {
      name: item
    };
  });
  return React.createElement(React.Fragment, null, React.createElement(CrossTable, {
    defaultColumnWidth: defaultColumnWidth,
    style: _extends_1({}, style, {
      '--header-cell-border': "1px solid var(--border-color)}",
      '--cell-border-vertical': "1px solid var(--border-color)}",
      height: container.offsetHeight - parseInt(style['--table-font-size'])
    }),
    // TODO scale verticalScroll
    useVirtual: {
      vertical: cellNumber > 4000 ? true : false,
      horizontal: 'auto',
      header: 'auto'
    },
    leftTree: leftTreeRoot.children || [],
    leftTotalNode: leftTreeRoot,
    leftMetaColumns: leftMetaColumns,
    topTree: topTreeRoot.children || [],
    topTotalNode: topTreeRoot,
    render: function render(value, leftNode, topNode) {
      var _ref2, _leftNode$data, _topNode$data, _columns$indicator$co;

      var indicator = multipleIndicators ? (_ref2 = (_leftNode$data = leftNode.data) === null || _leftNode$data === void 0 ? void 0 : _leftNode$data.indicator) !== null && _ref2 !== void 0 ? _ref2 : (_topNode$data = topNode.data) === null || _topNode$data === void 0 ? void 0 : _topNode$data.indicator : indicators[0];
      var formatterType = indicator && ((_columns$indicator$co = columns[indicator.code]) === null || _columns$indicator$co === void 0 ? void 0 : _columns$indicator$co.formatter); // 当且仅当用户未设置格式化并设置百分比时，formatter采用 percent

      if (!formatterType && percent && ['area-down'].includes(percent)) {
        formatterType = 'percent';
      }

      var formatedValue = indicator ? getFormatter(formatterType)(value) : value;
      return ellipsis ? React.createElement(EllipsisCell, {
        value: formatedValue
      }) : formatedValue;
    },
    getCellProps: function getCellProps(value, leftNode, topNode) {
      var _matrix$get, _indicators$;

      var record = (_matrix$get = matrix.get(leftNode.data.dataKey)) === null || _matrix$get === void 0 ? void 0 : _matrix$get.get(topNode.data.dataKey);
      var code = multipleIndicators ? topNode.code : (_indicators$ = indicators[0]) === null || _indicators$ === void 0 ? void 0 : _indicators$.code;
      return setCellProps ? setCellProps(value, code, record) : {};
    },
    getValue: function getValue(leftNode, topNode) {
      var _matrix$get2, _ref3, _leftNode$data2, _topNode$data2;

      var leftDataKey = leftNode.data.dataKey;
      var topDataKey = topNode.data.dataKey;
      var record = (_matrix$get2 = matrix.get(leftDataKey)) === null || _matrix$get2 === void 0 ? void 0 : _matrix$get2.get(topDataKey);
      var indicator = multipleIndicators ? (_ref3 = (_leftNode$data2 = leftNode.data) === null || _leftNode$data2 === void 0 ? void 0 : _leftNode$data2.indicator) !== null && _ref3 !== void 0 ? _ref3 : (_topNode$data2 = topNode.data) === null || _topNode$data2 === void 0 ? void 0 : _topNode$data2.indicator : indicators[0];
      var code = indicator === null || indicator === void 0 ? void 0 : indicator.code;

      if (record == null || !indicator) {
        return '-';
      }

      var value = record[code];

      switch (percent) {
        case 'area-down':
          var sumRecord = getSumRecord(leftNode, topNode, matrix);
          value = sumRecord ? value / sumRecord[code] : value;
          break;
      }

      return value;
    }
  }));
};

function makeGenerateSubtotalNode(statistics) {
  if (!statistics.show) {
    return undefined;
  }

  var _statistics$text = statistics.text,
      main = _statistics$text[0],
      sub = _statistics$text[1];
  return function (drillNode) {
    return {
      position: statistics.position,
      value: drillNode.path.length === 0 ? main : sub || main
    };
  };
}

function getCellNumber(matrix) {
  if (!matrix) {
    return 0;
  }

  var list = matrix.values();
  return matrix.size * list.next().value.size;
}

function getSumRecord(leftNode, topNode, matrix) {
  var _topNode$data3, _matrix$get3;

  var _ref4 = leftNode === null || leftNode === void 0 ? void 0 : leftNode.data,
      dataKey = _ref4.dataKey,
      dataPath = _ref4.dataPath;

  var topDataKey = topNode === null || topNode === void 0 ? void 0 : (_topNode$data3 = topNode.data) === null || _topNode$data3 === void 0 ? void 0 : _topNode$data3.dataKey;
  var totalDataKey = dataKey; // dataPath.length>1 非总计

  if (dataPath.length > 1) {
    totalDataKey = totalDataKey.replace(dataPath[dataPath.length - 1], '').trim();
  }

  return (_matrix$get3 = matrix.get(totalDataKey)) === null || _matrix$get3 === void 0 ? void 0 : _matrix$get3.get(topDataKey);
}

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css$1 = ".rocketChart-table {\n  background-color: inherit;\n  color: rgba(0, 0, 0, 0.65); }\n  .rocketChart-table th,\n  .rocketChart-table td,\n  .rocketChart-table .rocketChart-table-summaryItem {\n    font-size: var(--table-font-size);\n    padding: 0 6px !important; }\n  .rocketChart-table .art-table-cell {\n    height: var(--row-height) !important; }\n  .rocketChart-table .art-table-header-row th {\n    font-weight: 500; }\n  .rocketChart-table .art-empty-table-cell {\n    border-top: 0 !important;\n    border-bottom: 0 !important; }\n  .rocketChart-table .art-empty-wrapper {\n    font: 20px 'STHeiti', sans-serif;\n    color: #666; }\n  .rocketChart-table-bottom {\n    overflow: hidden; }\n  .rocketChart-table-summary {\n    position: relative;\n    display: flex;\n    align-items: center; }\n  .rocketChart-table-summaryLeft, .rocketChart-table-summaryRight {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    z-index: 1;\n    display: flex;\n    align-items: center;\n    background: inherit; }\n  .rocketChart-table-summaryLeft {\n    left: 0; }\n  .rocketChart-table-summaryRight {\n    right: 0; }\n  .rocketChart-table-summaryInner {\n    position: relative;\n    display: flex;\n    align-items: center; }\n  .rocketChart-table-summaryItem {\n    width: 100%;\n    display: flex;\n    align-items: center; }\n  .rocketChart-table-pagination {\n    margin-top: 6px;\n    overflow: auto;\n    overflow-y: hidden;\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    flex-direction: row-reverse;\n    font-size: 12px; }\n  .rocketChart-table-total {\n    margin-right: 8px; }\n  .rocketChart-table .MuiInputBase-root {\n    margin-right: 4px;\n    color: currentColor; }\n  .rocketChart-table .MuiOutlinedInput-input {\n    padding: 4px; }\n  .rocketChart-table .MuiPagination-root ul {\n    flex-wrap: nowrap; }\n  .rocketChart-table .MuiPagination-root .MuiPaginationItem-root,\n  .rocketChart-table .MuiPagination-root .MuiPaginationItem-icon {\n    color: currentColor;\n    font-size: 14px; }\n  .rocketChart-table .MuiSelect-root {\n    font-size: 12px;\n    color: currentColor; }\n  .rocketChart-table .MuiInput-underline:before {\n    border-bottom-color: currentColor; }\n  .rocketChart-table .MuiPaginationItem-page.Mui-selected {\n    border-color: #47abfc;\n    color: #47abfc;\n    background: transparent; }\n  .MuiTooltip-tooltip.rocket-tooltips {\n    font-size: 12px; }\n\n.rocket-chart-ellipsisCell {\n  width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap; }\n  .rocket-chart-ellipsisCell > div {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap; }\n  .rocket-chart-ellipsisCell * {\n    white-space: nowrap; }\n\n.rocketChart-table-dark {\n  color: #ccc;\n  scrollbar-track-color: #464646;\n  scrollbar-color: #c0c0c0 transparent; }\n  .rocketChart-table-dark .MuiSelect-select,\n  .rocketChart-table-dark .MuiPaginationItem-root,\n  .rocketChart-table-dark .MuiSelect-icon {\n    color: #ccc; }\n  .rocketChart-table-dark .MuiInputBase-root {\n    background-color: #555; }\n  .rocketChart-table-dark .rocketChart-table-summary {\n    background: #272727;\n    color: #20a0ff;\n    border-top: 1px #3c3c3c solid;\n    border-bottom: 1px #3c3c3c solid; }\n  .rocketChart-table-dark .anticon {\n    color: #ccc; }\n  .rocketChart-table-dark *::-webkit-scrollbar {\n    width: 10px;\n    background-color: #fff; }\n  .rocketChart-table-dark ::-webkit-scrollbar-track {\n    background-color: #464646; }\n  .rocketChart-table-dark ::-webkit-scrollbar-thumb {\n    border: 1px solid #464646;\n    border-radius: 8px;\n    background-color: #c0c0c0; }\n\n.rocketChart-table-mobile .rocketChart-table-pagination {\n  margin-top: 3px;\n  width: 125%;\n  transform: scale(0.8);\n  transform-origin: left top; }\n";
styleInject(css$1);

var Table$1 = function Table$1(props) {
  var type = props.type,
      _props$theme = props.theme,
      theme = _props$theme === void 0 ? 'default' : _props$theme,
      _props$device = props.device,
      device = _props$device === void 0 ? 'desktop' : _props$device;
  var paddingTop = device === 'mobile' ? 4 : 12;
  return React.createElement("div", {
    className: "rocketChart-table rocketChart-table-" + theme + " rocketChart-table-" + device,
    style: {
      paddingTop: paddingTop
    }
  }, type.includes('cross') ? React.createElement(Table, Object.assign({}, props)) : React.createElement(BasicTable, Object.assign({}, props)));
};

var CardItem = function CardItem(_ref) {
  var _ref$selectable = _ref.selectable,
      selectable = _ref$selectable === void 0 ? false : _ref$selectable,
      selected = _ref.selected,
      _ref$data = _ref.data,
      data = _ref$data === void 0 ? [] : _ref$data,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      _ref$formatter = _ref.formatter,
      formatter = _ref$formatter === void 0 ? {} : _ref$formatter,
      clickEvent = _ref.clickEvent;
  var cardItemLabel = useRef(null);
  var cardItemValue = useRef(null);
  var _data$ = data[0],
      key = _data$ === void 0 ? '' : _data$,
      _data$2 = data[1],
      name = _data$2 === void 0 ? '' : _data$2,
      _data$3 = data[2],
      value = _data$3 === void 0 ? '' : _data$3;

  var _ref2 = typeof formatter === 'string' ? {
    type: formatter
  } : typeof formatter === 'function' ? formatter() : formatter,
      _ref2$type = _ref2.type,
      type = _ref2$type === void 0 ? 'string' : _ref2$type,
      _ref2$prefix = _ref2.prefix,
      prefix = _ref2$prefix === void 0 ? '' : _ref2$prefix,
      _ref2$suffix = _ref2.suffix,
      suffix = _ref2$suffix === void 0 ? '' : _ref2$suffix,
      _ref2$valueStyle = _ref2.valueStyle,
      valueStyle = _ref2$valueStyle === void 0 ? {} : _ref2$valueStyle,
      _ref2$labelStyle = _ref2.labelStyle,
      labelStyle = _ref2$labelStyle === void 0 ? {} : _ref2$labelStyle;

  var selectedKey = selected.selectedKey,
      selectedType = selected.selectedType;
  var format = getFormatter(type);
  return React.createElement("div", {
    className: "card-item",
    key: key
  }, React.createElement("div", {
    className: "card-item-label " + (selectable ? 'cursor-handler' : '') + " " + (key === selectedKey && selectedType === 'label' ? 'selected' : ''),
    style: _extends_1({}, labelStyle),
    onClick: function onClick() {
      return selectable && clickEvent(key, 'label', cardItemLabel.current);
    },
    ref: cardItemLabel
  }, name), React.createElement("div", {
    className: "card-item-value " + (selectable ? 'cursor-handler' : '') + " " + (key === selectedKey && selectedType === 'value' ? 'selected' : ''),
    style: _extends_1({}, style, {}, valueStyle),
    onClick: function onClick() {
      return selectable && clickEvent(key, 'value', cardItemValue.current);
    },
    ref: cardItemValue
  }, React.createElement("span", {
    className: "card-item-value-prefix"
  }, prefix), React.createElement("label", null, format(value)), React.createElement("span", {
    className: "card-item-value-suffix"
  }, suffix)));
};

var CardBasic = function CardBasic(_ref) {
  var data = _ref.data,
      datasetParams = _ref.datasetParams,
      selected = _ref.selected,
      clickEvent = _ref.clickEvent;

  var _ref2 = datasetParams !== null && datasetParams !== void 0 && datasetParams.basic ? datasetParams.basic : datasetParams,
      _ref2$selectable = _ref2.selectable,
      selectable = _ref2$selectable === void 0 ? false : _ref2$selectable,
      _ref2$flow = _ref2.flow,
      flow = _ref2$flow === void 0 ? 'row' : _ref2$flow,
      _ref2$align = _ref2.align,
      align = _ref2$align === void 0 ? 'left' : _ref2$align,
      _ref2$verticalAlign = _ref2.verticalAlign,
      verticalAlign = _ref2$verticalAlign === void 0 ? 'center' : _ref2$verticalAlign,
      _ref2$className = _ref2.className,
      className = _ref2$className === void 0 ? '' : _ref2$className,
      _ref2$style = _ref2.style,
      style = _ref2$style === void 0 ? {} : _ref2$style,
      _ref2$valueStyle = _ref2.valueStyle,
      valueStyle = _ref2$valueStyle === void 0 ? {} : _ref2$valueStyle,
      _ref2$formatters = _ref2.formatters,
      formatters = _ref2$formatters === void 0 ? {} : _ref2$formatters;

  var data0 = data[0],
      dataSec = data.slice(1);
  return React.createElement("div", {
    className: "rocketChart-card rocketChart-card-basic " + className + " verticalAlign-" + verticalAlign,
    style: style
  }, React.createElement("div", {
    className: "card-group card-main align-" + flow + "-" + align
  }, React.createElement(CardItem, {
    key: data0[0],
    selected: selected,
    selectable: selectable,
    data: data0,
    style: valueStyle,
    formatter: formatters[data0[0]],
    clickEvent: clickEvent
  })), React.createElement("div", {
    className: "card-group card-sec align-" + flow + "-" + align + " flow-" + flow
  }, dataSec.map(function (_ref3) {
    var key = _ref3[0],
        name = _ref3[1],
        value = _ref3[2];
    return React.createElement(CardItem, {
      key: key,
      selected: selected,
      selectable: selectable,
      data: [key, name, value],
      style: valueStyle,
      formatter: formatters[key],
      clickEvent: clickEvent
    });
  })));
};

var CardAverage = function CardAverage(_ref) {
  var data = _ref.data,
      datasetParams = _ref.datasetParams,
      selected = _ref.selected,
      clickEvent = _ref.clickEvent;

  var _ref2 = datasetParams !== null && datasetParams !== void 0 && datasetParams.average ? datasetParams.average : datasetParams,
      _ref2$selectable = _ref2.selectable,
      selectable = _ref2$selectable === void 0 ? false : _ref2$selectable,
      _ref2$flow = _ref2.flow,
      flow = _ref2$flow === void 0 ? 'row' : _ref2$flow,
      _ref2$align = _ref2.align,
      align = _ref2$align === void 0 ? 'left' : _ref2$align,
      _ref2$verticalAlign = _ref2.verticalAlign,
      verticalAlign = _ref2$verticalAlign === void 0 ? 'center' : _ref2$verticalAlign,
      _ref2$className = _ref2.className,
      className = _ref2$className === void 0 ? '' : _ref2$className,
      _ref2$style = _ref2.style,
      style = _ref2$style === void 0 ? {} : _ref2$style,
      _ref2$valueStyle = _ref2.valueStyle,
      valueStyle = _ref2$valueStyle === void 0 ? {} : _ref2$valueStyle,
      _ref2$formatters = _ref2.formatters,
      formatters = _ref2$formatters === void 0 ? {} : _ref2$formatters;

  return React.createElement("div", {
    className: "rocketChart-card rocketChart-card-average " + className + " verticalAlign-" + verticalAlign,
    style: style
  }, React.createElement("div", {
    className: "card-group align-" + flow + "-" + align + " flow-" + flow
  }, data.map(function (_ref3) {
    var key = _ref3[0],
        name = _ref3[1],
        value = _ref3[2];
    return React.createElement(CardItem, {
      key: key,
      selectable: selectable,
      selected: selected,
      data: [key, name, value],
      style: valueStyle,
      formatter: formatters[key],
      clickEvent: clickEvent
    });
  })));
};

var addPx = function addPx(size) {
  return Math.round(parseFloat(size)) + 'px';
};
/**
 * 获取dom节点样式
 * @param dom
 */


var getInitialStyle = function getInitialStyle(dom) {
  var _getComputedStyle = getComputedStyle(dom),
      color = _getComputedStyle.color,
      fontFamily = _getComputedStyle.fontFamily,
      fontSize = _getComputedStyle.fontSize;

  return {
    color: color,
    fontFamily: fontFamily,
    fontSize: addPx(fontSize)
  };
};
/**
 * 获取初始datasetParams
 * @param params datasetParams
 * @param type 图表类型
 */

var getInitialParams = function getInitialParams(params, type) {
  if (JSON.stringify(params) === '{}') return params;

  if (type === 'card-basic') {
    return params !== null && params !== void 0 && params.basic ? params.basic : params;
  } else if (type === 'card-average') {
    return params !== null && params !== void 0 && params.average ? params.average : params;
  }
};

var css$2 = ".flow-row {\n  flex-direction: row; }\n\n.flow-column {\n  flex-direction: column; }\n\n.align-row-left {\n  justify-content: flex-start; }\n\n.align-row-center {\n  justify-content: center; }\n\n.align-row-right {\n  justify-content: flex-end; }\n\n.align-row-around {\n  justify-content: space-around; }\n\n.align-row-between {\n  justify-content: space-between; }\n\n.align-column-left {\n  align-items: flex-start; }\n\n.align-column-center {\n  align-items: center; }\n\n.align-column-right {\n  align-items: flex-end; }\n\n.verticalAlign-top {\n  place-content: flex-start; }\n\n.verticalAlign-center {\n  place-content: center; }\n\n.verticalAlign-bottom {\n  place-content: flex-end; }\n\n.rocketChart-card {\n  display: flex;\n  flex-flow: column;\n  min-width: 100px;\n  height: 100%;\n  font-size: 12px;\n  line-height: 1.5;\n  padding: 0.5em 0;\n  overflow: auto; }\n  .rocketChart-card .card-group {\n    display: flex;\n    flex-wrap: wrap; }\n    .rocketChart-card .card-group .card-item {\n      padding: 0 1em;\n      font-family: 'Helvetica';\n      box-sizing: border-box; }\n      .rocketChart-card .card-group .card-item .cursor-handler {\n        cursor: pointer; }\n      .rocketChart-card .card-group .card-item .selected {\n        border: 1px solid rgba(160, 160, 160, 0.8); }\n      .rocketChart-card .card-group .card-item-label {\n        font-size: 1.5em;\n        line-height: 1.5;\n        box-sizing: border-box;\n        border: 1px solid transparent;\n        overflow: hidden; }\n      .rocketChart-card .card-group .card-item-value {\n        font-weight: 600;\n        font-size: 3em;\n        white-space: nowrap;\n        box-sizing: border-box;\n        border: 1px solid transparent; }\n        .rocketChart-card .card-group .card-item-value-prefix,\n        .rocketChart-card .card-group .card-item-value label, .rocketChart-card .card-group .card-item-value-suffix {\n          cursor: inherit; }\n        .rocketChart-card .card-group .card-item-value-suffix {\n          font-size: 0.4em; }\n    .rocketChart-card .card-group.card-sec {\n      line-height: 1.2;\n      margin-top: 2px; }\n      .rocketChart-card .card-group.card-sec .card-item {\n        font-size: 1em;\n        color: #a0a0a0; }\n        .rocketChart-card .card-group.card-sec .card-item-label {\n          font-size: inherit;\n          display: inline; }\n          .rocketChart-card .card-group.card-sec .card-item-label:after {\n            content: ': ';\n            display: inline-block;\n            width: 0;\n            height: 0; }\n        .rocketChart-card .card-group.card-sec .card-item-value {\n          display: inline;\n          margin-left: 10px;\n          font-weight: normal;\n          font-size: inherit; }\n          .rocketChart-card .card-group.card-sec .card-item-value span {\n            padding-left: 0.2em; }\n";
styleInject(css$2);

var Card = function Card(props) {
  var type = props.type,
      data = props.data,
      _props$chartOptions$d = props.chartOptions.dataset;
  _props$chartOptions$d = _props$chartOptions$d === void 0 ? {} : _props$chartOptions$d;

  var _props$chartOptions$d2 = _props$chartOptions$d.source,
      source = _props$chartOptions$d2 === void 0 ? [] : _props$chartOptions$d2,
      _props$datasetParams = props.datasetParams,
      datasetParams = _props$datasetParams === void 0 ? {} : _props$datasetParams,
      otherProps = objectWithoutPropertiesLoose(props, ["type", "data", "chartOptions", "datasetParams"]);

  var isCardAverage = type === 'card-average';

  var _getInitialParams = getInitialParams(datasetParams, type),
      _getInitialParams$sel = _getInitialParams.selectable,
      selectable = _getInitialParams$sel === void 0 ? false : _getInitialParams$sel,
      onSelect = _getInitialParams.onSelect;

  var _useState = useState({
    selectedKey: null,
    selectedType: null
  }),
      selected = _useState[0],
      setSelected = _useState[1];

  useEffect(function () {
    if (!selectable) {
      setSelected({
        selectedKey: null,
        selectedType: null
      });
    }
  }, [selectable, setSelected]);

  var clickEvent = function clickEvent(key, type, dom) {
    setSelected({
      selectedKey: key,
      selectedType: type
    });
    onSelect && onSelect({
      key: key,
      type: type,
      style: getInitialStyle(dom)
    });
  };

  if (!(source !== null && source !== void 0 && source.length)) return null;
  var dataTarget = (data === null || data === void 0 ? void 0 : data.target) || [];
  var newData = source.map(function (item, index) {
    var _dataTarget$index;

    return [(_dataTarget$index = dataTarget[index]) === null || _dataTarget$index === void 0 ? void 0 : _dataTarget$index.key].concat(item);
  });
  return isCardAverage ? React.createElement(CardAverage, Object.assign({
    data: newData,
    datasetParams: datasetParams
  }, otherProps, {
    selected: selected,
    clickEvent: clickEvent
  })) : React.createElement(CardBasic, Object.assign({
    data: newData,
    datasetParams: datasetParams
  }, otherProps, {
    selected: selected,
    clickEvent: clickEvent
  }));
};

var optionsList = ['title'];
function disableOptions (target) {
  optionsList.forEach(function (item) {
    if (target.hasOwnProperty(item)) {
      delete target[item];
    }
  });
}

function checkSymbolCount(option, maxSymbolCount) {
  if (maxSymbolCount === void 0) {
    maxSymbolCount = 400;
  }

  var dataset = option.dataset,
      series = option.series;

  if (!dataset || !series) {
    return;
  }

  if (!dataset.source || !dataset.source[0]) {
    return;
  }

  var count = (dataset.source.length - 1) * (dataset.source[0].length - 1);

  if (count >= maxSymbolCount) {
    series.forEach(function (item) {
      item.showSymbol = false;
    });
    merge$2(option, {
      tooltip: {
        trigger: 'axis'
      }
    });
    console.log("\u5F53\u524Dsymbol\u6570\u91CF\uFF1A" + count + " \u8D85\u8FC7\u6700\u5927\u9650\u5236\uFF1A" + maxSymbolCount);
  }
}

var dataFormate = function dataFormate(data, formatters) {
  if (formatters === void 0) {
    formatters = {};
  }

  var target = data.target,
      source = data.source,
      links = data.links,
      categoryKey = data.categoryKey,
      type = data.type;
  var newSource = cloneDeep(source); //关系图不写target的话，source取不到，所以在这里塞上

  if (type.split('-')[0] == 'graph') {
    target.push({
      key: 'symbolSize',
      name: '圆点尺寸'
    }, {
      key: 'x',
      name: 'x'
    }, {
      key: 'y',
      name: 'y'
    });
  } // source:{}


  if (!Array.isArray(newSource)) {
    return data;
  }

  var _loop = function _loop() {
    var _Object$entries$_i = _Object$entries[_i],
        key = _Object$entries$_i[0],
        formater = _Object$entries$_i[1];

    // source:[{},{}]
    if (every(source, isPlainObject)) {
      newSource.forEach(function (item) {
        item[key] = formater(item[key]);
      });
    } // source:[[1,2],[1,2]]


    if (every(source, Array)) {
      var sourceIndex = target.findIndex(function (item) {
        return item.key === key;
      });
      sourceIndex !== -1 && (newSource[sourceIndex] = newSource[sourceIndex].map(function (item) {
        return formater(item);
      }));
    }
  };

  for (var _i = 0, _Object$entries = Object.entries(formatters); _i < _Object$entries.length; _i++) {
    _loop();
  } // source:[[{},{}],[{},{}]]


  return {
    target: target,
    source: newSource,
    links: links,
    categoryKey: categoryKey
  };
};

var renderDrawItem = function renderDrawItem(api, text, point, bottom, trigger) {
  var height = api.getHeight();
  var width = api.getWidth();
  var direction = bottom ? 'bottom' : 'top';
  var textAlign = 'right';

  if (api.value(0) && api.value(1)) {
    var pos = api.coord([api.value(0), api.value(1)]);

    if (pos[1] <= 80) {
      direction = 'bottom';
    }

    if (pos[1] + 80 >= height) {
      direction = 'top';
    }

    if (pos[0] + 80 >= width) {
      textAlign = 'left';
    }
    var initialConfig = {
      circle: {
        r: 4,
        borderWidth: 2,
        fill: point.fill || '#4d6e99',
        stroke: point.stroke || '#4d6e99'
      },
      line: {
        length: 30
      },
      text: {
        fontSize: 12,
        color: '#787878'
      }
    };
    var customSeries = [{
      type: 'circle',
      shape: {
        r: initialConfig['circle'].r
      },
      position: pos,
      style: {
        fill: initialConfig['circle'].fill,
        stroke: initialConfig['circle'].stroke,
        lineWidth: initialConfig['circle'].borderWidth
      }
    }];

    if (trigger !== 'click') {
      var isBottom = direction === 'bottom';
      var isRight = textAlign === 'right';
      var circleLength = initialConfig['circle'].borderWidth + initialConfig['circle'].r;
      var lineY1 = isBottom ? pos[1] + circleLength : pos[1] - circleLength;
      var lineY2 = isBottom ? lineY1 + initialConfig['line'].length : lineY1 - initialConfig['line'].length;
      var textY = isBottom ? lineY2 : lineY2 - 10;
      customSeries = [].concat(customSeries, [{
        type: 'line',
        shape: {
          x1: pos[0],
          y1: lineY1,
          x2: pos[0],
          y2: lineY2
        },
        style: {
          stroke: '#cdcdcd'
        }
      }, {
        type: 'text',
        style: {
          text: text,
          x: isRight ? pos[0] + 5 : pos[0] - 80,
          y: textY,
          fontSize: initialConfig['text'].fontSize,
          fill: initialConfig['text'].color
        }
      }]);
    }

    return {
      type: 'group',
      children: customSeries
    };
  }
};

var customDraw = {
  renderDrawItem: renderDrawItem
};

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Built-in value references. */
var Symbol$1 = root.Symbol;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty$1.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$1.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString$1.call(value);
}

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag$1 && symToStringTag$1 in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject$1(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction$2(value) {
  if (!isObject$1(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto$1 = Function.prototype,
    objectProto$2 = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$1 = funcProto$1.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString$1.call(hasOwnProperty$2).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject$1(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction$2(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue$1(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue$1(object, key);
  return baseIsNative(value) ? value : undefined;
}

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto$3 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$3 = objectProto$3.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty$3.call(data, key) ? data[key] : undefined;
}

/** Used for built-in method references. */
var objectProto$4 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$4 = objectProto$4.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty$4.call(data, key);
}

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
  return this;
}

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/* Built-in method references that are verified to be native. */
var Map$1 = getNative(root, 'Map');

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map$1 || ListCache),
    'string': new Hash
  };
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize$2(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize$2.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize$2.Cache = MapCache;

/**
 * dataset.source 数组第一项 必须转换为string ！
 */

var _toDataset = function _toDataset(data) {
  var _data$target = data.target,
      target = _data$target === void 0 ? [] : _data$target,
      source = data.source,
      links = data.links,
      categoryKey = data.categoryKey; // source:{}

  if (isPlainObject(source) && !links) {
    return {
      source: source
    };
  } else if (isPlainObject(source) && links) {
    return {
      source: source,
      links: links,
      target: target,
      categoryKey: categoryKey
    };
  }

  var unNamedIndex = 0;
  var nameList = target.map(function (item) {
    if (typeof item.name === 'undefined') {
      return "\u672A\u77E5" + ++unNamedIndex;
    }

    return item.name + '';
  }); // source:[{},{}]

  if (every(source, isPlainObject) && !links) {
    var result = [];
    target.forEach(function (_ref, i) {
      var key = _ref.key;
      var name = nameList[i];
      var list = [name];
      source.forEach(function (item) {
        list.push(item[key]);
      });
      result.push(list);
    });
    return {
      source: result
    };
  } else if (every(source, isPlainObject) && links) {
    var _result = [];
    target.forEach(function (_ref2, i) {
      var key = _ref2.key;
      var name = nameList[i];
      var list = [name];
      source.forEach(function (item) {
        list.push(item[key]);
      });

      _result.push(list);
    });
    return {
      source: _result,
      links: links,
      target: target,
      categoryKey: categoryKey
    };
  } // source:[[1,2],[1,2]]
  // or
  // source:[[{},{}],[{},{}]]


  if (Array.isArray(source) && every(source, Array) && !links) {
    var _result2 = nameList.map(function (name, i) {
      var data = source[i] || [];
      return [name].concat(data);
    });

    return {
      source: _result2
    };
  } else if (Array.isArray(source) && every(source, Array) && links) {
    var _result3 = nameList.map(function (name, i) {
      var data = source[i] || [];
      return [name].concat(data);
    });

    return {
      source: _result3,
      links: links,
      target: target,
      categoryKey: categoryKey
    };
  } // Otherwise


  return data;
};

var _toDataTable = (function (data) {
  var target = data.target,
      source = data.source;
  var row_0 = target.map(function (item) {
    return item.key;
  });
  var output = [];
  source[0].forEach(function (col, i) {
    var item = {};
    row_0.forEach(function (row, j) {
      item[row] = source[j][i];
    });
    output.push(item);
  });
  return output;
});

/**
 *
 * input
 * {
  target: [{key: "date", name: "日期"}, {key: "shareCount", name: "分享次数"}],
  source: [
    ["2019-09-08", "2019-09-07", "2019-09-06"],
    [6236, 5595, 5257]
  ]
}
 */
var _validator = (function (data) {
  if (!isObject$2(data)) {
    return false;
  }

  if (!isArray$1(data.target) || !isArray$1(data.source)) {
    return false;
  }

  return !(data.target.length === 0 || data.source.length === 0);
});

var toDataset = _toDataset;
var toDataTable = memoize$2(_toDataTable);
var validator = memoize$2(_validator);

// 判断图是否翻转
var chartInReverse = (function (xAxis, yAxis) {
  var isReverse = xAxis && xAxis.type === 'value' && yAxis && yAxis.type === 'category';
  return isReverse;
});

var isMobile = (function () {
  var result = false;

  (function (a) {
    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) result = true;
  })(navigator.userAgent || navigator.vendor || window.opera);

  return result;
});

var listExtemum = function listExtemum(list) {
  if (list === void 0) {
    list = [];
  }

  if (!list.length) {
    return [];
  }

  return [Math.min.apply(Math, list), Math.max.apply(Math, list)];
}; // 单个series极值


var sourceItemExtemum = function sourceItemExtemum(list) {
  if (list === void 0) {
    list = [];
  }

  var values = list.slice(1);
  return listExtemum(values);
}; // series极值


var seriesExtremum = function seriesExtremum(dataset) {
  var _dataset$source = dataset.source,
      source = _dataset$source === void 0 ? [] : _dataset$source;
  var res = source.slice(1).map(function (item) {
    return sourceItemExtemum(item);
  });
  return res;
}; // dataSet极值

var dataSetExtremum = function dataSetExtremum(dataset) {
  var res = seriesExtremum(dataset);
  return listExtemum(res.flat());
}; // 轴最大值

var axisMax = function axisMax(chartOptions) {
  var _ref = chartOptions || {},
      xAxis = _ref.xAxis,
      yAxis = _ref.yAxis,
      _ref$dataset = _ref.dataset,
      dataset = _ref$dataset === void 0 ? {
    source: []
  } : _ref$dataset;

  var valueAxisName = chartInReverse(xAxis, yAxis) ? 'xAxis' : 'yAxis';
  var axisOption = chartOptions[valueAxisName] || {};

  if (+axisOption.max) {
    return +axisOption.max;
  }

  var _dataSetExtremum = dataSetExtremum(dataset),
      min = _dataSetExtremum[0],
      max = _dataSetExtremum[1];

  return max;
};
var getExtremum = {
  series: seriesExtremum,
  dataset: dataSetExtremum,
  axisMax: axisMax
};

var css$3 = "@charset \"UTF-8\";\n.base-rocketChart-indicator {\n  position: relative;\n  font-family: Helvetica;\n  font-size: 11px;\n  background: inherit;\n  white-space: nowrap;\n  width: 100%;\n  height: 100%; }\n  .base-rocketChart-indicator .card-cont {\n    font-size: 32px;\n    font-weight: 600;\n    margin-top: 8px;\n    margin-bottom: 10px; }\n    .base-rocketChart-indicator .card-cont-unit {\n      font-size: 11px;\n      margin-left: 3px; }\n  .base-rocketChart-indicator .card-footer {\n    display: flex;\n    justify-content: start;\n    align-items: center;\n    font-size: 12px;\n    height: 17px;\n    line-height: 17px; }\n    .base-rocketChart-indicator .card-footer-item:not(:first-child) {\n      margin-left: 10px; }\n    .base-rocketChart-indicator .card-footer-item-text {\n      margin-left: 10px; }\n    .base-rocketChart-indicator .card-footer-item-icon {\n      margin-left: 5px; }\n      .base-rocketChart-indicator .card-footer-item-icon .anticon {\n        display: inline-block;\n        color: inherit;\n        font-style: normal;\n        line-height: 0;\n        text-align: center;\n        text-transform: none;\n        vertical-align: -.2em;\n        text-rendering: optimizeLegibility;\n        -webkit-font-smoothing: antialiased; }\n    .base-rocketChart-indicator .card-footer-item-title::after {\n      content: '：';\n      display: inline-block;\n      width: 0;\n      height: 0; }\n";
styleInject(css$3);

var constants = {
  nameMap: ['同比', '环比']
};

var renderIcon = function renderIcon(value) {
  return value.toString().includes('-') ? React.createElement("i", {
    className: 'anticon',
    style: {
      color: "#04A2A4",
      transform: "rotate(180deg)"
    }
  }, React.createElement("svg", {
    id: "icon-jiantou",
    width: '1em',
    height: '1em',
    fill: 'currentColor',
    viewBox: "0 0 1024 1024"
  }, React.createElement("path", {
    d: "M137.93433786 933.875h746.92493976c34.76850183 0 60.5614812-40.94887912 40.25009262-81.36978579-16.24290024-32.40815735-344.6103587-680.15202402-372.68604108-735.37167207-18.43243067-36.30583163-62.45596939-35.71574551-80.88839923 0C450.8819116 156.90224819 120.80630845 807.09963192 97.90164517 854.16677301c-16.8019291 34.47345877 1.75472974 79.70822699 40.03269269 79.70822699z"
  }))) : React.createElement("i", {
    className: 'anticon',
    style: {
      color: "#D87A80"
    }
  }, React.createElement("svg", {
    id: "icon-jiantou",
    width: '1em',
    height: '1em',
    fill: 'currentColor',
    viewBox: "0 0 1024 1024"
  }, React.createElement("path", {
    d: "M137.93433786 933.875h746.92493976c34.76850183 0 60.5614812-40.94887912 40.25009262-81.36978579-16.24290024-32.40815735-344.6103587-680.15202402-372.68604108-735.37167207-18.43243067-36.30583163-62.45596939-35.71574551-80.88839923 0C450.8819116 156.90224819 120.80630845 807.09963192 97.90164517 854.16677301c-16.8019291 34.47345877 1.75472974 79.70822699 40.03269269 79.70822699z"
  })));
};

var renderText = function renderText(ele) {
  if (!ele.preRender) {
    return renderNumeralMap['string'](ele.value);
  } else if (ele.preRender) {
    if (typeof ele.preRender === 'string' && renderNumeralMap[ele.preRender]) {
      return renderNumeralMap[ele.preRender](ele.value);
    } else if (typeof ele.preRender === 'function') {
      return ele.preRender(ele.value);
    } else return ele.value;
  }
};

var renderFooterIcon = function renderFooterIcon(ele) {
  // 如果是组件直接渲染
  if (ele.icon && typeof ele.icon === 'object') {
    return ele.icon;
  } else if (ele.value && Number(ele.value) !== 0) {
    // 渲染指定图标
    return React.createElement("span", {
      className: 'card-footer-item-icon'
    }, renderIcon(ele.value));
  }
};

var renderArrayFooter = function renderArrayFooter(footer) {
  var footerCont = [];
  footer.slice(0, 2).forEach(function (ele, cursor) {
    footerCont.push(React.createElement("div", {
      className: "card-footer-item",
      key: ele.key || cursor
    }, React.createElement("span", {
      className: "card-footer-item-title"
    }, ele.name || constants.nameMap[cursor]), React.createElement("span", {
      className: "card-footer-item-text"
    }, renderText(ele)), renderFooterIcon(ele)));
  });
  return footerCont;
};

var renderFooter = function renderFooter(footer) {
  var footerCont = '';

  if (Array.isArray(footer)) {
    footerCont = renderArrayFooter(footer);
  } else {
    footerCont = footer;
  }

  return footerCont;
};

var RocketIndicator = function RocketIndicator(_ref) {
  var datasetParams = _ref.datasetParams;
  var _datasetParams$basic = datasetParams.basic,
      basic = _datasetParams$basic === void 0 ? {
    cont: '',
    unit: '',
    compare: ''
  } : _datasetParams$basic;
  var _basic$cont = basic.cont,
      cont = _basic$cont === void 0 ? '' : _basic$cont,
      unit = basic.unit,
      _basic$compare = basic.compare,
      compare = _basic$compare === void 0 ? '' : _basic$compare;
  return React.createElement("div", {
    className: "base-rocketChart-indicator",
    key: 'rocketChart-indicator'
  }, React.createElement("div", {
    className: 'card-cont'
  }, cont, unit ? React.createElement("span", {
    className: 'card-cont-unit'
  }, unit) : null), React.createElement("div", {
    className: 'card-footer'
  }, renderFooter(compare)));
};

var css$4 = ".multi-rocketChart-indicator {\n  position: relative;\n  font-family: Helvetica;\n  font-size: 11px;\n  background: inherit;\n  white-space: nowrap;\n  width: 100%;\n  height: 100%; }\n  .multi-rocketChart-indicator .card-main {\n    display: flex;\n    flex-flow: column nowrap; }\n    .multi-rocketChart-indicator .card-main-row {\n      padding-top: 12px;\n      padding-bottom: 5px;\n      display: flex;\n      justify-content: flex-start; }\n      .multi-rocketChart-indicator .card-main-row:not(:last-child) {\n        border-bottom: 1px solid #F1F1F1; }\n      .multi-rocketChart-indicator .card-main-row:last-child {\n        padding-bottom: 0; }\n      .multi-rocketChart-indicator .card-main-row-cont {\n        position: relative;\n        min-width: 150px;\n        max-width: 500px;\n        overflow: hidden; }\n        .multi-rocketChart-indicator .card-main-row-cont-title {\n          height: 20px;\n          line-height: 20px;\n          font-size: 14px;\n          text-align: center;\n          margin-bottom: 6px; }\n        .multi-rocketChart-indicator .card-main-row-cont-value {\n          height: 38px;\n          line-height: 38px;\n          font-weight: bold;\n          font-size: 32px;\n          text-align: center; }\n          .multi-rocketChart-indicator .card-main-row-cont-value-unit {\n            margin-left: 3px;\n            font-size: 11px; }\n      .multi-rocketChart-indicator .card-main-row-footer {\n        width: 100%;\n        display: flex;\n        justify-content: space-around;\n        font-size: 11px;\n        margin-left: 15px; }\n        .multi-rocketChart-indicator .card-main-row-footer-item {\n          display: inline-flex;\n          flex-flow: column nowrap;\n          align-items: center; }\n          .multi-rocketChart-indicator .card-main-row-footer-item-title {\n            height: 20px;\n            line-height: 20px;\n            font-size: 14px;\n            margin-bottom: 4px; }\n          .multi-rocketChart-indicator .card-main-row-footer-item-text {\n            height: 38px;\n            line-height: 38px;\n            font-size: 18px; }\n            .multi-rocketChart-indicator .card-main-row-footer-item-text-icon {\n              display: inline-flex;\n              font-size: 11px;\n              margin-left: 5px; }\n              .multi-rocketChart-indicator .card-main-row-footer-item-text-icon .anticon {\n                display: inline-block;\n                color: inherit;\n                font-style: normal;\n                line-height: 0;\n                text-align: center;\n                text-transform: none;\n                vertical-align: -.2em;\n                text-rendering: optimizeLegibility;\n                -webkit-font-smoothing: antialiased; }\n\n.rocketChart-dark .card-main-row:not(:last-child) {\n  border-bottom: 1px solid #444444; }\n";
styleInject(css$4);

var constants$1 = {
  nameMap: ['同比', '环比']
};

var renderIcon$1 = function renderIcon(value) {
  return value.toString().includes('-') ? React.createElement("i", {
    className: 'anticon',
    style: {
      color: "#04A2A4",
      transform: "rotate(180deg)"
    }
  }, React.createElement("svg", {
    id: "icon-jiantou",
    width: '1em',
    height: '1em',
    fill: 'currentColor',
    viewBox: "0 0 1024 1024"
  }, React.createElement("path", {
    d: "M137.93433786 933.875h746.92493976c34.76850183 0 60.5614812-40.94887912 40.25009262-81.36978579-16.24290024-32.40815735-344.6103587-680.15202402-372.68604108-735.37167207-18.43243067-36.30583163-62.45596939-35.71574551-80.88839923 0C450.8819116 156.90224819 120.80630845 807.09963192 97.90164517 854.16677301c-16.8019291 34.47345877 1.75472974 79.70822699 40.03269269 79.70822699z"
  }))) : React.createElement("i", {
    className: 'anticon',
    style: {
      color: "#D87A80"
    }
  }, React.createElement("svg", {
    id: "icon-jiantou",
    width: '1em',
    height: '1em',
    fill: 'currentColor',
    viewBox: "0 0 1024 1024"
  }, React.createElement("path", {
    d: "M137.93433786 933.875h746.92493976c34.76850183 0 60.5614812-40.94887912 40.25009262-81.36978579-16.24290024-32.40815735-344.6103587-680.15202402-372.68604108-735.37167207-18.43243067-36.30583163-62.45596939-35.71574551-80.88839923 0C450.8819116 156.90224819 120.80630845 807.09963192 97.90164517 854.16677301c-16.8019291 34.47345877 1.75472974 79.70822699 40.03269269 79.70822699z"
  })));
};

var renderText$1 = function renderText(ele) {
  if (!ele.preRender) {
    return renderNumeralMap['string'](ele.value);
  } else if (ele.preRender) {
    if (typeof ele.preRender === 'string' && renderNumeralMap[ele.preRender]) {
      return renderNumeralMap[ele.preRender](ele.value);
    } else if (typeof ele.preRender === 'function') {
      return ele.preRender(ele.value);
    } else return ele.value;
  }
};

var renderFooterIcon$1 = function renderFooterIcon(ele) {
  if (ele.icon && typeof ele.icon === 'object') {
    return ele.icon;
  } else if (ele.value && Number(ele.value) !== 0) {
    return React.createElement("span", {
      className: 'card-main-row-footer-item-text-icon'
    }, renderIcon$1(ele.value));
  }
};

var renderArrayFooter$1 = function renderArrayFooter(footer) {
  var footerCont = [];
  footer.slice(0, 2).forEach(function (ele, cursor) {
    footerCont.push(React.createElement("div", {
      className: "card-main-row-footer-item",
      key: ele.key || cursor
    }, React.createElement("div", {
      className: "card-main-row-footer-item-title"
    }, ele.name || constants$1.nameMap[cursor]), React.createElement("div", {
      className: "card-main-row-footer-item-text",
      style: {
        color: ele.value && ele.value.toString().includes('-') ? '#04A2A4' : '#D87A80'
      }
    }, renderText$1(ele), renderFooterIcon$1(ele))));
  });
  return footerCont;
};

var renderFooter$1 = function renderFooter(footer) {
  var footerCont = '';

  if (Array.isArray(footer)) {
    footerCont = renderArrayFooter$1(footer);
  } else {
    footerCont = footer;
  }

  return footerCont;
};

var renderMainCont = function renderMainCont(cont) {
  var mainCont = null;

  if (Array.isArray(cont)) {
    mainCont = [];
    cont.forEach(function (ele, cursor) {
      var key = ele.key,
          name = ele.name,
          unit = ele.unit,
          compare = ele.compare;
      mainCont.push(React.createElement("div", {
        className: 'card-main-row',
        key: key || cursor
      }, React.createElement("div", {
        className: 'card-main-row-cont'
      }, React.createElement("div", {
        className: 'card-main-row-cont-title'
      }, React.createElement("span", {
        className: 'card-main-row-cont-title-name'
      }, name)), React.createElement("div", {
        className: 'card-main-row-cont-value'
      }, renderText$1(ele), React.createElement("span", {
        className: 'card-main-row-cont-value-unit'
      }, unit))), React.createElement("div", {
        className: 'card-main-row-footer'
      }, compare && renderFooter$1(compare))));
    });
  } else {
    mainCont = cont;
  }

  return mainCont;
};

var MultiRocketIndicator = function MultiRocketIndicator(_ref) {
  var datasetParams = _ref.datasetParams;
  var _datasetParams$multi = datasetParams.multi,
      multi = _datasetParams$multi === void 0 ? {
    cont: []
  } : _datasetParams$multi;
  var _multi$cont = multi.cont,
      cont = _multi$cont === void 0 ? [] : _multi$cont;
  return React.createElement("div", {
    className: "multi-rocketChart-indicator",
    key: 'rocketChart-indicator'
  }, React.createElement("div", {
    className: 'card-main'
  }, renderMainCont(cont)));
};

var getValue$2 = function getValue(params, formatter, valueKeys) {
  var _data$, _data$2;

  var data = Array.isArray(params) ? params : [params];
  data.sort(function (a, b) {
    return b.value[b.seriesIndex + 1] - a.value[a.seriesIndex + 1];
  });
  var listData = data.map(function (item, index) {
    var componentType = item.componentType,
        dimensionNames = item.dimensionNames,
        _item$data = item.data,
        data = _item$data === void 0 ? {} : _item$data,
        seriesIndex = item.seriesIndex;
    var value = Array.isArray(item.value) ? item.value[seriesIndex + 1] : item.value;
    value = formatter ? formatter(value) : value;

    if (data && valueKeys !== null && valueKeys !== void 0 && valueKeys.length) {
      value = valueKeys.map(function (item) {
        var val = data[item] || '';
        return item === 'value' ? value || val : val;
      });
    } else {
      value = [value];
      item.percent && value.push("(" + item.percent + "%)");
    }

    var name = (data === null || data === void 0 ? void 0 : data.name) || dimensionNames[seriesIndex + 1] || item.name;
    var color = item.color;

    if (componentType === 'markPoint') {
      color = 'orangered';
    } //兼容关系图


    var id = item.data.id;
    var dataType = item.dataType;
    return {
      color: color,
      name: name,
      value: value,
      id: id,
      dataType: dataType
    };
  });
  return {
    title: ((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.name) === listData[0].name ? '' : (_data$2 = data[0]) === null || _data$2 === void 0 ? void 0 : _data$2.name,
    listData: listData
  };
};

var getStyle = function getStyle(mode, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      name = _ref.name,
      value = _ref.value,
      color = _ref.color,
      id = _ref.id,
      dataType = _ref.dataType;

  var key = '';
  var newValue = value.map(function (i) {
    return "<div style=\"display: table-cell; padding-left: 10px\">" + i + "</div>";
  }).join('');

  switch (mode) {
    case 'light':
      key = id ? "<div style=\"color:" + color + "\">" + id + ":</div>" //兼容关系图
      : dataType == 'edge' ? "<div style=\"color:" + color + "\">" + name + "</div>" : "<div style=\"color:" + color + "\">" + name + ":</div>";
      newValue = dataType == 'edge' ? '' : "<div style=\"text-align: right; display: table-row;\">" + newValue + "</div>";
      break;

    default:
      var dot = "<i style=\"display:inline-block; width: 7px; height: 7px; background:" + color + "; border-radius: 7px; vertical-align: 1px; margin-right: 6px\"></i>";
      key = id ? "<div>" + dot + " " + id + ":</div>" //兼容关系图
      : dataType == 'edge' ? "<div>" + dot + " " + name + "</div>" : "<div>" + dot + " " + name + ":</div>";
      newValue = dataType == 'edge' ? '' : "<div style=\"text-align: right; display: table-row;\">" + newValue + "</div>";
  }

  return {
    key: key,
    value: newValue
  };
};
/**
 * 格式化tooltip
 * @param formatter 每项的格式化函数
 */


var formatterFun = function formatterFun(option) {
  var _ref2 = option || {},
      mode = _ref2.mode,
      _ref2$formatter = _ref2.formatter,
      formatter = _ref2$formatter === void 0 ? getFormatter('number') : _ref2$formatter,
      _ref2$valueKeys = _ref2.valueKeys,
      valueKeys = _ref2$valueKeys === void 0 ? [] : _ref2$valueKeys,
      tips = _ref2.tips;

  var tipsDom = tips ? "<p style=\"color: #aaa; margin: 0\">" + tips + "</p>" : '';
  return function (params) {
    var data = getValue$2(params, formatter, valueKeys);
    var keys = '';
    var values = '';
    data.listData.forEach(function (item) {
      var style = getStyle(mode, item);
      keys += style.key;
      values += style.value;
    });
    return "\n          <div>\n            <div style=\"font-size:12px;\">" + data.title + " </div>\n            <div style=\"display:flex; margin: 5px 0;\">\n              <div>" + keys + "</div>\n              <div style=\"display:table; margin-left: 5px\">" + values + "</div>\n            </div>\n            " + tipsDom + "\n          </div>\n      ";
  };
};

var tooltipFormatter = function tooltipFormatter(chartOptions, datasetParams) {
  if (!(datasetParams !== null && datasetParams !== void 0 && datasetParams.$tooltip)) return;
  return {
    tooltip: {
      formatter: formatterFun(datasetParams.$tooltip)
    }
  };
};
var tooltip = {
  tooltipFormatter: tooltipFormatter,
  formatter: formatterFun
};

var css$5 = ".rocket-chart-funnel {\n  padding: 8px;\n  padding-top: 30px;\n  height: 100%;\n  width: 100%;\n  overflow: auto;\n  font-size: 12px;\n  line-height: 1.5; }\n  .rocket-chart-funnel ul {\n    padding: 0;\n    margin: 0; }\n  .rocket-chart-funnel-item {\n    display: table-row-group;\n    width: 100%; }\n    .rocket-chart-funnel-item .funnel-wrapper {\n      width: 100%;\n      display: table-row; }\n      .rocket-chart-funnel-item .funnel-wrapper .funnel-text {\n        display: table-cell;\n        vertical-align: sub;\n        padding: 1px 8px 0 0 !important;\n        font-size: 12px;\n        color: #7f7f7f;\n        text-align: right;\n        vertical-align: top;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        max-width: 200px;\n        line-height: 1.1; }\n        .rocket-chart-funnel-item .funnel-wrapper .funnel-text-sub {\n          font-size: 12px;\n          color: #999;\n          line-height: 1.5;\n          white-space: nowrap; }\n          .rocket-chart-funnel-item .funnel-wrapper .funnel-text-sub .btn-icon {\n            vertical-align: top; }\n      .rocket-chart-funnel-item .funnel-wrapper .funnel-cover-wrap {\n        display: table-cell;\n        width: 100%;\n        position: relative; }\n        .rocket-chart-funnel-item .funnel-wrapper .funnel-cover-wrap:hover .tooltip-content {\n          display: block; }\n        .rocket-chart-funnel-item .funnel-wrapper .funnel-cover-wrap .tooltip-content {\n          position: absolute;\n          display: none;\n          border-style: solid;\n          white-space: nowrap;\n          z-index: 9999999;\n          transition: left 0.4s cubic-bezier(0.23, 1, 0.32, 1) 0s, top 0.4s cubic-bezier(0.23, 1, 0.32, 1) 0s;\n          background-color: rgba(255, 255, 255, 0.95);\n          border-width: 0px;\n          color: #666666;\n          font: 400 12px / 21px 'Lucida Grande', 'Lucida Sans Unicode', Arial, Helvetica, sans-serif;\n          left: 22%;\n          top: 80%;\n          box-shadow: #aeaeae 0px 0px 10px;\n          border-radius: 3px;\n          padding: 10px 12px 8px;\n          pointer-events: none;\n          transform: translate(-50%, 0); }\n        .rocket-chart-funnel-item .funnel-wrapper .funnel-cover-wrap .funnel-cover {\n          justify-self: start;\n          background: #6882ff0d;\n          width: 100%;\n          height: 32px; }\n          .rocket-chart-funnel-item .funnel-wrapper .funnel-cover-wrap .funnel-cover .cover-color {\n            height: 100%; }\n    .rocket-chart-funnel-item .funnel-conversion {\n      padding-left: 100%;\n      width: 35px;\n      margin: 10px 0 12px; }\n      .rocket-chart-funnel-item .funnel-conversion-icon {\n        position: relative;\n        display: inline-block;\n        min-width: 60px;\n        padding: 3px 10px 0px;\n        font-size: 12px;\n        line-height: 1.2;\n        color: #000000a6;\n        text-align: center;\n        background: #f6f7f8;\n        z-index: 0; }\n        .rocket-chart-funnel-item .funnel-conversion-icon:after {\n          content: '';\n          position: absolute;\n          top: 18px;\n          left: 0;\n          background-color: inherit;\n          padding-bottom: 26%;\n          width: 52%;\n          z-index: -1;\n          transform-origin: 0 0;\n          transform: rotate(-15deg) skewX(60deg); }\n    .rocket-chart-funnel-item:first-child .funnel-conversion {\n      display: none; }\n    .rocket-chart-funnel-item:first-child .funnel-placeholder {\n      display: none; }\n  .rocket-chart-funnel .conversion-wrapper {\n    display: table-row-group; }\n    .rocket-chart-funnel .conversion-wrapper .placeholder {\n      display: table-cell; }\n    .rocket-chart-funnel .conversion-wrapper .rocket-chart-funnel-transPercent {\n      display: table-cell;\n      color: rgba(0, 0, 0, 0.85);\n      font-weight: 500;\n      font-size: 16px;\n      padding: 16px 0; }\n";
styleInject(css$5);

var renderPercent$1 = renderNumeralMap.percent;

var FunnelItem = function FunnelItem(props) {
  var hideSymbol = props.hideSymbol,
      color = props.color,
      _props$step = props.step,
      step = _props$step === void 0 ? '-' : _props$step,
      _props$name = props.name,
      name = _props$name === void 0 ? '' : _props$name,
      _props$value = props.value,
      value = _props$value === void 0 ? 0 : _props$value,
      maxValue = props.maxValue,
      lastValue = props.lastValue,
      renderItemInfo = props.renderItemInfo,
      formatter = props.formatter,
      mode = props.mode,
      tipsDom = props.tipsDom,
      showTotalConversion = props.showTotalConversion,
      firstValue = props.firstValue;
  var valFormatted = formatter ? formatter({
    data: {
      value: value
    }
  }) : value; // 转化率

  var basePercent = renderPercent$1((lastValue || value) / maxValue);
  var transPercent = lastValue ? renderPercent$1(value / lastValue) : '100%';
  var valueArray = [valFormatted + '', "(" + transPercent + ")"];
  var keys = '';
  var values = '';
  var a = getStyle(mode, {
    color: color,
    name: name,
    value: valueArray
  });
  keys += a.key;
  values += a.value;
  return React.createElement("li", {
    className: "rocket-chart-funnel-item"
  }, React.createElement("div", {
    className: "funnel-conversion"
  }, step > 1 && React.createElement("span", {
    className: "funnel-conversion-icon"
  }, transPercent)), React.createElement("div", {
    className: "funnel-wrapper"
  }, React.createElement("div", {
    className: "funnel-text",
    style: {
      visibility: hideSymbol ? 'hidden' : 'visible'
    }
  }, React.createElement("span", {
    title: name
  }, name), React.createElement("div", {
    className: "funnel-text-sub"
  }, renderItemInfo && renderItemInfo(name, step), React.createElement("span", {
    style: {
      paddingLeft: 5
    }
  }, valFormatted, showTotalConversion ? "(" + renderPercent$1(value / firstValue) + ")" : []))), React.createElement("div", {
    className: "funnel-cover-wrap"
  }, React.createElement("div", {
    className: "funnel-cover",
    style: {
      width: basePercent
    }
  }, React.createElement("div", {
    className: "cover-color",
    style: {
      background: color,
      width: transPercent
    }
  }), React.createElement("div", {
    className: "tooltip-content",
    dangerouslySetInnerHTML: {
      __html: "\n          <div >\n            <div style=\"display:flex; margin: 5px 0;\">\n              <div>" + keys + "</div>\n              <div style=\"display:table; margin-left: 5px\">" + values + "</div>\n            </div>\n            " + tipsDom + "\n          </div>\n      "
    }
  })))));
};

var FunnelColumn = function FunnelColumn(props) {
  var _option$grid;

  var _props$datasetParams = props.datasetParams,
      datasetParams = _props$datasetParams === void 0 ? {} : _props$datasetParams;
  var _datasetParams$showTo = datasetParams.showTotalConversion,
      showTotalConversion = _datasetParams$showTo === void 0 ? false : _datasetParams$showTo;
  var _props$data = props.data;
  _props$data = _props$data === void 0 ? {} : _props$data;
  var _props$data$source = _props$data.source,
      source = _props$data$source === void 0 ? [[], []] : _props$data$source,
      colors = props.colors,
      hideSymbol = props.hideSymbol,
      _props$datasetParams2 = props.datasetParams;
  _props$datasetParams2 = _props$datasetParams2 === void 0 ? {} : _props$datasetParams2;
  var _props$datasetParams3 = _props$datasetParams2.sort,
      sort = _props$datasetParams3 === void 0 ? 'default' : _props$datasetParams3,
      $tooltip = _props$datasetParams2.$tooltip,
      chartOptions = props.chartOptions,
      _props$option = props.option,
      option = _props$option === void 0 ? {} : _props$option;

  var _ref = $tooltip || {},
      mode = _ref.mode,
      tips = _ref.tips;

  var tipsDom = tips ? "<p style=\"color: #aaa; margin: 0\">" + tips + "</p>" : '';

  var renderItemInfo = function renderItemInfo() {};

  var sortedSource = useMemo(function () {
    // 只要sort不为none都进行排序
    if (sort === 'none') return source;
    var structSource = source[0].map(function (item, index) {
      return {
        item: item,
        value: source[1][index]
      };
    });
    structSource.sort(function (a, b) {
      return b.value - a.value;
    });
    return [structSource.map(function (_ref2) {
      var item = _ref2.item;
      return item;
    }), structSource.map(function (_ref3) {
      var value = _ref3.value;
      return value;
    })];
  }, [source]);
  var totalTrans = useMemo(function () {
    var firstValue = sortedSource[1][0];
    var lastValue = sortedSource[1][sortedSource[1].length - 1];
    return lastValue / firstValue;
  }, [sortedSource]);
  var maxValue = useMemo(function () {
    return Math.max.apply(Math, sortedSource[1]);
  }, [sortedSource]);
  var formatter = useMemo(function () {
    var _chartOptions$series$, _chartOptions$series$2;

    return (chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions.series) && (chartOptions === null || chartOptions === void 0 ? void 0 : (_chartOptions$series$ = chartOptions.series[0]) === null || _chartOptions$series$ === void 0 ? void 0 : (_chartOptions$series$2 = _chartOptions$series$.label) === null || _chartOptions$series$2 === void 0 ? void 0 : _chartOptions$series$2.formatter);
  }, [chartOptions]);
  return React.createElement("div", {
    className: "rocket-chart-funnel",
    style: {
      paddingTop: (option === null || option === void 0 ? void 0 : (_option$grid = option.grid) === null || _option$grid === void 0 ? void 0 : _option$grid.top) || 30
    }
  }, React.createElement("ul", {
    className: "rocket-chart-ul"
  }, sortedSource[0].map(function (name, index) {
    var lastValue = sortedSource[1][index - 1];
    var firstValue = sortedSource[1][0];
    return React.createElement(FunnelItem, {
      firstValue: firstValue,
      showTotalConversion: showTotalConversion,
      length: length,
      tipsDom: tipsDom,
      mode: mode,
      key: name,
      hideSymbol: hideSymbol,
      color: colors[index % colors.length],
      step: index + 1,
      maxValue: maxValue,
      lastValue: lastValue,
      name: name,
      value: sortedSource[1][index],
      renderItemInfo: renderItemInfo,
      formatter: formatter
    });
  }), React.createElement("div", {
    className: "conversion-wrapper"
  }, React.createElement("div", {
    className: "placeholder"
  }), source[0].length ? React.createElement("div", {
    className: "rocket-chart-funnel-transPercent"
  }, "\u603B\u8F6C\u5316\u7387\uFF1A", renderPercent$1(totalTrans)) : React.createElement("h4", null, "\u6682\u65E0\u6570\u636E"))));
};

var css$6 = ".no-data {\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  width: 100%; }\n  .no-data .text {\n    font-size: 22px;\n    color: #999; }\n";
styleInject(css$6);

var defaultText = '暂无数据';

var NoData = function NoData(_ref) {
  var _ref$empty = _ref.empty,
      empty = _ref$empty === void 0 ? defaultText : _ref$empty;
  return React.createElement("div", {
    className: "no-data"
  }, isValidElement(empty) ? empty : React.createElement("label", {
    className: "text"
  }, empty));
};

var config$2 = {
  defaultChartProps: {
    option: {
      table: {
        dataSource: [],
        columns: []
      }
    }
  },
  optionHandler: function optionHandler(chartOptions, datasetParams) {
    if (datasetParams === void 0) {
      datasetParams = {};
    }

    var dataset = chartOptions.dataset;
    var _datasetParams = datasetParams,
        _datasetParams$ingore = _datasetParams.ingoreCols,
        ingoreCols = _datasetParams$ingore === void 0 ? [] : _datasetParams$ingore,
        _datasetParams$column = _datasetParams.columns,
        columnsProps = _datasetParams$column === void 0 ? {} : _datasetParams$column;
    var source = dataset.source;
    var length = dataset.source[0].length;
    var dataSource = [];
    chartOptions.table = {};

    if (length <= 1) {
      return;
    }

    var columns = source.map(function (item) {
      var name = item[0];
      var props = columnsProps[name] || {};
      return {
        title: name,
        name: name,
        code: name,
        key: name,
        align: props.align,
        formatter: props.formatter,
        hidden: ingoreCols.includes(name),
        features: {
          sortable: true
        }
      };
    });

    var _loop = function _loop(i) {
      var data = {};
      columns.forEach(function (item, j) {
        data[item.name] = source[j][i];
        data.key = i;
      });
      dataSource.push(data);
    };

    for (var i = 1; i < length; i++) {
      _loop(i);
    }

    chartOptions.table = {
      columns: columns,
      dataSource: dataSource,
      datasetParams: datasetParams
    };
  }
};

var config$3 = {
  defaultChartProps: {},
  optionHandler: function optionHandler(chartOptions, datasetParams) {
    if (datasetParams === void 0) {
      datasetParams = {};
    }

    chartOptions.table.datasetParams = datasetParams;
  }
};

var tables = {
  'table-basic': config$2,
  'table-cross': config$3
};

var config$4 = {
  defaultChartProps: {},
  optionHandler: function optionHandler(options, datasetParams) {
    if (datasetParams === void 0) {
      datasetParams = {};
    }

    var dataset = options.dataset,
        series = options.series;
    var _datasetParams = datasetParams,
        _datasetParams$mergeS = _datasetParams.mergeStart,
        mergeStart = _datasetParams$mergeS === void 0 ? 6 : _datasetParams$mergeS,
        _datasetParams$mergeT = _datasetParams.mergeText,
        mergeText = _datasetParams$mergeT === void 0 ? '其他' : _datasetParams$mergeT;
    var source = dataset.source.slice(0, mergeStart);
    var part2 = dataset.source.slice(mergeStart);

    if (part2[0]) {
      var sum = new Array(part2[0].length);
      sum.fill(0); //初始化sum

      sum[0] = mergeText;

      for (var i = 0; i < part2.length; i++) {
        for (var j = 1; j < part2[0].length; j++) {
          sum[j] += part2[i][j];
        }
      }

      source.push(sum);
      dataset.source = source;
      options.dataset = {
        source: source
      };
      options.series = series.slice(0, source.length - 1);
    }
  }
};

var config$5 = {
  defaultChartProps: {},
  optionHandler: function optionHandler(_ref) {
    var dataset = _ref.dataset,
        series = _ref.series;
    var source = dataset.source;

    if (dataset.source.length > 2) {
      var sum = new Array(source[0].length).fill(0);
      sum[0] = 'sum';

      for (var i = 1; i < sum.length; i++) {
        var total = 0;

        for (var j = 1; j < source.length; j++) {
          total += +source[j][i];
        }

        sum[i] = total;
      }

      source.push(sum);
      series.push(series[0]);
    }
  }
};

var config$6 = {
  defaultChartProps: {},
  optionHandler: function optionHandler(options) {
    var dataset = options.dataset;
    var labelArray = [];
    var years = {};

    if (dataset.source[0]) {
      dataset.source[0].slice(1).forEach(function (item) {
        var date = new Date(item);
        var texts = [date.getFullYear(), date.getMonth() + 1, date.getDate()];

        if (years[texts[0]]) {
          texts.shift();
        } else {
          years[texts[0]] = true;
        }

        labelArray.push(texts.join('-'));
      });
    }

    var xAxis = {
      axisLabel: {
        formatter: function formatter(v, i) {
          return labelArray[i];
        }
      }
    };
    options.xAxis = xAxis;
    options.dataset = dataset;
  }
};

var config$7 = {
  defaultChartProps: {},
  optionHandler: function optionHandler(options, datasetParams) {
    if (datasetParams === void 0) {
      datasetParams = {};
    }

    var _datasetParams = datasetParams,
        datazoomX = _datasetParams.datazoomX,
        datazoomY = _datasetParams.datazoomY;
    var grid = {};
    var legend = {};
    var dataZoom = [{
      orient: 'horizontal',
      xAxisIndex: [0],
      bottom: 5,
      show: true
    }, {
      orient: 'vertical',
      yAxisIndex: [0],
      top: 18,
      show: true
    }];

    if (datazoomX) {
      grid.bottom = 60;
      legend.bottom = 35;
    }

    if (datazoomY) {
      grid.right = 50;
    }

    if (chartInReverse(options.xAxis, options.yAxis)) {
      datazoomX = datazoomX === undefined ? false : datazoomX;
    } else {
      datazoomY = datazoomY === undefined ? false : datazoomY;
    }

    dataZoom[0].show = datazoomX;
    dataZoom[1].show = datazoomY;
    merge$2(options, {
      grid: grid,
      legend: legend,
      dataZoom: dataZoom
    });
  }
};

var config$8 = {
  defaultChartProps: {},
  optionHandler: function optionHandler(_ref) {
    var series = _ref.series;
    series.forEach(function (item) {
      merge$2(item, {
        showSymbol: false,
        label: {
          show: false
        }
      });
    });
  }
};

var localFormatter = function localFormatter(renderLabel, maxValue) {
  if (!renderLabel) return;
  var _renderLabel$type = renderLabel.type,
      type = _renderLabel$type === void 0 ? 'number' : _renderLabel$type,
      _renderLabel$prefix = renderLabel.prefix,
      prefix = _renderLabel$prefix === void 0 ? '' : _renderLabel$prefix,
      _renderLabel$suffix = renderLabel.suffix,
      suffix = _renderLabel$suffix === void 0 ? '' : _renderLabel$suffix,
      formatter = renderLabel.formatter;
  var func = getFormatter(type);
  if (!func && !prefix && !suffix && !formatter) return;

  var formatValue = function formatValue(value) {
    return prefix + (func ? func(value, {
      maxValue: maxValue
    }) : value) + suffix;
  };

  return typeof formatter === 'function' ? function (value, index) {
    return formatter(value, formatValue(value), index);
  } : function (value, index) {
    return formatValue(value);
  };
};
/**
 * 数值轴的格式化
 * @param formatter 每项的格式化函数
 */


var formatAxis = function formatAxis(_formatter) {
  return {
    axisLabel: {
      formatter: function formatter(value, index) {
        return _formatter(value);
      }
    }
  };
};
/**
 * 系列label格式化
 * @param formatter 每项的格式化函数
 */


var formatDataLabel = function formatDataLabel(formatter) {
  return function (params) {
    var _params$seriesIndex = params.seriesIndex,
        seriesIndex = _params$seriesIndex === void 0 ? -1 : _params$seriesIndex,
        value = params.value;
    return formatter(value[seriesIndex + 1]);
  };
};
var getConfig = function getConfig(config, showAxis, maxValue) {
  if (config === void 0) {
    config = {};
  }

  if (showAxis === void 0) {
    showAxis = true;
  }

  var _config = config,
      _config$scope = _config.scope,
      scope = _config$scope === void 0 ? '' : _config$scope,
      _config$type = _config.type,
      type = _config$type === void 0 ? 'number' : _config$type; // 默认abbr，等同于axis

  var newScope = scope === '' && type === 'abbr' ? 'axis' : scope;
  var formatter = localFormatter(config, maxValue);
  var fun = {};

  if (['all', ''].includes(newScope)) {
    fun = {
      axis: formatter,
      tooltip: formatter,
      series: formatter
    };
  } else {
    var _fun;

    var numberF = type === 'number' ? formatter : localFormatter(_extends_1({}, config, {
      type: 'number'
    }));
    fun = (_fun = {
      axis: numberF,
      tooltip: numberF,
      series: numberF
    }, _fun[newScope] = formatter, _fun);
  }

  return {
    $tooltip: {
      formatter: fun.tooltip
    },
    axis: showAxis ? formatAxis(fun.axis) : {},
    series: formatDataLabel(fun.series),
    formatter: fun
  };
};
/**
 * 双轴图不支持tooltips格式化
 */

var labelFormat = (function (chartOptions, datasetParams, data, isDoubleY) {
  var _ref = data || {},
      target = _ref.target,
      source = _ref.source;

  var _ref2 = datasetParams || {},
      _ref2$$renderLabel = _ref2.$renderLabel,
      $renderLabel = _ref2$$renderLabel === void 0 ? {
    type: 'number'
  } : _ref2$$renderLabel;

  if (!target || !$renderLabel) return {};
  var xAxis = chartOptions.xAxis,
      yAxis = chartOptions.yAxis,
      series = chartOptions.series;
  var valueAxisName = chartInReverse(xAxis, yAxis) ? 'xAxis' : 'yAxis';
  var axisOption = chartOptions[valueAxisName] || {};

  var getLabelConfig = function getLabelConfig(config, sliceStart, sliceEnd) {
    if (config === void 0) {
      config = {};
    }

    var _config2 = config,
        type = _config2.type;
    var maxValue = undefined;

    if (type === 'abbr') {
      maxValue = getExtremum.axisMax(chartOptions);
    }

    return getConfig(config, axisOption.show, maxValue);
  };

  var labelConfig = $renderLabel;

  if (Array.isArray($renderLabel) && (!isDoubleY || $renderLabel.length === 1)) {
    labelConfig = $renderLabel[0];
  } // 双轴图


  if (isDoubleY) {
    var _config3;

    var config0 = getLabelConfig(labelConfig[0] || labelConfig);
    var config1 = getLabelConfig(labelConfig[1] || labelConfig);
    return {
      $tooltip: config0 === null || config0 === void 0 ? void 0 : config0.$tooltip,
      config: (_config3 = {}, _config3[valueAxisName] = [config0 === null || config0 === void 0 ? void 0 : config0.axis, config1 === null || config1 === void 0 ? void 0 : config1.axis], _config3)
    };
  } else {
    var _config4;

    var config = getLabelConfig(labelConfig);
    if (!config) return {};
    series === null || series === void 0 ? void 0 : series.forEach(function (item) {
      item.label = _extends_1({
        formatter: config.series
      }, item.label);
    });
    return {
      $tooltip: config.$tooltip,
      config: (_config4 = {}, _config4[valueAxisName] = config.axis, _config4)
    };
  }
});

var barReverseLabelLeft = function barReverseLabelLeft(xAxis, yAxis, seriesItem, position) {
  if (chartInReverse(xAxis, yAxis) && seriesItem.type === 'bar' && seriesItem.label && seriesItem.label.show) {
    seriesItem.label = _extends_1({}, seriesItem.label, {}, !position ? {
      position: 'insideLeft',
      offset: [5, 0]
    } : {
      position: position
    });
  }

  return seriesItem;
};

var config$9 = {
  defaultChartProps: {},
  optionHandler: function optionHandler(options, datasetParams) {
    if (datasetParams === void 0) {
      datasetParams = {};
    }

    var dataset = options.dataset,
        series = options.series,
        xAxis = options.xAxis,
        yAxis = options.yAxis;
    var _datasetParams = datasetParams,
        _datasetParams$showAl = _datasetParams.showAllLabel,
        showAllLabel = _datasetParams$showAl === void 0 ? false : _datasetParams$showAl,
        _datasetParams$showLa = _datasetParams.showLabel,
        showLabel = _datasetParams$showLa === void 0 ? true : _datasetParams$showLa,
        _datasetParams$showPe = _datasetParams.showPercentage,
        showPercentage = _datasetParams$showPe === void 0 ? false : _datasetParams$showPe,
        position = _datasetParams.position,
        $renderLabel = _datasetParams.$renderLabel;
    var length = dataset.source[0].length - 1;
    var gap = ~~(length / 4); // 加个标志

    options.showLabel = true;

    var _getConfig = getConfig($renderLabel),
        labelFormat = _getConfig.series,
        valueFormat = _getConfig.formatter.series;

    var calPercentage = function calPercentage(seriesIndex, value) {
      var valueArray = dataset.source[seriesIndex + 1];

      var valueSum = function valueSum(valueArray) {
        var sum = 0;

        for (var i = valueArray.length - 1; i >= 1; i--) {
          sum += valueArray[i];
        }

        return sum;
      };

      var sum = valueSum(valueArray);
      var percentage = (value[seriesIndex + 1] / sum * 100).toFixed(2) + '%';
      return percentage;
    };

    series.forEach(function (item, i) {
      item.label = {
        show: showLabel
      }; // bar 横向 label 显示居左

      item = barReverseLabelLeft(xAxis, yAxis, item, position);

      if (item.type === 'line') {
        item.showAllSymbol = true;

        if (showAllLabel || !showAllLabel && length < 5) {
          item.label.formatter = labelFormat;
        } else {
          item.label.formatter = function (params) {
            var seriesIndex = params.seriesIndex,
                dataIndex = params.dataIndex,
                value = params.value;
            var isShow = length === dataIndex + 1 || [0, 1, 2, 3].includes(dataIndex / gap);
            var val = valueFormat ? valueFormat(value[seriesIndex + 1]) : value[seriesIndex + 1];
            return isShow ? val : ' ';
          };
        }
      } else if (item.type === 'bar') {
        if (showPercentage) {
          item.label.formatter = function (params) {
            var seriesIndex = params.seriesIndex,
                value = params.value;
            var percentage = calPercentage(seriesIndex, value);
            return valueFormat(value[seriesIndex + 1]) + ("  (" + percentage + ")");
          };
        } else {
          item.label.formatter = labelFormat;
        }
      }
    });
  }
};

var config$a = {
  defaultChartProps: {},
  optionHandler: function optionHandler(_ref, _temp) {
    var series = _ref.series;

    var _ref2 = _temp === void 0 ? {} : _temp,
        _ref2$$renderLabel = _ref2.$renderLabel,
        $renderLabel = _ref2$$renderLabel === void 0 ? {} : _ref2$$renderLabel;

    var _getConfig = getConfig($renderLabel),
        valueFormat = _getConfig.formatter.series;

    series.forEach(function (item) {
      merge$2(item, {
        showSymbol: false,
        label: {
          show: false
        },
        markPoint: {
          symbol: 'pin',
          symbolSize: 20,
          itemStyle: {
            color: 'transparent'
          },
          label: {
            color: 'orangered',
            formatter: function formatter(params) {
              return ['line', 'bar'].includes(item.type || '') ? valueFormat(params.value) : params.value;
            }
          },
          data: [{
            type: 'max',
            name: '最大值'
          }]
        }
      });
    });
  }
};

var config$b = {
  defaultChartProps: {
    option: {
      yAxis: {
        axisLabel: {
          showMaxLabel: true,
          showMinLabel: true
        }
      }
    }
  },
  optionHandler: function optionHandler(options, datasetParams) {
    if (datasetParams === void 0) {
      datasetParams = {};
    }

    var _datasetParams = datasetParams,
        _datasetParams$revers = _datasetParams.reverseData,
        reverseData = _datasetParams$revers === void 0 ? true : _datasetParams$revers;
    var dataset = options.dataset;

    if (reverseData) {
      dataset.source = dataset.source.map(function (item) {
        var name = item[0],
            value = item.slice(1);
        return [name].concat(value.reverse());
      });
    }

    merge$2(options, {
      xAxis: {
        type: 'value'
      },
      yAxis: {
        type: 'category'
      }
    });
  }
};

var config$c = {
  defaultChartProps: {
    option: {}
  },
  optionHandler: function optionHandler(option) {
    var yAxis = option.yAxis;

    if (Array.isArray(yAxis)) {
      yAxis.forEach(function (item) {
        item.scale = true;
      });
    } else {
      merge$2(option, {
        yAxis: {
          scale: true
        }
      });
    }
  }
};

var common$1 = {
  autoOther: config$4,
  autoSum: config$5,
  calendar: config$6,
  dataZoom: config$7,
  hideSymbol: config$8,
  label: config$9,
  maxTag: config$a,
  reverse: config$b,
  autoYAxis: config$c
};

var config$d = {
  defaultChartProps: {
    option: {}
  },
  optionHandler: function optionHandler(options) {
    var dataset = options.dataset;
    var length = dataset.source.length - 1;
    options.series = new Array(length).fill({}).map(function (item, i) {
      return {
        type: 'line'
      };
    });
  }
};

var config$e = {
  defaultChartProps: {},
  optionHandler: function optionHandler(_ref, datasetParams) {
    var series = _ref.series;

    if (datasetParams === void 0) {
      datasetParams = {};
    }

    var _datasetParams = datasetParams,
        _datasetParams$type = _datasetParams.type,
        type = _datasetParams$type === void 0 ? 'average' : _datasetParams$type,
        _datasetParams$name = _datasetParams.name,
        name = _datasetParams$name === void 0 ? '平均值' : _datasetParams$name;
    series.forEach(function (item) {
      merge$2(item, {
        markLine: {
          data: [{
            type: type,
            name: name
          }]
        }
      });
    });
  }
};

var defaultParams = {
  maxGap: 10,
  maxLineNum: 1
};

var minGapFunc = function minGapFunc(targetArray, maxGap) {
  return targetArray.map(function (item, i) {
    if (i > 0) {
      return item[0] - targetArray[i - 1][0];
    }

    return maxGap;
  }).sort(function (a, b) {
    return a - b;
  })[0];
};

var config$f = {
  defaultChartProps: {},
  optionHandler: function optionHandler(options, datasetParams) {
    var dataset = options.dataset,
        series = options.series;
    var source = dataset.source;

    var _defaultParams$datase = _extends_1({}, defaultParams, {}, datasetParams),
        maxGap = _defaultParams$datase.maxGap,
        maxLineNum = _defaultParams$datase.maxLineNum,
        _defaultParams$datase2 = _defaultParams$datase.$renderLabel,
        $renderLabel = _defaultParams$datase2 === void 0 ? {} : _defaultParams$datase2;

    var lineLabelObj = {};
    var lineArr = source.slice(1, maxLineNum + 1).map(function (item) {
      return item.slice(1);
    });

    var _getConfig = getConfig($renderLabel),
        valueFormat = _getConfig.formatter.series;

    lineArr.forEach(function (targetLine, targetIndex) {
      // 1. 标记所有峰和谷
      var peak_on = []; // 峰

      var peak_off = []; // 谷

      var peak = []; // 峰+谷

      for (var i = 1; i < targetLine.length - 1; i++) {
        if (targetLine[i] > targetLine[i - 1] && targetLine[i] > targetLine[i + 1]) {
          peak_on.push([i, targetLine[i], 'on_peak']);
          peak.push([i, targetLine[i], 'on_peak']);
        }

        if (targetLine[i] < targetLine[i - 1] && targetLine[i] < targetLine[i + 1]) {
          peak_off.push([i, targetLine[i], 'off_peak']);
          peak.push([i, targetLine[i], 'off_peak']);
        }
      }

      var peakOnMinGap = minGapFunc(peak_on, maxGap);
      var peakOffMinGap = minGapFunc(peak_off, maxGap);
      var _merge = [];
      var _afterMerge = peak; // 2. 若相邻两个峰或谷的距离小于 maxGap，则取两者中的极值，直至所有相邻的峰或谷距离都大于 maxGap

      while (peakOnMinGap < maxGap) {
        _merge = [];

        for (var _i = 0; _i <= peak_on.length - 2; _i++) {
          if (peak_on[_i + 1][0] - peak_on[_i][0] < maxGap) {
            _merge.push(peak_on[_i + 1][1] > peak_on[_i][1] ? peak_on[_i] : peak_on[_i + 1]);
          }
        }

        _afterMerge = differenceWith(_afterMerge, _merge, isEqual);
        peak_on = differenceWith(peak_on, _merge, isEqual);
        peakOnMinGap = minGapFunc(peak_on, maxGap);
      }

      while (peakOffMinGap < maxGap) {
        _merge = [];

        for (var _i2 = 0; _i2 <= peak_off.length - 2; _i2++) {
          if (peak_off[_i2 + 1][0] - peak_off[_i2][0] < maxGap) {
            _merge.push(peak_off[_i2 + 1][1] > peak_off[_i2][1] ? peak_off[_i2 + 1] : peak_off[_i2]);
          }
        }

        _afterMerge = differenceWith(_afterMerge, _merge, isEqual);
        peak_off = differenceWith(peak_off, _merge, isEqual);
        peakOffMinGap = minGapFunc(peak_off, maxGap);
      } // 3. 去除类型冲突的项，如连续两个峰


      var _uniq = [];

      if (_afterMerge.length) {
        var _tmp = [_afterMerge[0]];
        var currentTag = _afterMerge[0][2];

        for (var _i3 = 1; _i3 < _afterMerge.length; _i3++) {
          if (_afterMerge[_i3][2] === currentTag) {
            _tmp.push(_afterMerge[_i3]);
          } else {
            _uniq.push(_tmp);

            _tmp = [_afterMerge[_i3]];
            currentTag = _afterMerge[_i3][2];
          }
        }

        _uniq.push(_tmp);
      }

      var _afterUniq = [];

      for (var _i4 = 0; _i4 < _uniq.length; _i4++) {
        if (_uniq[_i4].length > 1) {
          var type = _uniq[_i4][0][2];

          if (type === 'on_peak') {
            var max = _uniq[_i4].sort(function (a, b) {
              return b[1] - a[1];
            })[0];

            _afterUniq.push(max);
          }

          if (type === 'off_peak') {
            var min = _uniq[_i4].sort(function (a, b) {
              return a[1] - b[1];
            })[0];

            _afterUniq.push(min);
          }
        } else {
          _afterUniq.push(_uniq[_i4][0]);
        }
      } // 4. 过滤：当前的峰比下一个谷还要低
      // 4. 过滤：当前的谷比下一个峰还要高


      var filterArr = [];

      _afterUniq.forEach(function (item, i) {
        var type = item[2];

        if (type === 'on_peak' && i < _afterUniq.length - 1) {
          if (item[1] < _afterUniq[i + 1][1]) {
            filterArr.push(item, _afterUniq[i + 1]);
          }
        }

        if (type === 'off_peak' && i < _afterUniq.length - 1) {
          if (item[1] > _afterUniq[i + 1][1]) {
            filterArr.push(item, _afterUniq[i + 1]);
          }
        }
      });

      _afterUniq = differenceWith(_afterUniq, filterArr, isEqual);

      var allPeakOn = _afterUniq.filter(function (item) {
        return item[2] === 'on_peak';
      }).map(function (item) {
        return item[0];
      });

      lineLabelObj["line" + targetIndex + "_on"] = targetLine.map(function (item, index) {
        return allPeakOn.indexOf(index) >= 0 ? 1 : 0;
      });

      var allPeakOff = _afterUniq.filter(function (item) {
        return item[2] === 'off_peak';
      }).map(function (item) {
        return item[0];
      });

      lineLabelObj["line" + targetIndex + "_off"] = targetLine.map(function (item, index) {
        return allPeakOff.indexOf(index) >= 0 ? 1 : 0;
      });
    });
    series.forEach(function (item, i) {
      merge$2(item, {
        showAllSymbol: true,
        label: {
          show: true,
          position: 'inside',
          formatter: function formatter(params) {
            var result = '';
            var val = valueFormat ? valueFormat(params.value[i + 1]) : params.value[i + 1];

            if (i < maxLineNum && lineLabelObj["line" + i + "_on"][params.dataIndex]) {
              result = val + '\r\n\r\n';
            }

            if (i < maxLineNum && lineLabelObj["line" + i + "_off"][params.dataIndex]) {
              result = '\r\n\r\n' + val;
            }

            return result;
          },
          color: 'auto'
        }
      });
    });
  }
};

var config$g = {
  defaultChartProps: {},
  optionHandler: function optionHandler(options, datasetParams) {
    if (datasetParams === void 0) {
      datasetParams = {};
    }

    var series = options.series,
        dataset = options.dataset;

    if (!series.length) {
      return;
    } // regressionFormula 显示多项式公式
    // regressionOrder 多项式的阶数


    var _datasetParams = datasetParams,
        _datasetParams$regres = _datasetParams.regressionFormula,
        regressionFormula = _datasetParams$regres === void 0 ? false : _datasetParams$regres,
        _datasetParams$regres2 = _datasetParams.regressionOrder,
        regressionOrder = _datasetParams$regres2 === void 0 ? 2 : _datasetParams$regres2; // 列数据

    var nameList = dataset.source[0].slice(1); // 多项式数据

    var data = []; // 计算平均值

    for (var i = 1; i < dataset.source[0].length; i++) {
      var value = 0;

      for (var j = 1; j < dataset.source.length; j++) {
        value = value + dataset.source[j][i];
      }

      data.push([i, value / series.length]);
    }

    var regression = ecStat.regression('polynomial', data, parseInt(regressionOrder)); // regression.points 绘制折线图的拟合数据点

    regression.points.sort(function (a, b) {
      return a[0] - b[0];
    });
    regression.points = regression.points.map(function (item, i) {
      return [nameList[i], item[1]];
    });
    var seriesData = regression.points.map(function (item) {
      return +item[1].toFixed(2);
    }); // series 加工

    var regressionSeries = {
      type: 'line',
      showSymbol: false,
      smooth: true,
      color: 'rgb(140, 140, 140)',
      lineStyle: {
        type: 'dashed'
      },
      markPoint: {
        // 不响应点击
        silent: true,
        itemStyle: {
          normal: {
            color: 'transparent'
          }
        },
        label: {
          normal: {
            show: regressionFormula,
            position: 'left',
            formatter: regression.expression,
            textStyle: {
              color: 'rgb(140, 140, 140)',
              fontSize: 14
            }
          }
        },
        data: [{
          coord: regression.points[regression.points.length - 1]
        }]
      }
    }; // 多项式曲线数据

    dataset.source.push(['趋势线'].concat(seriesData));
    series.push(regressionSeries); // chartOptions 添加公式
  }
};

var config$h = {
  defaultChartProps: {},
  optionHandler: function optionHandler(_ref) {
    var series = _ref.series;
    series.forEach(function (item) {
      item.smooth = true;
    });
  }
};

var colorOpacity = function colorOpacity(defaultColor, opacity) {
  if (opacity === void 0) {
    opacity = 0;
  }

  var rgbRegex = /^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/;
  var rgbaRegex = /^rgba?\(((25[0-5]|2[0-4]\d|1\d{1,2}|\d\d?)\s*,\s*?){2}(25[0-5]|2[0-4]\d|1\d{1,2}|\d\d?)\s*,?\s*([01]\.?\d*?)?\)$/;
  var hexRegex = /^#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})$/;

  var rgbaToRgb = function rgbaToRgb(color) {
    var rgbaAttr = color.match(/[\d.]+/g);

    if (rgbaAttr.length >= 3) {
      var r, g, b;
      r = rgbaAttr[0];
      g = rgbaAttr[1];
      b = rgbaAttr[2];
      return 'rgb(' + r + ',' + g + ',' + b + ')';
    }

    return '';
  };

  var rgbToRgba = function rgbToRgba(color, opacity) {
    var rgbaAttr = color.match(/[\d.]+/g);

    if (rgbaAttr.length >= 3) {
      var r, g, b;
      r = rgbaAttr[0];
      g = rgbaAttr[1];
      b = rgbaAttr[2];
      return 'rgba(' + r + ',' + g + ',' + b + ',' + opacity + ')';
    }
  };
  /* 十六进制颜色值转为带透明度的颜色
   * @param _color 十六进制颜色
   * @param _opacity 透明度
   * @returns {string} rgba
   */


  var hexToRgba = function hexToRgba(color, opacity) {
    var sColor = color.toLowerCase(); //十六进制颜色值的正则表达式

    var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/; // 如果是16进制颜色

    if (sColor && reg.test(sColor)) {
      if (sColor.length === 4) {
        var sColorNew = '#';

        for (var i = 1; i < 4; i += 1) {
          sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));
        }

        sColor = sColorNew;
      } //处理六位的颜色值


      var sColorChange = [];

      for (var i = 1; i < 7; i += 2) {
        sColorChange.push(parseInt('0x' + sColor.slice(i, i + 2)));
      }

      return 'rgba(' + sColorChange.join(',') + ',' + opacity + ')';
    }

    return sColor;
  };

  var rgba;

  if (rgbRegex.test(defaultColor)) {
    rgba = rgbToRgba(defaultColor, opacity);
  } else if (rgbaRegex.test(defaultColor)) {
    var a = rgbaToRgb(defaultColor);
    rgba = rgbToRgba(a, opacity);
  } else if (hexRegex.test(defaultColor)) {
    rgba = hexToRgba(defaultColor, opacity);
  }

  return rgba;
};

var config$i = {
  defaultChartProps: {
    option: {}
  },
  optionHandler: function optionHandler(_ref, datasetParams, _temp) {
    var series = _ref.series;

    if (datasetParams === void 0) {
      datasetParams = {};
    }

    var _ref2 = _temp === void 0 ? {} : _temp,
        themeConfig = _ref2.themeConfig;

    var _datasetParams = datasetParams,
        _datasetParams$gradua = _datasetParams.gradualColors,
        gradualColors = _datasetParams$gradua === void 0 ? false : _datasetParams$gradua;
    var color = themeConfig === null || themeConfig === void 0 ? void 0 : themeConfig.color;
    series.forEach(function (item, i) {
      var gradual = gradualColors ? {
        color: {
          type: 'linear',
          x: 0,
          y: 1,
          x2: 0,
          y2: 0,
          colorStops: [{
            offset: 0,
            color: "" + colorOpacity(color[i], 0.1)
          }, {
            offset: 1,
            color: "" + color[i]
          }]
        }
      } : {};
      merge$2(item, {
        areaStyle: _extends_1({
          opacity: 0.25
        }, gradual)
      });
    });
  }
};

var config$j = {
  defaultChartProps: {
    option: {}
  },
  optionHandler: function optionHandler(_ref, datasetParams, _temp) {
    var series = _ref.series;

    if (datasetParams === void 0) {
      datasetParams = {};
    }

    var _ref2 = _temp === void 0 ? {} : _temp,
        themeConfig = _ref2.themeConfig;

    var _datasetParams = datasetParams,
        _datasetParams$gradua = _datasetParams.gradualColors,
        gradualColors = _datasetParams$gradua === void 0 ? false : _datasetParams$gradua;
    var color = themeConfig === null || themeConfig === void 0 ? void 0 : themeConfig.color;
    series.forEach(function (item, i) {
      var gradual = gradualColors ? {
        color: {
          type: 'linear',
          x: 0,
          y: 1,
          x2: 0,
          y2: 0,
          colorStops: [{
            offset: 0,
            color: "" + colorOpacity(color[i], 0.1)
          }, {
            offset: 1,
            color: "" + color[i]
          }]
        }
      } : {};
      merge$2(item, {
        stack: '总量',
        areaStyle: _extends_1({
          opacity: 0.25
        }, gradual)
      });
    });
  }
};

var Kind = ['min', 'max', 'average', 'median']; // 计算value的取值

var findMinOrMax = function findMinOrMax(value, min, max) {
  if (typeof value === 'number') return value;

  if (typeof value === 'string') {
    var isMin = value === 'min';
    var isMax = value === 'max';
    if (isMin) return min;
    if (isMax) return max;
  }
}; // pieces结构拼装


var assignArr = function assignArr(arr) {
  var map = {},
      result = [];

  for (var i = 0; i < arr.length; i++) {
    var obj = arr[i];

    if (!map[obj.gte + '-' + obj.lte]) {
      map[obj.gte + '-' + obj.lte] = obj;
      result.push(obj);
    }
  }

  return result;
};

var createVisual1 = function createVisual1(_ref) {
  var num1 = _ref.num1,
      num2 = _ref.num2,
      lineColor = _ref.lineColor,
      isMiddleNum = _ref.isMiddleNum,
      isFirstNum = _ref.isFirstNum,
      isLastNum = _ref.isLastNum,
      prevNum2 = _ref.prevNum2,
      nextNum1 = _ref.nextNum1,
      min = _ref.min,
      max = _ref.max;
  var params = [];
  params.push({
    gte: num1,
    lte: num2,
    color: lineColor
  });

  if (isMiddleNum) {
    prevNum2 && params.push({
      gte: prevNum2,
      lte: num1
    });
    nextNum1 && params.push({
      gte: num2,
      lte: nextNum1
    });
  } else if (isFirstNum && num1 > min) {
    params.push({
      gte: min,
      lte: num1
    });
    nextNum1 && params.push({
      gte: num2,
      lte: nextNum1
    });
  }

  if (isLastNum && num2 < max) {
    params.push({
      gte: num2,
      lte: max
    });
  }

  return params;
};

var createVisual2 = function createVisual2(_ref2) {
  var num1 = _ref2.num1,
      lineColor = _ref2.lineColor,
      isMiddleNum = _ref2.isMiddleNum,
      prevNum1 = _ref2.prevNum1,
      prevNum2 = _ref2.prevNum2,
      nextNum1 = _ref2.nextNum1,
      nextNum2 = _ref2.nextNum2,
      min = _ref2.min,
      max = _ref2.max;
  var params = [];

  if (isMiddleNum) {
    nextNum1 && params.push({
      gte: num1,
      lte: nextNum1,
      color: lineColor
    });
    prevNum2 && params.push({
      gte: prevNum2,
      lte: num1
    });
  } else if (num1 < max) {
    params.push({
      gte: num1,
      lte: nextNum1 || nextNum2 || max,
      color: lineColor
    });
    params.push({
      gte: prevNum2 || prevNum1 || min,
      lte: num1
    });
  }

  return params;
};

var createVisual3 = function createVisual3(_ref3) {
  var num2 = _ref3.num2,
      lineColor = _ref3.lineColor,
      isMiddleNum = _ref3.isMiddleNum,
      prevNum1 = _ref3.prevNum1,
      prevNum2 = _ref3.prevNum2,
      nextNum1 = _ref3.nextNum1,
      nextNum2 = _ref3.nextNum2,
      min = _ref3.min,
      max = _ref3.max;
  var params = [];

  if (isMiddleNum) {
    prevNum2 && params.push({
      gte: prevNum2,
      lte: num2,
      color: lineColor
    });
    nextNum1 && params.push({
      gte: num2,
      lte: nextNum1
    });
  } else if (num2 > min) {
    params.push({
      gte: prevNum2 || prevNum1 || min,
      lte: num2,
      color: lineColor
    });
    params.push({
      gte: num2,
      lte: nextNum1 || nextNum2 || max
    });
  }

  return params;
};

var createVisualGroup = function createVisualGroup(_ref4) {
  var visuals = _ref4.visuals,
      lineColor = _ref4.lineColor,
      color = _ref4.color,
      _ref4$seriesIndex = _ref4.seriesIndex,
      seriesIndex = _ref4$seriesIndex === void 0 ? 0 : _ref4$seriesIndex,
      dataset = _ref4.dataset;
  var arr = getExtremum.series(dataset);
  var _arr$seriesIndex = arr[seriesIndex],
      min = _arr$seriesIndex[0],
      max = _arr$seriesIndex[1];
  var visualsMap = []; // 对visuals做从小到大的排序

  visuals.forEach(function (item, cursor) {
    var _item$ = item[0],
        value1 = _item$ === void 0 ? Infinity : _item$,
        _item$2 = item[1],
        value2 = _item$2 === void 0 ? Infinity : _item$2;
    var v1 = findMinOrMax(value1, min, max);
    var v2 = findMinOrMax(value2, min, max);
    var minValue = v1 > v2 ? v2 : v1;
    visualsMap[cursor] = minValue;
  });
  var sortOrder = Object.keys(visualsMap).sort(function (a, b) {
    return visualsMap[a] - visualsMap[b];
  });
  var newVisuals = [];

  for (var _iterator = sortOrder, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
    var _ref5;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref5 = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref5 = _i.value;
    }

    var order = _ref5;
    newVisuals.push(visuals[order]);
  } // 连接断续数字


  var len = newVisuals.length;
  if (!len) return [];
  var data = newVisuals.map(function (item, cursor) {
    var num1 = item[0],
        num2 = item[1];
    var params = []; // 取区间值

    var isMiddleNum = cursor !== 0 && cursor !== len - 1;
    var isFirstNum = cursor === 0;
    var isLastNum = cursor === len - 1;
    var prevNum = newVisuals[cursor - 1];
    var nextNum = newVisuals[cursor + 1];
    var prevNum1 = prevNum ? prevNum[0] : null;
    var prevNum2 = prevNum ? prevNum[1] : null;
    var nextNum1 = nextNum ? nextNum[0] : null;
    var nextNum2 = nextNum ? nextNum[1] : null;
    var commonParams = {
      lineColor: lineColor,
      isMiddleNum: isMiddleNum,
      isLastNum: isLastNum,
      prevNum2: prevNum2,
      nextNum1: nextNum1,
      min: min,
      max: max,
      color: color
    };

    if (num1 && num2) {
      // 取区间
      params = params.concat(createVisual1(_extends_1({}, commonParams, {
        num1: num1,
        num2: num2,
        isFirstNum: isFirstNum
      })));
    } else if (num1) {
      // 取大于
      params = params.concat(createVisual2(_extends_1({}, commonParams, {
        num1: num1,
        prevNum1: prevNum1,
        nextNum2: nextNum2
      })));
    } else if (num2) {
      // 取小于
      params = params.concat(createVisual3(_extends_1({}, commonParams, {
        num2: num2,
        prevNum1: prevNum1,
        nextNum2: nextNum2
      })));
    }

    return params.flat(1);
  });
  var pieces = assignArr(data.flat(1));
  return [{
    seriesIndex: seriesIndex || 0,
    show: false,
    dimension: 1,
    inRange: {
      color: color[seriesIndex]
    },
    pieces: pieces
  }];
}; // 创建标记线


var createMarkLineGroup = function createMarkLineGroup(_ref6) {
  var pieces = _ref6.pieces,
      markLineColor = _ref6.markLineColor,
      show = _ref6.show,
      position = _ref6.position;
  if (!show) return {};

  var addParams = function addParams(value, name) {
    var params = {
      lineStyle: {
        color: markLineColor
      },
      label: {
        position: position
      }
    };
    var inKind = typeof value === 'string' && Kind.includes(value);
    inKind && (params.type = value);
    typeof value === 'number' && (params.yAxis = value);
    params.label.formatter = name || '';
    return params;
  };

  var data = pieces.map(function (piece) {
    var _piece$value = piece.value,
        value = _piece$value === void 0 ? 'min' : _piece$value,
        _piece$name = piece.name,
        name = _piece$name === void 0 ? value : _piece$name;
    return addParams(value, name);
  });
  return {
    symbol: 'none',
    data: data.flat(1)
  };
};

var config$k = {
  defaultChartProps: {},
  optionHandler: function optionHandler(options, datasetParams, config) {
    if (datasetParams === void 0) {
      datasetParams = {};
    }

    var series = options.series,
        dataset = options.dataset;

    if (!series || !series.length) {
      throw new Error('series未定义或者series长度小于1');
    } // 默认的颜色


    var color = config.themeConfig.color;
    var _datasetParams = datasetParams,
        _datasetParams$show = _datasetParams.show,
        show = _datasetParams$show === void 0 ? true : _datasetParams$show,
        _datasetParams$positi = _datasetParams.position,
        position = _datasetParams$positi === void 0 ? 'insideStartTop' : _datasetParams$positi,
        _datasetParams$visual = _datasetParams.visuals,
        visuals = _datasetParams$visual === void 0 ? [] : _datasetParams$visual,
        _datasetParams$pieces = _datasetParams.pieces,
        pieces = _datasetParams$pieces === void 0 ? [] : _datasetParams$pieces,
        _datasetParams$visual2 = _datasetParams.visualColor,
        visualColor = _datasetParams$visual2 === void 0 ? 'red' : _datasetParams$visual2,
        _datasetParams$markLi = _datasetParams.markLineColor,
        markLineColor = _datasetParams$markLi === void 0 ? '#666' : _datasetParams$markLi;
    merge$2(series[0], {
      markLine: createMarkLineGroup({
        pieces: pieces,
        markLineColor: markLineColor,
        show: show,
        position: position
      })
    });
    var visualParams = {
      visuals: visuals,
      lineColor: visualColor,
      color: color,
      dataset: dataset
    };
    options.visualMap = createVisualGroup(visualParams); // dataset格式暂不支持多线段分段
    // if (len > 1) {
    //     let visualMap: any[] = [];
    //     Object.values(datasetParams).forEach((item, cursor) => {
    //         const {
    //             show = true,
    //             position = 'insideStartTop',
    //             visuals = [],
    //             pieces = [], 
    //             names = [], 
    //             lineColor = '#aaa', 
    //             markLineColor = '#aaa',
    //         } = item;
    //         merge(series[cursor], {
    //             markLine: createMarkLineGroup({ pieces, names, markLineColor, show, position }), 
    //         })
    //         visualMap = visualMap.concat(createVisualGroup(visuals, lineColor, cursor))
    //     })
    //     // console.log('options.visualMap', visualMap)
    //     options.visualMap = visualMap;
    // } else if (len === 1) {
    // console.log('series', series)
    // } else {
    //     throw new TypeError('datasetParams must be object or array')
    // }
  }
};

var holidays = {
	"2020-01-01": "元旦",
	"2020-01-24": "除夕",
	"2020-01-25": "春节",
	"2020-01-26": "春节",
	"2020-01-27": "春节",
	"2020-01-28": "春节",
	"2020-01-29": "春节",
	"2020-01-30": "春节",
	"2020-01-31": "春节",
	"2020-02-01": "春节",
	"2020-02-02": "春节",
	"2020-04-04": "清明节",
	"2020-04-05": "清明节",
	"2020-04-06": "清明节",
	"2020-05-01": "劳动节",
	"2020-05-02": "劳动节",
	"2020-05-03": "劳动节",
	"2020-05-04": "劳动节",
	"2020-05-05": "劳动节",
	"2020-06-25": "端午节",
	"2020-06-26": "端午节",
	"2020-06-27": "端午节",
	"2020-10-01": "中秋节",
	"2020-10-02": "国庆节",
	"2020-10-03": "国庆节",
	"2020-10-04": "国庆节",
	"2020-10-05": "国庆节",
	"2020-10-06": "国庆节",
	"2020-10-07": "国庆节",
	"2020-10-08": "国庆节"
};
var restDays = {
	"2020-01-19": "春节前调休",
	"2020-04-26": "劳动节前调休",
	"2020-05-09": "劳动节后调休",
	"2020-06-28": "端午节后调休",
	"2020-09-27": "国庆节前调休",
	"2020-10-10": "国庆节后调休"
};
var workDays = {
};
var weekend = {
	"2020-01-11": "周末",
	"2020-01-12": "周末",
	"2020-01-18": "周末",
	"2020-01-04": "周末",
	"2020-01-05": "周末",
	"2020-02-15": "周末",
	"2020-02-16": "周末",
	"2020-02-22": "周末",
	"2020-02-23": "周末",
	"2020-02-29": "周末",
	"2020-02-08": "周末",
	"2020-02-09": "周末",
	"2020-03-14": "周末",
	"2020-03-15": "周末",
	"2020-03-21": "周末",
	"2020-03-22": "周末",
	"2020-03-28": "周末",
	"2020-03-29": "周末",
	"2020-03-01": "周末",
	"2020-03-07": "周末",
	"2020-03-08": "周末",
	"2020-04-11": "周末",
	"2020-04-12": "周末",
	"2020-04-18": "周末",
	"2020-04-19": "周末",
	"2020-04-25": "周末",
	"2020-05-10": "周末",
	"2020-05-16": "周末",
	"2020-05-17": "周末",
	"2020-05-23": "周末",
	"2020-05-24": "周末",
	"2020-05-30": "周末",
	"2020-05-31": "周末",
	"2020-06-13": "周末",
	"2020-06-14": "周末",
	"2020-06-20": "周末",
	"2020-06-21": "周末",
	"2020-06-06": "周末",
	"2020-06-07": "周末",
	"2020-07-11": "周末",
	"2020-07-12": "周末",
	"2020-07-18": "周末",
	"2020-07-19": "周末",
	"2020-07-25": "周末",
	"2020-07-26": "周末",
	"2020-07-04": "周末",
	"2020-07-05": "周末",
	"2020-08-15": "周末",
	"2020-08-16": "周末",
	"2020-08-22": "周末",
	"2020-08-23": "周末",
	"2020-08-29": "周末",
	"2020-08-30": "周末",
	"2020-08-01": "周末",
	"2020-08-02": "周末",
	"2020-08-08": "周末",
	"2020-08-09": "周末",
	"2020-09-12": "周末",
	"2020-09-13": "周末",
	"2020-09-19": "周末",
	"2020-09-20": "周末",
	"2020-09-26": "周末",
	"2020-09-05": "周末",
	"2020-09-06": "周末",
	"2020-10-11": "周末",
	"2020-10-17": "周末",
	"2020-10-18": "周末",
	"2020-10-24": "周末",
	"2020-10-25": "周末",
	"2020-10-31": "周末",
	"2020-11-14": "周末",
	"2020-11-15": "周末",
	"2020-11-21": "周末",
	"2020-11-22": "周末",
	"2020-11-28": "周末",
	"2020-11-29": "周末",
	"2020-11-01": "周末",
	"2020-11-07": "周末",
	"2020-11-08": "周末",
	"2020-12-12": "周末",
	"2020-12-13": "周末",
	"2020-12-19": "周末",
	"2020-12-20": "周末",
	"2020-12-26": "周末",
	"2020-12-27": "周末",
	"2020-12-05": "周末",
	"2020-12-06": "周末"
};
var currentYearDates = {
	holidays: holidays,
	restDays: restDays,
	workDays: workDays,
	weekend: weekend
};

var holidays$1 = {
	"2019-01-01": "元旦",
	"2019-02-04": "除夕",
	"2019-02-05": "春节",
	"2019-02-06": "春节",
	"2019-02-07": "春节",
	"2019-02-08": "春节",
	"2019-02-09": "春节",
	"2019-02-10": "春节",
	"2019-04-05": "清明节",
	"2019-04-06": "清明节",
	"2019-04-07": "清明节",
	"2019-05-01": "劳动节",
	"2019-05-02": "劳动节",
	"2019-05-03": "劳动节",
	"2019-05-04": "劳动节",
	"2019-06-07": "端午节",
	"2019-06-08": "端午节",
	"2019-06-09": "端午节",
	"2019-09-13": "中秋节",
	"2019-09-14": "中秋节",
	"2019-09-15": "中秋节",
	"2019-10-01": "国庆节",
	"2019-10-02": "国庆节",
	"2019-10-03": "国庆节",
	"2019-10-04": "国庆节",
	"2019-10-05": "国庆节",
	"2019-10-06": "国庆节",
	"2019-10-07": "国庆节"
};
var restDays$1 = {
	"2019-02-02": "春节前调休",
	"2019-02-03": "春节前调休",
	"2019-04-28": "劳动节前调休",
	"2019-05-05": "劳动节后调休",
	"2019-09-29": "国庆节前调休",
	"2019-10-12": "国庆节后调休"
};
var workDays$1 = {
};
var weekend$1 = {
	"2019-01-12": "周末",
	"2019-01-13": "周末",
	"2019-01-19": "周末",
	"2019-01-20": "周末",
	"2019-01-26": "周末",
	"2019-01-27": "周末",
	"2019-01-05": "周末",
	"2019-01-06": "周末",
	"2019-02-16": "周末",
	"2019-02-17": "周末",
	"2019-02-23": "周末",
	"2019-02-24": "周末",
	"2019-03-10": "周末",
	"2019-03-16": "周末",
	"2019-03-17": "周末",
	"2019-03-23": "周末",
	"2019-03-24": "周末",
	"2019-03-30": "周末",
	"2019-03-31": "周末",
	"2019-03-02": "周末",
	"2019-03-03": "周末",
	"2019-03-09": "周末",
	"2019-04-13": "周末",
	"2019-04-14": "周末",
	"2019-04-20": "周末",
	"2019-04-21": "周末",
	"2019-04-27": "周末",
	"2019-05-11": "周末",
	"2019-05-12": "周末",
	"2019-05-18": "周末",
	"2019-05-19": "周末",
	"2019-05-25": "周末",
	"2019-05-26": "周末",
	"2019-06-15": "周末",
	"2019-06-16": "周末",
	"2019-06-22": "周末",
	"2019-06-23": "周末",
	"2019-06-29": "周末",
	"2019-06-30": "周末",
	"2019-06-01": "周末",
	"2019-06-02": "周末",
	"2019-07-13": "周末",
	"2019-07-14": "周末",
	"2019-07-20": "周末",
	"2019-07-21": "周末",
	"2019-07-27": "周末",
	"2019-07-28": "周末",
	"2019-07-06": "周末",
	"2019-07-07": "周末",
	"2019-08-10": "周末",
	"2019-08-11": "周末",
	"2019-08-17": "周末",
	"2019-08-18": "周末",
	"2019-08-24": "周末",
	"2019-08-25": "周末",
	"2019-08-31": "周末",
	"2019-08-03": "周末",
	"2019-08-04": "周末",
	"2019-09-21": "周末",
	"2019-09-22": "周末",
	"2019-09-28": "周末",
	"2019-09-01": "周末",
	"2019-09-07": "周末",
	"2019-09-08": "周末",
	"2019-10-13": "周末",
	"2019-10-19": "周末",
	"2019-10-20": "周末",
	"2019-10-26": "周末",
	"2019-10-27": "周末",
	"2019-11-10": "周末",
	"2019-11-16": "周末",
	"2019-11-17": "周末",
	"2019-11-23": "周末",
	"2019-11-24": "周末",
	"2019-11-30": "周末",
	"2019-11-02": "周末",
	"2019-11-03": "周末",
	"2019-11-09": "周末",
	"2019-12-14": "周末",
	"2019-12-15": "周末",
	"2019-12-21": "周末",
	"2019-12-22": "周末",
	"2019-12-28": "周末",
	"2019-12-29": "周末",
	"2019-12-01": "周末",
	"2019-12-07": "周末",
	"2019-12-08": "周末"
};
var prevYearDates = {
	holidays: holidays$1,
	restDays: restDays$1,
	workDays: workDays$1,
	weekend: weekend$1
};

var holidays$2 = {
	"2018-01-01": "元旦",
	"2018-02-15": "春节",
	"2018-02-16": "春节",
	"2018-02-17": "春节",
	"2018-02-18": "春节",
	"2018-02-19": "春节",
	"2018-02-20": "春节",
	"2018-02-21": "春节",
	"2018-04-05": "清明节",
	"2018-04-06": "清明节",
	"2018-04-07": "清明节",
	"2018-04-29": "劳动节",
	"2018-04-30": "劳动节",
	"2018-05-01": "劳动节",
	"2018-06-16": "端午节",
	"2018-06-17": "端午节",
	"2018-06-18": "端午节",
	"2018-09-22": "中秋节",
	"2018-09-23": "中秋节",
	"2018-09-24": "中秋节",
	"2018-10-01": "国庆节",
	"2018-10-02": "国庆节",
	"2018-10-03": "国庆节",
	"2018-10-04": "国庆节",
	"2018-10-05": "国庆节",
	"2018-10-06": "国庆节",
	"2018-10-07": "国庆节",
	"2018-12-30": "元旦",
	"2018-12-31": "元旦"
};
var restDays$2 = {
	"2018-02-11": "春节前调休",
	"2018-02-24": "春节后调休",
	"2018-04-08": "清明节调休",
	"2018-04-28": "劳动节前调休",
	"2018-09-29": "国庆前调休",
	"2018-09-30": "国庆前调休",
	"2018-12-29": "元旦前调休"
};
var workDays$2 = {
};
var weekend$2 = {
	"2018-01-13": "周末",
	"2018-01-14": "周末",
	"2018-01-20": "周末",
	"2018-01-21": "周末",
	"2018-01-27": "周末",
	"2018-01-28": "周末",
	"2018-01-06": "周末",
	"2018-01-07": "周末",
	"2018-02-10": "周末",
	"2018-02-25": "周末",
	"2018-02-03": "周末",
	"2018-02-04": "周末",
	"2018-03-10": "周末",
	"2018-03-11": "周末",
	"2018-03-17": "周末",
	"2018-03-18": "周末",
	"2018-03-24": "周末",
	"2018-03-25": "周末",
	"2018-03-31": "周末",
	"2018-03-03": "周末",
	"2018-03-04": "周末",
	"2018-04-14": "周末",
	"2018-04-15": "周末",
	"2018-04-21": "周末",
	"2018-04-22": "周末",
	"2018-04-01": "周末",
	"2018-05-12": "周末",
	"2018-05-13": "周末",
	"2018-05-19": "周末",
	"2018-05-20": "周末",
	"2018-05-26": "周末",
	"2018-05-27": "周末",
	"2018-05-05": "周末",
	"2018-05-06": "周末",
	"2018-06-10": "周末",
	"2018-06-23": "周末",
	"2018-06-24": "周末",
	"2018-06-30": "周末",
	"2018-06-02": "周末",
	"2018-06-03": "周末",
	"2018-06-09": "周末",
	"2018-07-14": "周末",
	"2018-07-15": "周末",
	"2018-07-21": "周末",
	"2018-07-22": "周末",
	"2018-07-28": "周末",
	"2018-07-29": "周末",
	"2018-07-01": "周末",
	"2018-07-07": "周末",
	"2018-07-08": "周末",
	"2018-08-11": "周末",
	"2018-08-12": "周末",
	"2018-08-18": "周末",
	"2018-08-19": "周末",
	"2018-08-25": "周末",
	"2018-08-26": "周末",
	"2018-08-04": "周末",
	"2018-08-05": "周末",
	"2018-09-15": "周末",
	"2018-09-16": "周末",
	"2018-09-01": "周末",
	"2018-09-02": "周末",
	"2018-09-08": "周末",
	"2018-09-09": "周末",
	"2018-10-13": "周末",
	"2018-10-14": "周末",
	"2018-10-20": "周末",
	"2018-10-21": "周末",
	"2018-10-27": "周末",
	"2018-10-28": "周末",
	"2018-11-10": "周末",
	"2018-11-11": "周末",
	"2018-11-17": "周末",
	"2018-11-18": "周末",
	"2018-11-24": "周末",
	"2018-11-25": "周末",
	"2018-11-03": "周末",
	"2018-11-04": "周末",
	"2018-12-15": "周末",
	"2018-12-16": "周末",
	"2018-12-22": "周末",
	"2018-12-23": "周末",
	"2018-12-01": "周末",
	"2018-12-02": "周末",
	"2018-12-08": "周末",
	"2018-12-09": "周末"
};
var beforePrevYearDates = {
	holidays: holidays$2,
	restDays: restDays$2,
	workDays: workDays$2,
	weekend: weekend$2
};

var getTime = function getTime(date) {
  return new Date(date).getTime();
}; // 前一天


var getPrevDay = function getPrevDay(date) {
  return new Date(getTime(date) - 24 * 60 * 60 * 1000).getTime();
}; // 后一天


var getNextDay = function getNextDay(date) {
  return new Date(getTime(date) + 24 * 60 * 60 * 1000).getTime();
}; // format YYYY-MM-DD


var formatDate = function formatDate(date) {
  return dayjs(date).format('YYYY-MM-DD');
}; // 数据聚合


var getDates = function getDates() {
  // 今天数据
  var datesCurrent = currentYearDates; // 去年数据

  var datesBefore = prevYearDates; // 前年数据

  var datesBeforePrev = beforePrevYearDates;
  var dates = {
    holidays: {},
    restDays: {},
    workDays: {},
    weekend: {}
  };

  var daysMap = function daysMap(name, dates) {
    dates[name] = Object.assign({}, datesCurrent[name], datesBefore[name], datesBeforePrev[name]);
  };

  Object.keys(dates).forEach(function (key) {
    daysMap(key, dates);
  });
  return dates;
};
/**
 * 判断节假日期中有多少节日名称是重复，并计算重复次数
 * @param days
 */


var holidayDaysMap = function holidayDaysMap(days) {
  var daysDuration = {},
      dateMap = {};
  Object.keys(days).forEach(function (date) {
    var name = days[date];
    var date_year = date.toString().split('-')[0]; // 数据聚合以防几年的节日重叠，如春节

    var map_name = date_year + '-' + name;

    if (!daysDuration[map_name]) {
      daysDuration[map_name] = {
        date: date,
        count: 1
      };
    } else daysDuration[map_name].count += 1;
  });
  Object.keys(daysDuration).map(function (name) {
    var _daysDuration$name = daysDuration[name],
        date = _daysDuration$name.date,
        count = _daysDuration$name.count;
    var dayName = name.split('-')[1];
    dateMap[date] = {
      name: dayName,
      count: count
    };
  });
  return dateMap;
}; // 筛选数据源


var filterSource = function filterSource(dateSource, start, end) {
  var source = {};
  Object.keys(dateSource).forEach(function (date) {
    if (getTime(date) >= start && getTime(date) <= end) {
      source[date] = dateSource[date];
    }
  });
  return source;
}; // 判断调休中是否有周末


var isSingleWeekend = function isSingleWeekend(date, restDays) {
  var prevDay = getPrevDay(date);
  var nextDay = getNextDay(date);
  var momentPrevDay = formatDate(prevDay);
  var momentNextDay = formatDate(nextDay);
  return !!restDays[momentPrevDay] || !!restDays[momentNextDay];
}; // 创建markArea


var createMarkArea = function createMarkArea(name, start, end, source) {
  return [{
    name: name,
    yAxis: null,
    xAxis: source[start]
  }, {
    yAxis: null,
    xAxis: source[end]
  }];
};

var createHolidaySeries = function createHolidaySeries(formatSource, realSource, ranges, show) {
  var showHoliday = ranges.includes('holiday');
  var showWeekend = ranges.includes('weekend');
  var len = realSource.length;

  var _getDates = getDates(),
      holidays = _getDates.holidays,
      weekend = _getDates.weekend,
      restDays = _getDates.restDays; // 日期数据源第一个日期和最后一个日期的timestamp格式


  var _ref = [getTime(formatSource[0]), getTime(formatSource[len - 1])],
      start = _ref[0],
      end = _ref[1]; // 在start和end范围内的节假日

  var allHolidays = {
    holidays: {},
    weekend: {}
  }; // 筛选出在时间范围内的节假日

  allHolidays.holidays = filterSource(holidays, start, end);
  allHolidays.weekend = filterSource(weekend, start, end); // 柱状图数据

  var barData = []; // 节假日markArea部分

  var holidayDateMap = holidayDaysMap(allHolidays.holidays);
  var markAreaData = [];
  var reverseFormatSource = formatSource.reverse();
  var reverseRealSource = realSource.reverse(); // 从后向前遍历

  reverseFormatSource.forEach(function (date, cursor) {
    var order = len - 1 - cursor; // 传统节日

    if (holidayDateMap[date] && showHoliday) {
      var _ref2 = holidayDateMap[date] || {},
          _ref2$count = _ref2.count,
          count = _ref2$count === void 0 ? 0 : _ref2$count,
          _ref2$name = _ref2.name,
          name = _ref2$name === void 0 ? '' : _ref2$name;

      if (count === 1) {
        // 只有一天的情况
        barData[order] = 0;
      } else if (count > 1) {
        // 超过一天的情况
        markAreaData.push(createMarkArea(show ? name : '', cursor, cursor - count + 1, reverseRealSource));
        barData[order] = null;
      }
    } else if (allHolidays.weekend[date] && showWeekend) {
      // 周末
      if (isSingleWeekend(date, restDays)) {
        barData[order] = 0;
      } else if (cursor >= 1 && allHolidays.weekend[reverseFormatSource[cursor]] === '周末' && allHolidays.weekend[reverseFormatSource[cursor - 1]] === '周末') {
        markAreaData.push(createMarkArea(show ? '周末' : '', cursor, cursor - 1, reverseRealSource));
        barData[order] = null;
      } else barData[order] = null;
    } else barData[order] = null;
  });
  return {
    barData: barData,
    markAreaData: markAreaData
  };
};

var config$l = {
  defaultChartProps: {},
  optionHandler: function optionHandler(options, datasetParams) {
    if (datasetParams === void 0) {
      datasetParams = {};
    }

    var source = options.dataset.source,
        series = options.series;
    var _datasetParams = datasetParams,
        _datasetParams$ranges = _datasetParams.ranges,
        ranges = _datasetParams$ranges === void 0 ? ['holiday', 'weekend'] : _datasetParams$ranges,
        _datasetParams$show = _datasetParams.show,
        show = _datasetParams$show === void 0 ? true : _datasetParams$show;

    if (source.length > 1) {
      var realSource = source[0].slice(1);
      var formatSource = realSource.map(function (date) {
        return echarts.format.formatTime('yyyy-MM-dd', date);
      });

      var _createHolidaySeries = createHolidaySeries(formatSource, realSource, ranges, show),
          barData = _createHolidaySeries.barData,
          markAreaData = _createHolidaySeries.markAreaData;

      var backgroundColor = 'rgba(170, 170, 170, 0.08)';
      var barMinHeight = 2000;
      var barWidth = '40%';
      var holidaySeries = {
        type: 'bar',
        data: barData,
        barGap: '-100%',
        barCategoryGap: 0,
        barMinHeight: barMinHeight,
        itemStyle: {
          color: backgroundColor,
          barWidth: barWidth
        },
        markArea: {
          data: markAreaData,
          itemStyle: {
            color: backgroundColor
          },
          label: {
            color: '#000'
          }
        },
        tooltip: {
          show: false
        }
      };
      series.push(holidaySeries);
    }
  }
};

var lines = {
  'line-basic': config$d,
  'line-autoSum': common$1.autoSum,
  'line-autoOther': common$1.autoOther,
  'line-maxTag': common$1.maxTag,
  'line-markLine': config$e,
  'line-peak': config$f,
  'line-calendar': common$1.calendar,
  'line-regression': config$g,
  'line-smooth': config$h,
  'line-hideSymbol': common$1.hideSymbol,
  'line-label': common$1.label,
  'line-dataZoom': common$1.dataZoom,
  'line-autoYAxis': common$1.autoYAxis,
  'line-holiday': config$l,
  'line-area': config$i,
  'line-areaStack': config$j,
  'line-marker': config$k
};

var config$m = {
  defaultChartProps: {
    option: {
      tooltip: {
        axisPointer: {
          type: 'shadow',
          shadowStyle: {
            color: 'rgba(213, 218, 246, 0.25)'
          },
          z: 0
        }
      }
    }
  },
  optionHandler: function optionHandler(options) {
    var dataset = options.dataset;
    var length = dataset.source.length - 1;
    options.series = new Array(length).fill({}).map(function (item, i) {
      return {
        type: 'bar'
      };
    });
  }
};

var config$n = {
  defaultChartProps: {},
  optionHandler: function optionHandler(_ref) {
    var dataset = _ref.dataset,
        series = _ref.series;
    series.forEach(function (item) {
      merge$2(item, {
        type: 'bar',
        barGap: '-100%',
        stack: dataset.source[1][0]
      });
    });
  }
};

var defaultHide = {
  axisLine: {
    show: false // 是否显示坐标轴轴线。

  },
  splitLine: {
    show: false // 是否显示分隔线

  },
  axisTick: {
    show: false
  }
};
var horizontal = {
  xAxis: _extends_1({
    show: false
  }, defaultHide),
  yAxis: _extends_1({
    show: true
  }, defaultHide),
  grid: {
    top: 15
  }
};
var vertical = {
  xAxis: _extends_1({
    show: true
  }, defaultHide),
  yAxis: _extends_1({
    show: false
  }, defaultHide)
};

var hideAxis = function hideAxis(xAxis, yAxis) {
  return chartInReverse(xAxis, yAxis) ? horizontal : vertical;
}; // hideAxis 隐藏 x 轴、y 轴、分隔线


var config$o = {
  defaultChartProps: {},
  optionHandler: function optionHandler(options) {
    var xAxis = options.xAxis,
        yAxis = options.yAxis;
    merge$2(options, hideAxis(xAxis, yAxis));
  }
};

var config$p = {
  defaultChartProps: {},
  optionHandler: function optionHandler(options, datasetParams) {
    var dataset = options.dataset,
        series = options.series,
        xAxis = options.xAxis,
        yAxis = options.yAxis; // 只处理一个系列的情况

    if (series && series.length === 1 && dataset && dataset.source && dataset.source.length > 1) {
      var originArr = [].concat(dataset.source[1]);
      originArr.shift(); // 剔除第一项 标题，取真实的数据，用于计算百分比
      // 在 series 中新增一个序列用于显示 百分比

      var newSeries = chartInReverse(xAxis, yAxis) ? horizontal$1(series, originArr, datasetParams) : vertical$1(series, originArr, datasetParams);
      return merge$2(options, newSeries);
    }
  }
};

function horizontal$1(series, originArr, datasetParams) {
  var _ref = datasetParams || {},
      _ref$barWidth = _ref.barWidth,
      barWidth = _ref$barWidth === void 0 ? 'auto' : _ref$barWidth,
      _ref$barCategoryGap = _ref.barCategoryGap,
      barCategoryGap = _ref$barCategoryGap === void 0 ? 30 : _ref$barCategoryGap;

  series[0].barCategoryGap = barCategoryGap;
  series[0].barWidth = barWidth;
  series[0].barMaxWidth = '40%';
  series.push({
    name: '',
    type: 'pictorialBar',
    symbolBoundingData: 70,
    barWidth: '100%',
    symbolSize: [70, '40%'],
    symbolOffset: [0, '-120%'],
    symbolRepeat: false,
    hoverAnimation: false,
    cursor: 'auto',
    symbol: 'path://M171.571,263.667v-48.81h108.333v48.81l-54.167,19.048L171.571,263.667z',
    color: 'rgba(221, 221, 221, 0.4)',
    emphasis: {
      itemStyle: {
        color: 'rgba(221, 221, 221, 0.4)'
      }
    },
    z: 110,
    tooltip: {
      show: false
    },
    label: {
      position: 'top',
      offset: [0, 10]
    },
    data: calculateRate(originArr, true)
  });
  return {
    series: series
  };
} // 处理 竖向 百分比


function vertical$1(series, originArr, datasetParams) {
  var _ref2 = datasetParams || {},
      _ref2$barWidth = _ref2.barWidth,
      barWidth = _ref2$barWidth === void 0 ? 'auto' : _ref2$barWidth,
      _ref2$barCategoryGap = _ref2.barCategoryGap,
      barCategoryGap = _ref2$barCategoryGap === void 0 ? 30 : _ref2$barCategoryGap;

  series[0].barCategoryGap = barCategoryGap;
  series[0].barWidth = barWidth;
  series[0].barMaxWidth = '40%';
  series.push({
    name: '',
    type: 'pictorialBar',
    symbolBoundingData: 40,
    barWidth: '100%',
    symbolSize: ['50%', 40],
    symbolOffset: ['100%', -25],
    symbolRepeat: false,
    hoverAnimation: false,
    cursor: 'auto',
    symbol: 'path://M0,0 L30,0 L40,40 L30,80 L0,80Z',
    color: 'rgba(221, 221, 221, 0.4)',
    emphasis: {
      itemStyle: {
        color: 'rgba(221, 221, 221, 0.4)'
      }
    },
    z: 110,
    tooltip: {
      show: false
    },
    label: {
      position: 'right',
      offset: [-29, -13]
    },
    data: calculateRate(originArr, false)
  });
  return {
    series: series
  };
} // 根据源数据，计算得出对应百分比的 series 的数据项


function calculateRate(originArr, isReverse) {
  var rateData = arrPercent(originArr, isReverse);
  var seriesRate = rateData.map(function (v) {
    var item = {
      value: 0,
      label: {
        show: true,
        color: '#000',
        formatter: v + '%'
      }
    };
    return item;
  });
  return seriesRate;
} // 根据源数据，计算得出对应百分比数据


function arrPercent(arr, isReverse) {
  var res = [];

  if (arr && Array.isArray(arr)) {
    var newArr = [].concat(arr);
    isReverse && newArr.reverse();

    for (var i = 1; i < newArr.length; i++) {
      var rate = newArr[i] / newArr[i - 1] * 100;
      res.push(rate.toFixed(2));
    }
  }

  isReverse && res.reverse();
  return res;
}

var config$q = {
  defaultChartProps: {
    datasetParams: {
      $tooltip: {
        valueKeys: ['range']
      }
    }
  },
  optionHandler: function optionHandler(options, datasetParams) {
    if (datasetParams === void 0) {
      datasetParams = {};
    }

    var dataset = options.dataset,
        _options$xAxis = options.xAxis,
        xAxis = _options$xAxis === void 0 ? {} : _options$xAxis,
        _options$yAxis = options.yAxis,
        yAxis = _options$yAxis === void 0 ? {} : _options$yAxis,
        _options$showLabel = options.showLabel,
        showLabel = _options$showLabel === void 0 ? false : _options$showLabel;
    var _datasetParams = datasetParams,
        _datasetParams$$rende = _datasetParams.$renderLabel,
        $renderLabel = _datasetParams$$rende === void 0 ? {} : _datasetParams$$rende;

    var _getPureArr = getPureArr(dataset.source),
        pureArr = _getPureArr.pureArr,
        nameArr = _getPureArr.nameArr,
        categoryArr = _getPureArr.categoryArr;

    var isReverse = chartInReverse(xAxis, yAxis);

    var _getConfig = getConfig($renderLabel),
        valueFormat = _getConfig.formatter.series;

    var newSeries = [];
    pureArr.forEach(function (item, i) {
      newSeries = [].concat(newSeries, createSeries(item, nameArr[i], showLabel, isReverse, valueFormat));
    }); // 处理轴类目名称显示

    var axisLine = {
      // 当有负值的时候，不以0作为轴心
      onZero: false
    };

    if (isReverse) {
      options.yAxis = _extends_1({}, yAxis, {
        data: categoryArr,
        axisLine: axisLine
      });
    } else {
      options.xAxis = _extends_1({}, xAxis, {
        data: categoryArr,
        axisLine: axisLine
      });
    }

    return merge$2(options, {
      series: newSeries
    });
  }
};

function getPureArr(arr) {
  var pureArr = cloneDeep(arr);
  var nameArr = [];
  var categoryArr = pureArr.shift(); // 剔除第一项 标题，取数据

  categoryArr.shift();
  pureArr.forEach(function (item) {
    nameArr.push(item.shift());
  });
  return {
    pureArr: pureArr,
    nameArr: nameArr,
    categoryArr: categoryArr
  };
} // 轴数据处理


function dataFormat(data, name, isReverse, valueFormat) {
  var min = []; // 区间的最小值, 堆叠，透明

  var max = []; // 区间的最大值, 堆叠，显示

  var negative = []; // 负值处理，堆叠，显示负值的部分，max仅显示了正值的部分。特殊情况，区间最小值为负值，最大值为正值。

  var minLabel = []; // 显示区间的最小值的 label 数据，在 max 上通过 markpoint 实现，以控制 label 颜色值和显示的柱子颜色值一致，并且显示隐藏有效
  // 对数据排序，后面需要找到整组数据中最小值

  var sortData = cloneDeep(data);
  sortData.sort(function (a, b) {
    return a[0] - b[0];
  });
  data.forEach(function (item, i) {
    // 取哪个值作为透明底层(从0开始)，[-min, +max]->0不需要透明; [-min, -max]->-max到0填充透明；[+min,+max]->0到+min填充透明
    min.push(item[1] <= 0 ? item[1] : item[0] <= 0 ? 0 : item[0]); // 主要处理[-min,+max]情况，填充显示-min的部分。其他情况不需要填充，为0。

    negative.push(item[1] <= 0 || item[0] >= 0 ? 0 : item[0]); // 横向：coord: [offsetx，y]，等同于 xAxis: offsetx, yAxis: y。其中，offsetx 表示偏移值，y 表示bar的索引。
    // 竖向：[x, offsety]

    var coord = isReverse ? [item[0], i] : [i, item[0]];
    minLabel.push({
      value: item[0],
      coord: item[0] || sortData[0][0] ? coord : []
    });
    max.push({
      // // 差值作为叠加值，在透明层的数据上叠加。[-min, +max]->0到max,不需要堆叠进行差值计算; [+min, +max]->+max - +min需要计算差值；[-min,-max]->-min - -max需要计算差值
      value: item[1] <= 0 ? item[0] - item[1] : item[0] <= 0 ? item[1] : item[1] - item[0],
      range: valueFormat(item[0]) + " - " + valueFormat(item[1]),
      name: name,
      label: {
        formatter: valueFormat(item[1])
      },
      itemStyle: {
        color: item[2]
      }
    });
  });
  return {
    min: min,
    max: max,
    negative: negative,
    minLabel: minLabel
  };
} // 生成序列数据


function createSeries(arr, name, showLabel, isReverse, valueFormat) {
  var newSeries = [];

  var _dataFormat = dataFormat(arr, name, isReverse, valueFormat),
      min = _dataFormat.min,
      max = _dataFormat.max,
      minLabel = _dataFormat.minLabel,
      negative = _dataFormat.negative;

  var maxPosition = isReverse ? 'right' : 'top';
  var minPosition = isReverse ? 'left' : 'bottom';
  newSeries = [// 作为堆叠辅助，不显示
  {
    type: 'bar',
    stack: name,
    tooltip: {
      show: false
    },
    // 透明
    itemStyle: {
      barBorderColor: 'rgba(0,0,0,0)',
      color: 'rgba(0,0,0,0)'
    },
    emphasis: {
      itemStyle: {
        barBorderColor: 'rgba(0,0,0,0)',
        color: 'rgba(0,0,0,0)'
      }
    },
    label: {
      show: false
    },
    data: min
  }, // 当区间[负值，正值]时，用于显示负值的部分
  {
    type: 'bar',
    stack: name,
    name: name,
    tooltip: {
      show: false
    },
    label: {
      show: false
    },
    data: negative
  }, // 用于显示正值的部分
  {
    type: 'bar',
    stack: name,
    name: name,
    tooltip: {
      show: true
    },
    label: {
      show: showLabel,
      position: maxPosition
    },
    markPoint: {
      symbol: 'rect',
      // 图形上面的小头隐藏
      symbolSize: 0.000000000000001,
      label: {
        show: showLabel,
        position: minPosition
      },
      data: minLabel
    },
    data: max
  }];
  return newSeries;
}

var config$r = {
  defaultChartProps: {
    datasetParams: {
      $renderLabel: {
        type: '.2percent'
      }
    }
  },
  optionHandler: function optionHandler(options) {
    var _options$dataset$sour = options.dataset.source,
        source = _options$dataset$sour === void 0 ? [] : _options$dataset$sour,
        series = options.series;
    var valArr = source.slice(1);
    var total = valArr.reduce(function (pre, cur) {
      return pre.map(function (val, index) {
        return index === 0 ? val : val + (+cur[index] || 0);
      });
    }, new Array(source[0].length).fill(0));
    var percentVals = valArr.map(function (item) {
      return item.map(function (val, index) {
        return index === 0 ? val : val / (total[index] || 1);
      });
    });
    options.dataset.source = [source[0]].concat(percentVals);
    series.forEach(function (item, index) {
      merge$2(item, {
        stack: source[0][0]
      });
    });
  }
};

var bars = {
  'bar-basic': config$m,
  'bar-label': config$9,
  'bar-hideSymbol': config$8,
  'bar-reverse': config$b,
  'bar-stack': config$n,
  'bar-hideAxis': config$o,
  'bar-percent': config$p,
  'bar-range': config$q,
  'bar-dataZoom': config$7,
  'bar-stackPercent': config$r
};

var config$s = {
  defaultChartProps: {
    option: {
      xAxis: {
        show: false
      }
    }
  },
  optionHandler: function optionHandler(options) {
    var dataset = options.dataset;
    var length = dataset.source.length - 1;
    var series = [];

    for (var index = 0; index < length; index++) {
      var name = dataset.source[index + 1][0];
      series.push({
        type: 'pie',
        radius: [0, '60%'],
        label: {
          formatter: '{b}'
        }
      });
    }

    options.series = series;
  }
};

var config$t = {
  defaultChartProps: {
    option: {}
  },
  optionHandler: function optionHandler(_ref, datasetParams) {
    var series = _ref.series;

    if (datasetParams === void 0) {
      datasetParams = {};
    }

    var _datasetParams = datasetParams,
        _datasetParams$radius = _datasetParams.radius,
        radius = _datasetParams$radius === void 0 ? ['40%', '60%'] : _datasetParams$radius;
    series.forEach(function (item) {
      merge$2(item, {
        radius: radius,
        label: merge$2({}, item.label, {
          formatter: function formatter(params) {
            var name = params.name,
                percent = params.percent;
            return name.replace(/(.{11})(.*)/,  '$1...' ) + "\n" + percent + "%";
          }
        })
      });
    });
  }
};

var config$u = {
  defaultChartProps: {
    option: {}
  },
  optionHandler: function optionHandler(options, datasetParams) {
    if (datasetParams === void 0) {
      datasetParams = {};
    }

    var _datasetParams = datasetParams,
        _datasetParams$radius = _datasetParams.radius,
        radius = _datasetParams$radius === void 0 ? ['40%', '60%'] : _datasetParams$radius,
        _datasetParams$sumKey = _datasetParams.sumKey,
        sumKey = _datasetParams$sumKey === void 0 ? null : _datasetParams$sumKey,
        _datasetParams$name = _datasetParams.name,
        name = _datasetParams$name === void 0 ? '' : _datasetParams$name,
        _datasetParams$value = _datasetParams.value,
        value = _datasetParams$value === void 0 ? '' : _datasetParams$value;
    var series = options.series,
        _options$dataset = options.dataset,
        source = _options$dataset.source,
        target = _options$dataset.target;
    var sourceIndex = sumKey ? target.findIndex(function (_ref) {
      var key = _ref.key;
      return key === sumKey;
    }) : 1;
    var totalSum = value | source[sourceIndex === -1 ? 1 : sourceIndex].reduce(function (sum, count, cursor) {
      return cursor !== 0 && sum + count;
    }, [0]);
    options.graphic = [{
      type: 'text',
      top: '44%',
      left: 'center',
      z: 10,
      style: {
        text: name ? name : '总计',
        textAlign: 'center',
        fill: '#ababab',
        fontSize: 16,
        fontWeight: 'bold'
      }
    }, {
      type: 'text',
      left: 'center',
      top: '50%',
      z: 10,
      style: {
        text: totalSum.toString().replace(/\B(?=(?:\d{3})+$)/g, ','),
        textAlign: 'center',
        fill: '#000',
        fontSize: 20,
        fontWeight: 'bold'
      }
    }];
    series.forEach(function (item) {
      merge$2(item, {
        radius: radius,
        label: merge$2({}, item.label, {
          formatter: function formatter(params) {
            var name = params.name,
                percent = params.percent;
            return name.replace(/(.{11})(.*)/,  '$1...' ) + "\n" + percent + "%";
          }
        })
      });
    });
  }
};

var config$v = {
  defaultChartProps: {},
  optionHandler: function optionHandler(options, datasetParams) {
    if (datasetParams === void 0) {
      datasetParams = {};
    }

    var dataset = options.dataset;
    var _datasetParams = datasetParams,
        _datasetParams$mergeS = _datasetParams.mergeStart,
        mergeStart = _datasetParams$mergeS === void 0 ? 6 : _datasetParams$mergeS,
        _datasetParams$mergeT = _datasetParams.mergeText,
        mergeText = _datasetParams$mergeT === void 0 ? '其他' : _datasetParams$mergeT;
    var _dataset$source = dataset.source,
        nameList = _dataset$source[0],
        _dataset$source$ = _dataset$source[1],
        dataList = _dataset$source$ === void 0 ? [] : _dataset$source$;
    var sum = 0;
    nameList.splice(mergeStart, Infinity, mergeText);

    if (dataList.length - 1 <= mergeStart) {
      return;
    }

    for (var i = mergeStart; i < dataList.length; i++) {
      sum = sum + dataList[i];
    }

    dataList.splice(mergeStart, Infinity, sum);
  }
};

var pies = {
  'pie-basic': config$s,
  'pie-ring': config$t,
  'pie-hideSymbol': common$1.hideSymbol,
  'pie-ringIndicator': config$u,
  'pie-autoOther': config$v
};

var seriesConfigs = {
  line: {
    type: 'line',
    showSymbol: false,
    label: {
      show: false
    }
  },
  bar: {
    type: 'bar',
    label: {
      show: false
    }
  },
  area: {
    type: 'line',
    label: {
      show: false
    },
    areaStyle: {}
  }
}; // 策略，y轴分5段，间隔数向上取整保留一位有效数字，
// max、min设定为两轴共同的最大、最小倍数乘以各自间隔
// 获取取整位数
// number > 0 : 35.05 => 1
// number < 0 : 0.0022 => 3

var getDigits = function getDigits(value) {
  var _value$toString$split = value.toString().split('.'),
      intPart = _value$toString$split[0],
      _value$toString$split2 = _value$toString$split[1],
      decimalPart = _value$toString$split2 === void 0 ? '' : _value$toString$split2;

  if (Math.abs(value) > 1) {
    return intPart.length - 1;
  } else {
    return decimalPart.length - decimalPart.replace(/^0*/, '').length + 1;
  }
};

var getInterval = function getInterval(gap, offset) {
  if (offset === void 0) {
    offset = 0;
  }

  var digits = getDigits(gap);
  var interval = gap;

  if (Math.abs(gap) > 1) {
    var dividend = Math.pow(10, digits - offset);
    var temp = NP.divide(gap, dividend);
    interval = NP.times(Math.ceil(temp), dividend);
  } else {
    var multiplier = Math.pow(10, digits + offset);

    var _temp = NP.times(gap, multiplier);

    interval = NP.divide(Math.ceil(_temp), multiplier);
  }

  return interval;
};

var config$w = {
  defaultChartProps: {
    option: {}
  },
  optionHandler: function optionHandler(options, datasetParams) {
    if (datasetParams === void 0) {
      datasetParams = {};
    }

    var dataset = options.dataset,
        _options$series = options.series,
        series = _options$series === void 0 ? [] : _options$series;
    var _datasetParams = datasetParams,
        _datasetParams$series = _datasetParams.seriesTypes,
        seriesTypes = _datasetParams$series === void 0 ? ['line', 'bar'] : _datasetParams$series;
    var leftMax = 0;
    var leftMin = 0;
    var rightMin = 0;
    var rightMax = 0;

    for (var index = 1, l = dataset.source.length; index < l; index++) {
      var _dataset$source$index = dataset.source[index],
          name = _dataset$source$index[0],
          list = _dataset$source$index.slice(1);

      var type = 'line'; // 右侧轴

      if (index === dataset.source.length - 1) {
        rightMin = Math.min.apply(Math, [rightMin].concat(list));
        rightMax = Math.max.apply(Math, [rightMax].concat(list));
        type = seriesTypes[1];
      } else {
        // 左侧轴
        leftMax = Math.max.apply(Math, [leftMax].concat(list));
        leftMin = Math.min.apply(Math, [leftMin].concat(list));
        type = seriesTypes[0];
      }

      var seriesConfig = seriesConfigs[type] || seriesConfigs.line;
      series.push(_extends_1({}, seriesConfig));
    }

    var leftGap = NP.divide(NP.minus(leftMax, leftMin), 5);
    var leftInterval = getInterval(leftGap);
    var rightGap = NP.divide(NP.minus(rightMax, rightMin), 5);
    rightGap = NP.times(rightGap, NP.divide(leftInterval, leftGap));
    var rightInterval = getInterval(rightGap);
    var maxTimes = Math.max(Math.ceil(leftMax / leftInterval), Math.ceil(rightMax / rightInterval));
    var minTimes = Math.min(Math.floor(leftMin / leftInterval), Math.floor(rightMin / rightInterval));

    if (series.length > 1) {
      series[series.length - 1].yAxisIndex = 1;
    }

    options.series = series;
    options.yAxis = [{
      max: NP.times(leftInterval, maxTimes),
      min: NP.times(leftInterval, minTimes),
      interval: leftInterval,
      type: 'value'
    }, {
      max: NP.times(rightInterval, maxTimes),
      min: NP.times(rightInterval, minTimes),
      interval: rightInterval,
      type: 'value'
    }];
  }
};

var config$x = {
  defaultChartProps: {
    option: {}
  },
  optionHandler: function optionHandler(option) {
    option.yAxis.forEach(function (item, i) {
      item.scale = true;
      delete item.max;
      delete item.min;
      delete item.interval;

      if (i === 1) {
        merge$2(item, {
          splitLine: {
            show: false
          }
        });
      }
    });
  }
};

var doubleY = {
  'doubleY-basic': config$w,
  'doubleY-label': config$9,
  'doubleY-autoYAxis': config$x,
  'doubleY-dataZoom': common$1.dataZoom
};

var config$y = {
  defaultChartProps: {
    option: {}
  },
  optionHandler: function optionHandler(options) {
    var dataset = options.dataset;
    var length = dataset.source.length - 1;
    options.series = new Array(length).fill({}).map(function (item, index) {
      var name = dataset.source[index + 1][0];
      return {
        type: 'scatter'
      };
    });
  }
};

var scatter = {
  'scatter-basic': config$y,
  'scatter-regression': config$g,
  'scatter-dataZoom': config$7
};

var config$z = {
  defaultChartProps: {
    option: {}
  }
};

var config$A = {
  defaultChartProps: {
    option: {}
  }
};

var indicator = {
  'indicator-basic': config$z,
  'indicator-multi': config$A
};

var config$B = {
  defaultChartProps: {
    option: {}
  }
};

var config$C = {
  defaultChartProps: {
    option: {}
  }
};

var indicator$1 = {
  'card-basic': config$B,
  'card-average': config$C
};

var config$D = {
  defaultChartProps: {
    option: {
      xAxis: {
        show: false
      }
    },
    datasetParams: {
      sort: 'default',
      $tooltip: {
        valueKeys: ['value', 'rate']
      }
    }
  },
  optionHandler: function optionHandler(options, datasetParams) {
    var dataset = options.dataset;
    var _datasetParams$$rende = datasetParams.$renderLabel,
        $renderLabel = _datasetParams$$rende === void 0 ? {} : _datasetParams$$rende;
    var sort = datasetParams.sort;
    var length = dataset.source.length - 1;

    var _dataset$source$ = dataset.source[0],
        firstName = _dataset$source$[0],
        names = _dataset$source$.slice(1);

    var _dataset$source$2 = dataset.source[1],
        firstValue = _dataset$source$2[0],
        values = _dataset$source$2.slice(1);

    var _getConfig = getConfig($renderLabel),
        valueFormat = _getConfig.formatter.series;

    var items = names.map(function (name, index) {
      return {
        name: name,
        value: values[index]
      };
    });

    if (!(sort === 'none')) {
      items.sort(function (a, b) {
        return b.value - a.value;
      });
    }

    options.series = new Array(length).fill({}).map(function (item, i) {
      var data = items.map(function (_ref, index) {
        var name = _ref.name,
            value = _ref.value;
        var preValue = items[Math.max(index - 1, 0)].value;
        var rate = renderNumeralMap.percent(value / preValue);
        return {
          name: name,
          value: value,
          rate: "(" + rate + ")"
        };
      });
      return {
        type: 'funnel',
        label: {
          show: true,
          position: 'inside',
          formatter: function formatter(params) {
            var _params$data = params.data;
            _params$data = _params$data === void 0 ? {} : _params$data;
            var _params$data$name = _params$data.name,
                name = _params$data$name === void 0 ? '' : _params$data$name,
                _params$data$value = _params$data.value,
                value = _params$data$value === void 0 ? '' : _params$data$value;
            return name + ' ' + valueFormat(value);
          }
        },
        top: 30,
        bottom: 25,
        sort: sort,
        data: data
      };
    });
  }
};

var config$E = {
  defaultChartProps: {
    option: {
      xAxis: {
        show: false
      }
    },
    datasetParams: {
      sort: 'default',
      $tooltip: {
        valueKeys: ['value', 'rate']
      }
    }
  },
  optionHandler: function optionHandler(options, datasetParams) {
    var dataset = options.dataset;
    var _datasetParams$$rende = datasetParams.$renderLabel,
        $renderLabel = _datasetParams$$rende === void 0 ? {} : _datasetParams$$rende;
    var sort = datasetParams.sort;

    if (dataset.source.length > 3) {
      console.warn('funnel-contrast仅支持两组数据对比!');
    }

    var _getConfig = getConfig($renderLabel),
        valueFormat = _getConfig.formatter.series;

    var _dataset$source$ = dataset.source[0],
        first = _dataset$source$[0],
        names = _dataset$source$.slice(1);

    var generateData = function generateData(index) {
      var values = dataset.source[1][index];
      var items = names.map(function (name, index) {
        return {
          name: name,
          value: values[index]
        };
      });

      if (!(sort === 'none')) {
        items.sort(function (a, b) {
          return b.value - a.value;
        });
      }

      return items.map(function (_ref, index) {
        var name = _ref.name,
            value = _ref.value;
        var preValue = items[Math.max(index - 1, 0)].value;
        var rate = renderNumeralMap.percent(value / preValue);
        return {
          name: name,
          value: value,
          rate: "(" + rate + ")"
        };
      });
    };

    var label = {
      show: true,
      position: 'inside',
      formatter: function formatter(params) {
        var _params$data = params.data;
        _params$data = _params$data === void 0 ? {} : _params$data;
        var _params$data$name = _params$data.name,
            name = _params$data$name === void 0 ? '' : _params$data$name,
            _params$data$value = _params$data.value,
            value = _params$data$value === void 0 ? '' : _params$data$value;
        return name + ' ' + valueFormat(value);
      }
    };
    var leftSerie = {
      type: 'funnel',
      funnelAlign: 'right',
      right: '50%',
      label: label,
      top: 30,
      bottom: 25,
      sort: sort,
      data: generateData(1)
    };
    var rightSerie = {
      type: 'funnel',
      funnelAlign: 'left',
      left: '50%',
      label: label,
      top: 30,
      bottom: 25,
      sort: sort,
      data: generateData(2)
    };
    options.series = [leftSerie, rightSerie];
  }
};

var config$F = {
  defaultChartProps: {
    option: {}
  }
};

var funnels = {
  'funnel-basic': config$D,
  'funnel-contrast': config$E,
  'funnel-column': config$F,
  'funnel-hideSymbol': config$8
};

var config$G = {
  defaultChartProps: {
    option: {
      xAxis: {
        show: false
      },
      yAxis: {
        show: false
      },
      legend: {
        show: false
      },
      tooltip: {
        trigger: 'item'
      }
    }
  },
  optionHandler: function optionHandler(options, datasetParams) {
    if (datasetParams === void 0) {
      datasetParams = {};
    }

    var dataset = options.dataset;
    var _datasetParams = datasetParams,
        _datasetParams$mapTyp = _datasetParams.mapType,
        mapType = _datasetParams$mapTyp === void 0 ? '100000' : _datasetParams$mapTyp,
        _datasetParams$areaCo = _datasetParams.areaColor,
        areaColor = _datasetParams$areaCo === void 0 ? '#eee' : _datasetParams$areaCo,
        _datasetParams$border = _datasetParams.borderColor,
        borderColor = _datasetParams$border === void 0 ? '#fff' : _datasetParams$border;
    var max = 0;
    var min = 0;
    var data = dataset.source[1];

    if (data) {
      for (var i = 1; i < data.length; i++) {
        var value = data[i];
        max = Math.max(max, value);
        min = Math.min(min, value);
      }
    }

    options.visualMap = {
      max: max,
      min: min,
      text: ['多', '少'],
      realtime: false,
      inRange: {
        color: ['#fff', '#5f7af1']
      }
    };
    options.series = [{
      type: 'map',
      //adcode
      mapType: mapType,
      layoutCenter: ['50%', '60%'],
      layoutSize: '100%',
      itemStyle: {
        areaColor: areaColor,
        borderColor: borderColor
      },
      label: {
        formatter: '{b}'
      }
    }];
  }
};

var maps = {
  'map-basic': config$G,
  'map-label': common$1.label
};

var config$H = {
  defaultChartProps: {
    option: {
      xAxis: {
        show: false
      },
      yAxis: {
        show: false
      },
      tooltip: {
        trigger: 'item'
      }
    }
  },
  optionHandler: function optionHandler(options, datasetParams) {
    var _dataOfCategory;

    if (datasetParams === void 0) {
      datasetParams = {};
    }

    var dataset = options.dataset;
    var _datasetParams = datasetParams,
        _datasetParams$repuls = _datasetParams.repulsion,
        repulsion = _datasetParams$repuls === void 0 ? 500 : _datasetParams$repuls,
        _datasetParams$edgeLe = _datasetParams.edgeLength,
        edgeLength = _datasetParams$edgeLe === void 0 ? 180 : _datasetParams$edgeLe;
    console.log('dataset', dataset);
    console.log('options', options);
    var target = dataset.target,
        categoryKey = dataset.categoryKey,
        source = dataset.source,
        links = dataset.links;
    var nameOfCategoryKey = '';
    target === null || target === void 0 ? void 0 : target.forEach(function (item) {
      if (item.key == categoryKey) {
        nameOfCategoryKey = item.name;
      }
    });
    var dataOfCategory = [];
    source.forEach(function (item) {
      if (item[0] == nameOfCategoryKey) {
        dataOfCategory = item.slice(1);
      }
    });
    var dataOfSymbolSize = [];
    source.forEach(function (item) {
      if (item[0] == '圆点尺寸') {
        dataOfSymbolSize = item.slice(1);
      }
    });
    var dataOfX = [];
    source.forEach(function (item) {
      if (item[0] == 'x') {
        dataOfX = item.slice(1);
      }
    });
    var dataOfY = [];
    source.forEach(function (item) {
      if (item[0] == 'y') {
        dataOfY = item.slice(1);
      }
    });
    var nodeArr = [];

    for (var i = 0; i < source[0].slice(1).length; i++) {
      nodeArr.push({});
    }

    nodeArr.forEach(function (item, i) {
      var _source$, _source$2;

      item.id = (_source$ = source[0]) === null || _source$ === void 0 ? void 0 : _source$.slice(1)[i];
      item.value = (_source$2 = source[1]) === null || _source$2 === void 0 ? void 0 : _source$2.slice(1)[i];
      item.category = dataOfCategory[i];
      item.symbolSize = dataOfSymbolSize[i];
      item.x = dataOfX[i];
      item.y = dataOfY[i];
    });
    console.log('nodeArr', nodeArr);
    var categoryNameArr = (_dataOfCategory = dataOfCategory) === null || _dataOfCategory === void 0 ? void 0 : _dataOfCategory.filter(function (item, index) {
      //给分类字段去重 遍历出数组中数字第一次出现的下标,与数字所在数组的下标相比较，
      //为true就是第一次出现
      return dataOfCategory.indexOf(item) === index;
    });
    var nameArr = [];
    categoryNameArr.forEach(function (item) {
      nameArr.push({
        name: item
      });
    }); //nameArr是echart的categories要求的格式

    nodeArr.map(function (item) {
      item.prevCategory = item.category;
      item.category = categoryNameArr.indexOf(item.category); //category需要为数字下标的形式

      return item;
    });
    var valArray = [];
    nodeArr.forEach(function (item) {
      valArray.push(item.value);
    });
    var maxValue = Math.max.apply(Math, valArray);
    nodeArr.map(function (item, i) {
      merge$2(item, {
        prevsymbolSize: item.symbolSize,
        symbolSize: item.symbolSize ? item.symbolSize : item.value * (40 / maxValue > 1 ? 1 : 40 / maxValue)
      });
    });
    var series = [];
    series.push({
      type: 'graph',
      layout: 'force',
      data: categoryKey ? nodeArr : nodeArr.map(function (item) {
        item.category = 0;
        return item;
      }),
      links: links,
      categories: categoryKey ? nameArr : [{
        name: undefined
      }],
      roam: true,
      draggable: true,
      lineStyle: {
        color: 'source',
        curveness: 0,
        width: 1
      },
      force: {
        repulsion: repulsion,
        edgeLength: edgeLength
      },
      labelLayout: {
        hideOverlap: true
      },
      focusNodeAdjacency: true,
      emphasis: {
        focus: 'adjacency',
        label: {
          position: 'right',
          formatter: '{b}'
        },
        lineStyle: {
          width: 5
        }
      }
    });
    options.series = series;
  }
};

var config$I = {
  defaultChartProps: {
    option: {
      xAxis: {
        show: false
      },
      yAxis: {
        show: false
      },
      tooltip: {
        trigger: 'item'
      }
    }
  },
  optionHandler: function optionHandler(options, datasetParams) {
    var _dataOfCategory;

    if (datasetParams === void 0) {
      datasetParams = {};
    }

    var dataset = options.dataset;
    var _datasetParams = datasetParams,
        _datasetParams$repuls = _datasetParams.repulsion,
        repulsion = _datasetParams$repuls === void 0 ? 500 : _datasetParams$repuls,
        _datasetParams$edgeLe = _datasetParams.edgeLength,
        edgeLength = _datasetParams$edgeLe === void 0 ? 180 : _datasetParams$edgeLe;
    var target = dataset.target,
        categoryKey = dataset.categoryKey,
        source = dataset.source,
        links = dataset.links;
    var nameOfCategoryKey = '';
    target === null || target === void 0 ? void 0 : target.forEach(function (item) {
      if (item.key == categoryKey) {
        nameOfCategoryKey = item.name;
      }
    });
    var dataOfCategory = [];
    source.forEach(function (item) {
      if (item[0] == nameOfCategoryKey) {
        dataOfCategory = item.slice(1);
      }
    });
    var dataOfSymbolSize = [];
    source.forEach(function (item) {
      if (item[0] == '圆点尺寸') {
        dataOfSymbolSize = item.slice(1);
      }
    });
    var dataOfX = [];
    source.forEach(function (item) {
      if (item[0] == 'x') {
        dataOfX = item.slice(1);
      }
    });
    var dataOfY = [];
    source.forEach(function (item) {
      if (item[0] == 'y') {
        dataOfY = item.slice(1);
      }
    });
    var nodeArr = [];

    for (var i = 0; i < source[0].slice(1).length; i++) {
      nodeArr.push({});
    }

    nodeArr.forEach(function (item, i) {
      var _source$, _source$2;

      item.id = (_source$ = source[0]) === null || _source$ === void 0 ? void 0 : _source$.slice(1)[i];
      item.value = (_source$2 = source[1]) === null || _source$2 === void 0 ? void 0 : _source$2.slice(1)[i];
      item.category = dataOfCategory[i];
      item.symbolSize = dataOfSymbolSize[i];
      item.x = dataOfX[i];
      item.y = dataOfY[i];
    });
    var categoryNameArr = (_dataOfCategory = dataOfCategory) === null || _dataOfCategory === void 0 ? void 0 : _dataOfCategory.filter(function (item, index) {
      //给分类字段去重 遍历出数组中数字第一次出现的下标,与数字所在数组的下标相比较，
      //为true就是第一次出现
      return dataOfCategory.indexOf(item) === index;
    });
    var nameArr = [];
    categoryNameArr.forEach(function (item) {
      nameArr.push({
        name: item
      });
    }); //nameArr是echart的categories要求的格式

    nodeArr.map(function (item) {
      item.category = categoryNameArr.indexOf(item.category); //category需要为数字下标的形式

      return item;
    });
    var valArray = [];
    nodeArr.forEach(function (item) {
      valArray.push(item.value);
    });
    var maxValue = Math.max.apply(Math, valArray);
    nodeArr.map(function (item, i) {
      merge$2(item, {
        symbolSize: item.prevsymbolSize ? item.prevsymbolSize : item.value * (40 / maxValue > 1 ? 1 : 40 / maxValue)
      });
    });
    var series = [];
    series.push({
      type: 'graph',
      layout: 'circular',
      data: categoryKey ? nodeArr : nodeArr.map(function (item) {
        item.category = 0;
        return item;
      }),
      links: links,
      categories: categoryKey ? nameArr : [{
        name: undefined
      }],
      roam: true,
      draggable: true,
      lineStyle: {
        color: 'source',
        curveness: 0.2,
        width: 1
      },
      force: {
        repulsion: repulsion,
        edgeLength: edgeLength
      },
      labelLayout: {
        hideOverlap: true
      },
      focusNodeAdjacency: true,
      emphasis: {
        focus: 'adjacency',
        label: {
          position: 'right',
          formatter: '{b}'
        },
        lineStyle: {
          width: 5
        }
      }
    });
    options.series = series;
  }
};

var config$J = {
  defaultChartProps: {
    option: {
      xAxis: {
        show: false
      },
      yAxis: {
        show: false
      },
      tooltip: {
        trigger: 'item'
      }
    }
  },
  optionHandler: function optionHandler(options, datasetParams) {
    var _dataOfCategory;

    if (datasetParams === void 0) {
      datasetParams = {};
    }

    var dataset = options.dataset;
    var _datasetParams = datasetParams,
        _datasetParams$repuls = _datasetParams.repulsion,
        repulsion = _datasetParams$repuls === void 0 ? 500 : _datasetParams$repuls,
        _datasetParams$edgeLe = _datasetParams.edgeLength,
        edgeLength = _datasetParams$edgeLe === void 0 ? 180 : _datasetParams$edgeLe;
    var target = dataset.target,
        categoryKey = dataset.categoryKey,
        source = dataset.source,
        links = dataset.links;
    var nameOfCategoryKey = '';
    target === null || target === void 0 ? void 0 : target.forEach(function (item) {
      if (item.key == categoryKey) {
        nameOfCategoryKey = item.name;
      }
    });
    var dataOfCategory = [];
    source.forEach(function (item) {
      if (item[0] == nameOfCategoryKey) {
        dataOfCategory = item.slice(1);
      }
    });
    var dataOfSymbolSize = [];
    source.forEach(function (item) {
      if (item[0] == '圆点尺寸') {
        dataOfSymbolSize = item.slice(1);
      }
    });
    var dataOfX = [];
    source.forEach(function (item) {
      if (item[0] == 'x') {
        dataOfX = item.slice(1);
      }
    });
    var dataOfY = [];
    source.forEach(function (item) {
      if (item[0] == 'y') {
        dataOfY = item.slice(1);
      }
    });
    var nodeArr = [];

    for (var i = 0; i < source[0].slice(1).length; i++) {
      nodeArr.push({});
    }

    nodeArr.forEach(function (item, i) {
      var _source$, _source$2;

      item.id = (_source$ = source[0]) === null || _source$ === void 0 ? void 0 : _source$.slice(1)[i];
      item.value = (_source$2 = source[1]) === null || _source$2 === void 0 ? void 0 : _source$2.slice(1)[i];
      item.category = dataOfCategory[i];
      item.symbolSize = dataOfSymbolSize[i];
      item.x = dataOfX[i];
      item.y = dataOfY[i];
    });
    var categoryNameArr = (_dataOfCategory = dataOfCategory) === null || _dataOfCategory === void 0 ? void 0 : _dataOfCategory.filter(function (item, index) {
      //给分类字段去重 遍历出数组中数字第一次出现的下标,与数字所在数组的下标相比较，
      //为true就是第一次出现
      return dataOfCategory.indexOf(item) === index;
    });
    var nameArr = [];
    categoryNameArr.forEach(function (item) {
      nameArr.push({
        name: item
      });
    }); //nameArr是echart的categories要求的格式

    nodeArr.map(function (item) {
      item.category = categoryNameArr.indexOf(item.category); //category需要为数字下标的形式

      return item;
    });
    var valArray = [];
    nodeArr.forEach(function (item) {
      valArray.push(item.value);
    });
    var maxValue = Math.max.apply(Math, valArray);
    nodeArr.map(function (item, i) {
      merge$2(item, {
        symbolSize: item.symbolSize ? item.symbolSize : item.value * (40 / maxValue > 1 ? 1 : 40 / maxValue),
        x: item.x ? item.x : i < valArray.length / 2 ? 150 * i : 150 * Math.floor(valArray.length / 2) - 150 * (i - Math.floor(valArray.length / 2)),
        y: item.y ? item.y : 80 * i
      });
    });
    var series = [];
    series.push({
      type: 'graph',
      layout: 'none',
      data: categoryKey ? nodeArr : nodeArr.map(function (item) {
        item.category = 0;
        return item;
      }),
      links: links,
      categories: categoryKey ? nameArr : [{
        name: undefined
      }],
      roam: true,
      draggable: true,
      lineStyle: {
        color: 'source',
        curveness: 0.3,
        width: 1
      },
      force: {
        repulsion: repulsion,
        edgeLength: edgeLength
      },
      labelLayout: {
        hideOverlap: true
      },
      focusNodeAdjacency: true,
      emphasis: {
        focus: 'adjacency',
        label: {
          position: 'right',
          formatter: '{b}'
        },
        lineStyle: {
          width: 5
        }
      }
    });
    options.series = series;
  }
};

var graphs = {
  'graph-basic': config$H,
  'graph-circular': config$I,
  'graph-custom': config$J
};

var configs = _extends_1({}, lines, {}, bars, {}, pies, {}, doubleY, {}, tables, {}, scatter, {}, indicator, {}, indicator$1, {}, funnels, {}, maps, {}, graphs);

var superOrders = ['line', 'bar', 'doubleY'];
var subOrders = ['basic', 'autoOther', 'autoSum', 'area', 'areaStack', 'maxTag', 'markLine', 'regression', 'peak', 'stack', 'contrast', // style
'reverse', 'ring', 'smooth', 'symbol', 'label', 'hideSymbol', 'autoYAxis'];
var chartConfigMap = configs;

var generateConfigByType = function generateConfigByType(type) {
  var typeList = [];
  var superTypes = [];
  var subTypes = [];
  type.split('&').forEach(function (item) {
    superTypes.push(item.split('-')[0]);
    subTypes.push(item);
  });
  superTypes = superTypes.map(function (item) {
    return item + '-basic';
  });
  typeList = typeList.concat(superTypes, subTypes).filter(function (item) {
    return item.includes('-');
  }); // sortBy subOrders

  typeList.sort(function (a, b) {
    var index1 = subOrders.indexOf(a.split('-')[1]) === -1 ? Infinity : subOrders.indexOf(a.split('-')[1]);
    var index2 = subOrders.indexOf(b.split('-')[1]) === -1 ? Infinity : subOrders.indexOf(b.split('-')[1]);
    return index1 - index2;
  }); // sortBy superOrders

  typeList.sort(function (a, b) {
    return superOrders.indexOf(a.split('-')[0]) - superOrders.indexOf(b.split('-')[0]);
  });
  typeList = Array.from(new Set(typeList));
  var chartProps = {};
  var handlers = [];
  var resizeHandler = [];
  typeList.forEach(function (type) {
    if (configs[type]) {
      var _chartConfigs$type = configs[type],
          defaultChartProps = _chartConfigs$type.defaultChartProps,
          optionHandler = _chartConfigs$type.optionHandler,
          onResize = _chartConfigs$type.onResize;
      merge$2(chartProps, defaultChartProps);
      optionHandler && handlers.push(optionHandler);
      onResize && resizeHandler.push(onResize);
    } else {
      console.log("\u4E0D\u652F\u6301\u7C7B\u578B " + type);
    }
  });

  var datasetHandler = function datasetHandler(dataset, datasetParams, props) {
    if (datasetParams === void 0) {
      datasetParams = {};
    }

    if (props === void 0) {
      props = {};
    }

    var chartOptions = {
      dataset: dataset
    };
    var isCombineType = typeList.length > 2;
    var globalParams = pick(datasetParams, Object.keys(datasetParams).filter(function (name) {
      return name.startsWith('$');
    }));
    handlers.forEach(function (handler, i) {
      var name = typeList[i].split('-')[1];

      var params = _extends_1({}, globalParams);

      if (isCombineType) {
        merge$2.apply(void 0, [params].concat(datasetParams[name]));
      } else {
        var typeParams = datasetParams[name] ? _extends_1({}, datasetParams[name]) : datasetParams;
        merge$2(params, typeParams);
      }

      handler(chartOptions, params, props);
    });
    return chartOptions;
  };

  return {
    defaultChartProps: chartProps,
    datasetHandler: datasetHandler,
    resizeHandler: resizeHandler
  };
};

var registerType = function registerType(typeConfig) {
  typeConfig && Object.entries(typeConfig).forEach(function (_ref) {
    var name = _ref[0],
        config = _ref[1];
    chartConfigMap[name] = config;
  });
};

var uiLoader;
var mapLoaders = {};
var districtExplorer = null;

var getDistrictExplorer = function getDistrictExplorer() {
  uiLoader = new Promise(function (resolve, reject) {
    districtExplorer && resolve(districtExplorer);
    var url = '//webapi.amap.com/ui/1.1/main.js';
    var el = document.createElement('script');
    el.type = 'text/javascript';
    document.head.append(el);

    el.onload = function () {
      window.AMapUI.loadUI(['geo/DistrictExplorer'], function (DistrictExplorer) {
        districtExplorer = new DistrictExplorer();
        resolve(districtExplorer);
      });
    };

    el.onerror = function () {
      return reject('加载失败');
    };

    el.src = url;
  });
  return uiLoader;
};

var getMap =
/*#__PURE__*/
function () {
  var _ref = asyncToGenerator(
  /*#__PURE__*/
  regenerator.mark(function _callee2(adcode) {
    var explorer, loader;
    return regenerator.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!mapLoaders[adcode]) {
              _context2.next = 2;
              break;
            }

            return _context2.abrupt("return", mapLoaders[adcode]);

          case 2:
            if (!uiLoader) {
              _context2.next = 8;
              break;
            }

            _context2.next = 5;
            return uiLoader;

          case 5:
            _context2.t0 = _context2.sent;
            _context2.next = 11;
            break;

          case 8:
            _context2.next = 10;
            return getDistrictExplorer();

          case 10:
            _context2.t0 = _context2.sent;

          case 11:
            explorer = _context2.t0;
            loader = new Promise(
            /*#__PURE__*/
            function () {
              var _ref2 = asyncToGenerator(
              /*#__PURE__*/
              regenerator.mark(function _callee(resolve, reject) {
                return regenerator.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        explorer.loadAreaNode(adcode, function (err, areaNode) {
                          if (err) {
                            return reject(err);
                          }

                          if (!areaNode) {
                            return reject('查询结果空');
                          }

                          !areaNode && reject('查询结果空');
                          var data = {
                            type: "FeatureCollection",
                            features: areaNode.getSubFeatures()
                          };
                          echarts.registerMap(adcode, data);
                          resolve(data);
                        });

                      case 1:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function (_x2, _x3) {
                return _ref2.apply(this, arguments);
              };
            }());
            mapLoaders[adcode] = loader;
            return _context2.abrupt("return", loader);

          case 15:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getMap(_x) {
    return _ref.apply(this, arguments);
  };
}();

function initPlugin(plugins, dom, cxt, customPluginMap) {
  var pluginMap = {};
  if (!(plugins !== null && plugins !== void 0 && plugins.length)) return pluginMap;
  plugins.forEach(function (item) {
    var _ref = item || {},
        name = _ref.name,
        option = _ref.option;

    var plugin = customPluginMap[name];
    pluginMap[name] = plugin && plugin.init(cxt, dom, option);
  });
  return pluginMap;
}

function disposePlugin(plugins) {
  if (!plugins) return;
  Object.values(plugins).forEach(function (plugin) {
    plugin.dispose && plugin.dispose();
  });
}

function updatePlugin(plugins, options) {
  if (plugins !== null && plugins !== void 0 && plugins.length) return;
  Object.entries(plugins).forEach(function (_ref2) {
    var _options$find;

    var name = _ref2[0],
        plugin = _ref2[1];
    plugin.setOption && plugin.setOption(options === null || options === void 0 ? void 0 : (_options$find = options.find(function (i) {
      return i.name === name;
    })) === null || _options$find === void 0 ? void 0 : _options$find.option);
  });
}

var splitTime = function splitTime(value) {
  return echarts.format.formatTime('yyyy-M-d hh:mm:ss', value).split(/[\-\s\:]/);
};
/**
 * 时间格式化
 * @param dateTexts
 * @param unit
 * @param isFull 是否全部显示
 */


var timeFormat = function timeFormat(dateTexts, unit, isFull) {
  if (unit === void 0) {
    unit = 'd';
  }

  if (isFull === void 0) {
    isFull = false;
  }

  var unitMap = {
    y: 1,
    M: 2,
    d: 3,
    h: 5,
    m: 5,
    s: 6
  };
  var texts = [];

  if (isFull) {
    if (unitMap[unit] > 3) {
      return dateTexts.slice(3, unitMap[unit]).join(':') + '\n' + dateTexts.slice(0, 3).join('-');
    } else {
      return dateTexts.slice(0, unitMap[unit] || 2).join('-');
    }
  }

  switch (unit) {
    case 'y':
      texts = dateTexts[0] + '年';
      break;

    case 'M':
      texts = dateTexts[1] + '月';
      break;

    case 'd':
      texts = dateTexts.slice(1, 3).join('-');
      break;

    case 'h':
      texts = dateTexts[3] + ':00';
      break;

    case 'm':
      texts = dateTexts.slice(3, 5).join(':');
      break;

    case 's':
      texts = dateTexts.slice(3, 6).join(':');
      break;

    default:
      texts = dateTexts.slice(1, 3).join('-');
  }

  return texts;
};

var timeAxis = (function (chartOptions, datasetParams, echarts) {
  var _ref4;

  var _ref = datasetParams || {},
      _ref$$timeAxis = _ref.$timeAxis;

  _ref$$timeAxis = _ref$$timeAxis === void 0 ? {} : _ref$$timeAxis;
  var _ref$$timeAxis$show = _ref$$timeAxis.show,
      show = _ref$$timeAxis$show === void 0 ? false : _ref$$timeAxis$show,
      _ref$$timeAxis$grain = _ref$$timeAxis.grain,
      grain = _ref$$timeAxis$grain === void 0 ? 'd' : _ref$$timeAxis$grain;
  if (!echarts || !show) return;
  var option = merge$2({}, echarts._theme, chartOptions);
  var xAxis = option.xAxis,
      yAxis = option.yAxis; // 时间轴是否为Y轴

  var timeIsYAxis = chartInReverse(xAxis, yAxis); // 显示在轴上的数据index

  var axisDatas = [];
  return _ref4 = {}, _ref4[timeIsYAxis ? 'yAxis' : 'xAxis'] = {
    axisLabel: {
      formatter: function formatter(value, index) {
        var dateTexts = splitTime(value);

        var _ref2 = axisDatas.slice(-1)[0] || {},
            lastIndex = _ref2.index; // 第一个（数据缩放时，第一个index不一定为0）


        if (lastIndex > index) {
          axisDatas = [{
            index: index,
            value: value
          }];
        } else {
          axisDatas.push({
            index: index,
            value: value
          });
        } // 取前一个


        var _ref3 = axisDatas.slice(-2, -1)[0] || {},
            prevIndex = _ref3.index,
            prevValue = _ref3.value;

        var prevDate = splitTime(prevValue); // 第一个
        // 和上一个显示在轴上的日期相比跨年

        if (!prevIndex && prevIndex !== 0 || prevDate[0] !== dateTexts[0]) {
          return timeFormat(dateTexts, grain, true);
        } else if (['h', 'm', 's'].includes(grain) && prevIndex >= 0 && prevDate[2] !== dateTexts[2]) {
          // 跨天
          return timeFormat(dateTexts, grain) + '\n' + timeFormat(dateTexts, 'd');
        } else {
          return timeFormat(dateTexts, grain);
        }
      }
    }
  }, _ref4;
});

function legendSelect (legend, selected, echart) {
  var isBegin = true;

  for (var name in selected) {
    if (selected.hasOwnProperty(name)) {
      if (name === legend) {
        if (selected[name] === true) {
          isBegin = false;
        }
      } else {
        if (selected[name] === false) {
          isBegin = false;
        }
      }
    }
  }

  if (isBegin) {
    for (var _name in selected) {
      if (selected.hasOwnProperty(_name)) {
        if (_name === legend) {
          echart.dispatchAction({
            type: 'legendSelect',
            name: _name
          });
        } else {
          echart.dispatchAction({
            type: 'legendUnSelect',
            name: _name
          });
        }
      }
    }
  } else {
    if (selected[legend]) {
      for (var _name2 in selected) {
        if (selected.hasOwnProperty(_name2)) {
          if (_name2 === legend) {
            echart.dispatchAction({
              type: 'legendSelect',
              name: _name2
            });
          } else {
            echart.dispatchAction({
              type: 'legendUnSelect',
              name: _name2
            });
          }
        }
      }
    } else {
      for (var _name3 in selected) {
        if (selected.hasOwnProperty(_name3)) {
          echart.dispatchAction({
            type: 'legendSelect',
            name: _name3
          });
        }
      }
    }
  }
}

var getStringLength = (function (str, maxLength) {
  if (maxLength === void 0) {
    maxLength = 20;
  }

  var len = str.length;
  var chineseCharLen = 0;
  var enCharLen = 0;

  for (var i = 0; i < len; i++) {
    var charCode = str.charCodeAt(i);

    if (i >= maxLength) {
      enCharLen += 3;
      break;
    }

    if (charCode >= 0 && charCode <= 128) {
      enCharLen += 1;
    } else {
      chineseCharLen += 1;
    }
  }

  return {
    length: chineseCharLen * 2 + enCharLen,
    chineseCharLen: chineseCharLen,
    enCharLen: enCharLen
  };
});

var base = {
  backgroundColor: 'rgba(0,0,0,0)',
  // TODO:图表占据位置
  grid: {
    top: 30,
    left: '3%',
    right: '3%',
    bottom: 30,
    containLabel: true
  },
  tooltip: {
    confine: true,
    show: true,
    trigger: 'axis',
    axisPointer: {
      type: 'line',
      lineStyle: {
        color: 'hsla(231, 51%, 78%, 0.5)'
      }
    },
    borderWidth: 0,
    padding: 10,
    extraCssText: 'box-shadow: rgb(174, 174, 174) 0px 0px 10px; border-radius: 3px; line-height: 21px; padding: 10px 12px 8px',
    borderColor: 'none',
    backgroundColor: 'rgba(255, 255, 255, 0.95)',
    textStyle: {
      // 字体样式
      color: '#666',
      fontSize: 12,
      fontFamily: '"Lucida Grande", "Lucida Sans Unicode", Arial, Helvetica, sans-serif',
      fontWeight: 400
    },
    formatter: tooltip.formatter()
  },
  legend: {
    // 图例默认显示，放在图表底部
    top: 'bottom',
    type: 'scroll',
    itemWidth: 12,
    itemHeight: 3,
    padding: 5,
    icon: 'rect',
    selectedMode: true,
    textStyle: {
      color: 'black',
      // fontWeight: 'bold',
      fontFamily: '"Lucida Grande", "Lucida Sans Unicode", Arial, Helvetica, sans-serif',
      fontSize: 12,
      lineHeight: 18
    },
    formatter: function formatter(text) {
      if (text === void 0) {
        text = '';
      }

      // 图例超过20个字显示...
      var maxLength = 20;
      return text.length > maxLength ? text.substr(0, maxLength) + '...' : text;
    }
  },
  categoryAxis: {
    splitLine: {
      // 默认chart上不显示x轴上的分割线
      show: false
    },
    axisLine: {
      show: true,
      // 轴线为#ccc灰色
      lineStyle: {
        color: '#ccc'
      }
    },
    axisTick: {
      // 轴tick
      show: true,
      lineStyle: {
        color: '#ccc'
      },
      alignWithLabel: true
    },
    axisLabel: {
      // 轴标签设置了默认的字体样式
      color: '#7F7F7F',
      fontFamily: '"Lucida Grande", "Lucida Sans Unicode", Arial, Helvetica, sans-serif',
      fontSize: 12,
      fontWeight: '300'
    },
    triggerEvent: true
  },
  valueAxis: {
    splitLine: {
      // Y轴上默认显示分割线，为点线
      show: true,
      lineStyle: {
        type: 'dotted',
        width: 0.8
      }
    },
    axisLine: {
      // 默认不显示轴线
      show: false,
      lineStyle: {
        color: '#ccc'
      }
    },
    axisTick: {
      // 默认不显示轴tick
      show: false
    },
    axisLabel: {
      // 轴标签设置了默认的字体样式，字体样式同X轴
      color: '#7F7F7F',
      fontFamily: '"Lucida Grande", "Lucida Sans Unicode", Arial, Helvetica, sans-serif',
      fontSize: 12,
      fontWeight: '300'
    },
    triggerEvent: true
  },
  line: {
    seriesLayoutBy: 'row',
    showSymbol: true,
    showAllSymbol: false,
    label: {
      show: true
    }
  },
  pie: {
    seriesLayoutBy: 'row',
    label: {
      show: true
    },
    tooltip: {
      trigger: 'item'
    },
    legend: false
  },
  bar: {
    seriesLayoutBy: 'row',
    barMaxWidth: '55%'
  },
  scatter: {
    seriesLayoutBy: 'row'
  },
  funnel: {
    seriesLayoutBy: 'row',
    tooltip: {
      trigger: 'item'
    }
  },
  map: {
    seriesLayoutBy: 'row'
  },
  wordCloud: {
    seriesLayoutBy: 'row',
    tooltip: {
      trigger: 'item'
    }
  }
};

var generateLegendConfig = function generateLegendConfig(chartOptions, _temp) {
  var _chartOptions$dataset;

  var _ref = _temp === void 0 ? {} : _temp,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'bottom' : _ref$placement,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? 'auto' : _ref$width;

  if (placement === 'bottom') return {};
  var chartLegend = chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions.legend;
  if (chartLegend.show === false) return {};
  var source = (chartOptions === null || chartOptions === void 0 ? void 0 : (_chartOptions$dataset = chartOptions.dataset) === null || _chartOptions$dataset === void 0 ? void 0 : _chartOptions$dataset.source) || [];
  if ((source === null || source === void 0 ? void 0 : source.length) < 2 || !source[1][0]) return {};
  var legendWidth = width;

  if (width === 'auto') {
    var _chartLegend$textStyl;

    var _baseThemeConfig$lege = base.legend,
        _baseThemeConfig$lege2 = _baseThemeConfig$lege.textStyle.fontSize,
        fontSize = _baseThemeConfig$lege2 === void 0 ? 12 : _baseThemeConfig$lege2,
        _baseThemeConfig$lege3 = _baseThemeConfig$lege.itemWidth,
        itemWidth = _baseThemeConfig$lege3 === void 0 ? 12 : _baseThemeConfig$lege3,
        _baseThemeConfig$lege4 = _baseThemeConfig$lege.padding,
        padding = _baseThemeConfig$lege4 === void 0 ? 5 : _baseThemeConfig$lege4;
    var legendFontSize = (chartLegend === null || chartLegend === void 0 ? void 0 : (_chartLegend$textStyl = chartLegend.textStyle) === null || _chartLegend$textStyl === void 0 ? void 0 : _chartLegend$textStyl.fontSize) || fontSize;
    var legendItemWidth = (chartLegend === null || chartLegend === void 0 ? void 0 : chartLegend.itemWidth) || itemWidth;
    var legendItemPadding = (chartLegend === null || chartLegend === void 0 ? void 0 : chartLegend.padding) || padding;
    var longestWord = source.slice(1, source.length).map(function (item) {
      return getStringLength(item[0]);
    }).sort(function (a, b) {
      return b.length - a.length;
    })[0];
    var length = longestWord.length,
        chineseCharLen = longestWord.chineseCharLen,
        enCharLen = longestWord.enCharLen;
    legendWidth = Math.max(Math.floor(length * legendFontSize * 0.55) + (legendItemWidth + (Array.isArray(legendItemPadding) ? legendItemPadding[1] : legendItemPadding)) + (enCharLen / chineseCharLen > 1 ? 30 : 0), 80);
  }

  var config = {};

  switch (placement) {
    case 'top':
    case 'topLeft':
    case 'topRight':
      config = {
        legend: {
          top: 'top'
        },
        grid: {
          top: 40,
          bottom: 15
        }
      };
      if (placement === 'topLeft') config.legend.left = '3%';
      if (placement === 'topRight') config.legend.right = '3%';
      break;

    case 'right':
    case 'rightTop':
    case 'rightBottom':
      config = {
        legend: {
          orient: 'vertical',
          top: 'middle',
          right: 'right'
        },
        grid: {
          right: legendWidth,
          bottom: 15
        }
      };
      if (placement === 'rightTop') config.legend.top = 'top';
      if (placement === 'rightBottom') config.legend.top = 'bottom';
      break;

    case 'left':
    case 'leftTop':
    case 'leftBottom':
      config = {
        legend: {
          orient: 'vertical',
          top: 'middle',
          left: 'left'
        },
        grid: {
          left: legendWidth,
          bottom: 15
        }
      };
      if (placement === 'leftTop') config.legend.top = 'top';
      if (placement === 'leftBottom') config.legend.top = 'bottom';
      break;

    case 'bottomLeft':
    case 'bottomRight':
      config = {
        legend: {}
      };
      if (placement === 'bottomLeft') config.legend.left = 'left';
      if (placement === 'bottomRight') config.legend.left = 'right';
      break;
  }

  return config;
};

var reactRender = ReactDOM.render;
var customTooltip = null;

var renderCustomTooltip = function renderCustomTooltip(echart, param) {
  if (param.componentType === 'series' && param.componentSubType === 'custom' && param.value && param.value[2]) {
    var pos = echart.convertToPixel('grid', [param.value[0], param.value[1]]);

    if (customTooltip) {
      customTooltip.style.display = 'flex';
      customTooltip.style.left = pos[0] + 20 + "px";
      customTooltip.style.top = pos[1] - 30 + "px";
      reactRender(param.value[2], customTooltip);
    } else {
      var container = document.createElement('div');
      container.style.left = pos[0] + 20 + "px";
      container.style.top = pos[1] - 30 + "px";
      container.innerHTML = param.value[2];
      container.className = "custom_tooltip_" + echart.id;
      var instance = document.querySelector("[_echarts_instance_=" + echart.id + "]");

      if (instance) {
        instance.appendChild(container);
        reactRender(param.value[2], container);
      }
    }
  } else if (customTooltip) {
    // 点坐标轴控制隐藏
    customTooltip.style.display = 'none';
  }
};

var triggerCustomListener = function triggerCustomListener(echart) {
  var zr = echart.getZr();
  zr.on('click', function (_ref) {
    var target = _ref.target;
    // 点空白区域控制隐藏
    customTooltip = document.getElementsByClassName("custom_tooltip_" + echart.id)[0];

    if (!target && customTooltip) {
      customTooltip.style.display = 'none';
    }
  });
  echart.on('click', function (param) {
    renderCustomTooltip(echart, param);
  });
};

var triggerLegendSelect = function triggerLegendSelect(echart, reverseSelect) {
  echart.on('legendselectchanged', function (_ref2) {
    var name = _ref2.name,
        selected = _ref2.selected;

    if (reverseSelect === false) {
      legendSelect(name, selected, echart);
    }
  });
};

var isNumber = function isNumber(value) {
  return typeof value === 'number' && !isNaN(value);
};

var showOrHideTip = function showOrHideTip(evt, echart, tipType) {
  var _echart$getOption = echart.getOption(),
      xAxis = _echart$getOption.xAxis;

  var _xAxis$0$type = xAxis[0].type,
      type = _xAxis$0$type === void 0 ? 'category' : _xAxis$0$type;
  var isReverse = type === 'value';
  var pixel = [evt.zrX, evt.zrY];
  var isHide = tipType === 'hideTip';
  var inArea = echart.containPixel({
    seriesIndex: 0
  }, pixel);

  if (evt.zrX && evt.zrX && inArea) {
    var _echart$convertFromPi = echart.convertFromPixel({
      seriesIndex: 0
    }, pixel),
        x = _echart$convertFromPi[0],
        y = _echart$convertFromPi[1];

    isNumber(x) && setTimeout(function () {
      echart.dispatchAction({
        type: tipType,
        seriesIndex: 0,
        dataIndex: isReverse ? parseInt(y) : x
      });
      isHide && echart.dispatchAction({
        type: 'updateAxisPointer',
        currTrigger: 'leave'
      });
    }, isHide ? 500 : 0);
  }
};

var triggerTooltipListener = function triggerTooltipListener(echart) {
  var dom = document.querySelector("[_echarts_instance_=" + echart.id + "]");

  if (dom && isMobile()) {
    dom.addEventListener('touchstart', function (evt) {
      return showOrHideTip(evt, echart, 'showTip');
    });
    dom.addEventListener('touchmove', function (evt) {
      return showOrHideTip(evt, echart, 'showTip');
    });
    dom.addEventListener('touchend', function (evt) {
      return showOrHideTip(evt, echart, 'hideTip');
    });
  }
};

var disposeTooltipListener = function disposeTooltipListener(echart) {
  if (echart && echart.id) {
    var dom = document.querySelector("[_echarts_instance_=" + echart.id + "]");

    if (dom && isMobile()) {
      dom.removeEventListener('touchstart', function (evt) {
        return showOrHideTip(evt, echart, 'showTip');
      });
      dom.removeEventListener('touchmove', function (evt) {
        return showOrHideTip(evt, echart, 'showTip');
      });
      dom.removeEventListener('touchend', function (evt) {
        return showOrHideTip(evt, echart, 'hideTip');
      });
    }
  }
};

var customListener = {
  triggerCustomListener: triggerCustomListener,
  triggerLegendSelect: triggerLegendSelect,
  triggerTooltipListener: triggerTooltipListener,
  disposeTooltipListener: disposeTooltipListener
};

var defaultTheme$1 = _extends_1({}, base, {
  color: ['#5f78ef', '#5AD8A6', '#5D7092', '#F6BD16', '#E86452', '#6DC8EC', '#945FB9', '#FF9845', '#1E9493', '#FF99C3', '#7b68e3', '#38ab30', '#7b9ccc', '#a3d714', '#ca0255', '#a09ae4', '#c313c3', '#e6a356', '#19b9c8', '#cbecc1', '#CDDDFD', '#CDF3E4', '#CED4DE', '#FCEBB9', '#F8D0CB', '#D3EEF9', '#DECFEA', '#FFE0C7', '#BBDEDE', '#FFE0ED']
});

var light$1 = _extends_1({}, base, {
  color: ['#55ACEE', '#4CDFC0', '#FF9945', '#FACF2A', '#788CF0', '#2DCA93', '#FFC57F', '#5F73F3', '#F0938A', '#68D9F0', '#E1B13A', '#AB9EDC', '#71DB9E', '#B99371', '#57D4CF', '#EE7A7A', '#F7E16A', '#409EFF', '#E79734', '#B2C9FF', '#27D29C', '#E0CD9E', '#428CC1', '#DCC510', '#F2BCB5', '#59ABFF', '#7DC050', '#A3E8E5']
});

var retro = _extends_1({}, base, {
  color: ['#5779a3', '#e59244', '#d1605d', '#84b5b2', '#6b9e58', '#e8c960', '#a77d9f', '#f2a2a8', '#967662', '#b8b0ac', '#9aafc8', '#efbe8f', '#e3a09e', '#b5d3d1', '#a6c59b', '#f1dfa0', '#cab1c5', '#f7c7cb', '#c0ada1', '#d4d0cd']
});

var dark$1 = {
  color: ['#55ACEE', '#4CDFC0', '#FF9945', '#FACF2A', '#788CF0', '#2DCA93', '#FFC57F', '#5F73F3', '#F0938A', '#68D9F0', '#E1B13A', '#AB9EDC', '#71DB9E', '#B99371', '#57D4CF', '#EE7A7A', '#F7E16A', '#409EFF', '#E79734', '#B2C9FF', '#27D29C', '#E0CD9E', '#428CC1', '#DCC510', '#F2BCB5', '#59ABFF', '#7DC050', '#A3E8E5'],
  backgroundColor: '#222',
  legend: {
    inactiveColor: '#777',
    textStyle: {
      color: '#a8a8a8'
    }
  },
  categoryAxis: {
    axisLabel: {
      textStyle: {
        color: '#989898'
      }
    },
    axisLine: {
      lineStyle: {
        color: '#777'
      }
    },
    axisTick: {
      lineStyle: {
        color: '#777'
      }
    }
  },
  valueAxis: {
    splitLine: {
      lineStyle: {
        color: '#555'
      }
    },
    axisLabel: {
      textStyle: {
        color: '#989898'
      }
    }
  },
  tooltip: {
    extraCssText: 'box-shadow: rgb(51, 51, 51) 0px 0px 10px; border-radius: 3px; line-height: 20px; padding: 10px 10px 6px',
    backgroundColor: 'rgba(51, 51, 51, 0.95)',
    textStyle: {
      // 字体样式
      color: '#bbb'
    }
  }
};
var dark$2 = merge$2({}, base, dark$1);

/**
 *
 * default 配色同g2
 *
 * light 配色同神策
 *
 * retro 配色同tableau
 *
 * dark 暗黑模式
 */

var themes = {
  "default": defaultTheme$1,
  light: light$1,
  retro: retro,
  dark: dark$2
};

var mobileTheme = {
  grid: {
    top: 15,
    left: '3%',
    right: '3%',
    bottom: 28,
    containLabel: true
  },
  categoryAxis: {
    axisLabel: {
      formatter: function formatter(text) {
        if (text === void 0) {
          text = '';
        }

        if (!text) return text; // 图例超过20个字显示...

        var maxLength = 20;
        return text.length > maxLength ? text.substr(0, maxLength) + '...' : text;
      }
    }
  }
};

var opts = {
  tooltip: {},
  legend: {
    type: 'scroll'
  },
  xAxis: {
    type: 'category'
  },
  yAxis: {
    type: 'value'
  }
};

var css$7 = ".rocketChart {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  font-weight: normal;\n  font-family: 'PingFang SC, Arial, Helvetica, sans-serif'; }\n  .rocketChart * {\n    box-sizing: border-box; }\n  .rocketChart .rocketChart-instance,\n  .rocketChart .rocketChart-domInstance {\n    flex: auto;\n    width: 100%;\n    min-height: 0; }\n    .rocketChart .rocketChart-instance div[class^='custom_tooltip'],\n    .rocketChart .rocketChart-domInstance div[class^='custom_tooltip'] {\n      position: absolute;\n      font-size: 12px;\n      color: #666666;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      overflow: hidden;\n      text-align: center;\n      padding: 8px 12px 8px 17px;\n      background-color: rgba(255, 255, 255, 0.95);\n      border: 1px solid #e8e8e8;\n      border-radius: 4px; }\n      .rocketChart .rocketChart-instance div[class^='custom_tooltip']:before,\n      .rocketChart .rocketChart-domInstance div[class^='custom_tooltip']:before {\n        content: '';\n        display: block;\n        position: absolute;\n        left: 0;\n        top: 0;\n        width: 5px;\n        height: 100%;\n        background: #7389ef; }\n  .rocketChart .rocketChart-top {\n    position: relative; }\n  .rocketChart .rocketChart-title {\n    white-space: nowrap;\n    width: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis; }\n  .rocketChart .rocketChart-subTitle {\n    white-space: nowrap;\n    width: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    font-size: 12px;\n    color: #999; }\n  .rocketChart .rocketChart-toolBar {\n    position: absolute;\n    top: 50%;\n    right: 10px;\n    transform: translateY(-50%); }\n\n.rocketChart-dark {\n  background: #222;\n  color: #ccc; }\n";
styleInject(css$7);

var reactUnmount = ReactDOM.unmountComponentAtNode;
var reactRender$1 = ReactDOM.render; // registerTheme

for (var name in themes) {
  echarts.registerTheme(name, themes[name]);
}

var DOM_ATTRIBUTE_KEY = '_rocketchart-instance_';
var customPluginMap = {};
var instances = {};

var Chart =
/*#__PURE__*/
function () {
  function Chart(chartProps) {
    var _this = this;

    this.disposed = false;
    this.id = '';
    this.chartPropsFromTypes = {};

    this.datasetHandler = function () {
      return {};
    };

    this.plugins = [];
    this.chartOptions = {};
    this.resizeHandler = [];

    this.onChangeType = function (type) {
      var _generateConfigByType = generateConfigByType(type),
          defaultChartProps = _generateConfigByType.defaultChartProps,
          datasetHandler = _generateConfigByType.datasetHandler,
          resizeHandler = _generateConfigByType.resizeHandler;

      var chartEl = _this.chartProps.dom.querySelector('.rocketChart-instance');

      var domEl = _this.chartProps.dom.querySelector('.rocketChart-domInstance');

      _this.chartProps.type = type;

      if (_this.isEChart) {
        reactUnmount(chartEl);
        chartEl.style.display = 'block';
        domEl.style.display = 'none';

        _this.initEchart();
      } else {
        _this.disposeEchart();

        domEl.style.display = 'block';
        chartEl.style.display = 'none';
      }

      _this.resizeHandler = resizeHandler;
      _this.chartPropsFromTypes = defaultChartProps;
      _this.datasetHandler = datasetHandler;
    };

    this.initEchart = function () {
      var _this$chartProps = _this.chartProps,
          dom = _this$chartProps.dom,
          opts = _this$chartProps.opts,
          _this$chartProps$them = _this$chartProps.theme,
          theme = _this$chartProps$them === void 0 ? 'default' : _this$chartProps$them,
          device = _this$chartProps.device,
          plugins = _this$chartProps.plugins;
      var t = theme;

      if (device === 'mobile') {
        t = typeof theme === 'string' ? merge$2({}, themes[theme], mobileTheme) : theme;
      }

      if (!_this.echart || _this.echart.isDisposed()) {
        _this.echart = echarts.init(dom.getElementsByClassName('rocketChart-instance')[0], t, opts);

        _this.bindChartEvent();

        _this.plugins = initPlugin(_this.chartProps.plugins, dom, _this, customPluginMap);
      }
    };

    this.initPlugin = function (plugins) {
      var dom = _this.chartProps.dom;
      _this.plugins = initPlugin(plugins, dom, _this, customPluginMap);
    };

    this.bindChartEvent = function () {
      var _this$chartProps$data, _this$chartProps$data2;

      var reverseSelect = (_this$chartProps$data = _this.chartProps.datasetParams) === null || _this$chartProps$data === void 0 ? void 0 : (_this$chartProps$data2 = _this$chartProps$data.$legend) === null || _this$chartProps$data2 === void 0 ? void 0 : _this$chartProps$data2.reverseSelect;
      customListener.triggerCustomListener(_this.echart);
      customListener.triggerTooltipListener(_this.echart);
      customListener.triggerLegendSelect(_this.echart, reverseSelect);
    };

    this.renderComponent =
    /*#__PURE__*/
    function () {
      var _ref = asyncToGenerator(
      /*#__PURE__*/
      regenerator.mark(function _callee(componentObj) {
        var list;
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (componentObj === void 0) {
                  componentObj = {};
                }

                list = Object.entries(componentObj);
                _context.next = 4;
                return list.forEach(function (_ref2) {
                  var type = _ref2[0],
                      component = _ref2[1];
                  var className = ".rocketChart-" + type;

                  var container = _this.chartProps.dom.querySelector(className);

                  var olderComponent = _this.chartProps[type];

                  if (_this.disposed || !container) {
                    return;
                  } // clear olderComponent


                  if (olderComponent) {
                    if (React.isValidElement(olderComponent)) {
                      !React.isValidElement(component) && reactUnmount(container);
                    } else if (olderComponent._isVue && olderComponent.$el) {
                      olderComponent.$destroy();
                      olderComponent.$el.remove();
                    } else {
                      container.innerHTML = '';
                    }
                  }

                  _this.chartProps[type] = component;

                  if (!component) {
                    return;
                  } // string || HTMLElement


                  if (typeof component === 'string' || component instanceof HTMLElement) {
                    container.innerHTML = '';
                    container.append(component);
                    return;
                  } // React element


                  if (React.isValidElement(component)) {
                    reactRender$1(component, container);
                    return;
                  } // vue element


                  if (component._isVue) {
                    var root = document.createElement('div');
                    container.append(root);
                    component.$mount(root);
                    return;
                  }
                });

              case 4:
                _this.resize();

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();

    this.getChartOptionsByData = function (data) {
      if (data === void 0) {
        data = {
          target: [],
          source: [],
          type: ''
        };
      }

      var formatedData = dataFormate(data, _this.chartProps.formatters);
      var dataset = toDataset(formatedData);

      if (isEqual(dataset.source, [])) {
        return {
          dataset: {
            source: []
          }
        };
      }

      var _this$chartProps$them2 = _this.chartProps.theme,
          theme = _this$chartProps$them2 === void 0 ? 'default' : _this$chartProps$them2;
      var props = {
        themeConfig: typeof theme === 'string' ? themes[theme] : theme
      };

      var options = _this.datasetHandler(dataset, merge$2({}, _this.chartPropsFromTypes.datasetParams, _this.chartProps.datasetParams), props);

      return options;
    };
    /**
     * 不依赖chartOpts参数计算的option
     * @param chartOptions
     * @param datasetParams
     * @param data
     */


    this.getGlobalOption = function (chartOptions, datasetParams, data) {
      // 判断是否有数据
      if (!_this.hasData(data)) return {}; // 背景色

      if (_this.chartProps.dom) {
        _this.chartProps.dom.style.backgroundColor = (datasetParams === null || datasetParams === void 0 ? void 0 : datasetParams.$backgroundColor) || '';
      } // label格式化


      var labelConfig = labelFormat(chartOptions, datasetParams, data, _this.isDoubleY); // 初始：axisLabel、seriesLabel格式化

      var optionList = [labelConfig.config];

      if (_this.isEChart) {
        // tooltip formatter
        var tooltipOption = tooltip.tooltipFormatter(chartOptions, merge$2({}, {
          $tooltip: labelConfig.$tooltip
        }, datasetParams)); // 图例位置

        var legendConfig = generateLegendConfig(chartOptions, datasetParams === null || datasetParams === void 0 ? void 0 : datasetParams.$legend);
        optionList.push(tooltipOption, legendConfig);
      }

      return merge$2.apply(void 0, [{}].concat(optionList));
    };
    /**
     * 依赖所有参数计算的option
     * @param chartOptions
     * @param datasetParams
     * @param data
     */


    this.getLastOption = function () {
      var chartOptions = _this.chartOptions,
          chartProps = _this.chartProps;
      var data = chartProps.data,
          datasetParams = chartProps.datasetParams;
      if (!_this.echart || !_this.hasData(data)) return {};
      var options = merge$2({}, // 时间轴格式化
      timeAxis(chartOptions, datasetParams, _this.echart));
      merge$2(_this.chartOptions, options);
    };
    /**
     * 是否有数据
     */


    this.hasData = function (data) {
      return !(!data || !data.source || !data.target || !data.source.length || !data.target.length);
    };

    this.renderTable = function () {
      var _this$chartProps2 = _this.chartProps,
          dom = _this$chartProps2.dom,
          theme = _this$chartProps2.theme,
          device = _this$chartProps2.device;
      var container = dom.querySelector('.rocketChart-domInstance');
      var tableInstance = React.createElement(Table$1, {
        tableProps: _this.chartOptions.table,
        container: container,
        theme: theme,
        device: device,
        type: _this.chartProps.type
      });
      reactRender$1(tableInstance, container);
    };
    /**
     * 绘制dom类型图表
     */


    this.renderDomChart = function () {
      var _themes$theme;

      var _this$chartProps3 = _this.chartProps,
          dom = _this$chartProps3.dom,
          theme = _this$chartProps3.theme,
          type = _this$chartProps3.type,
          datasetParams = _this$chartProps3.datasetParams,
          data = _this$chartProps3.data,
          device = _this$chartProps3.device,
          option = _this$chartProps3.option;
      var colors = typeof theme === 'string' ? (_themes$theme = themes[theme]) === null || _themes$theme === void 0 ? void 0 : _themes$theme.color : themes["default"].color;
      var container = dom.querySelector('.rocketChart-domInstance');
      var chartProp = {
        theme: theme,
        type: type,
        datasetParams: datasetParams,
        data: data,
        device: device,
        chartOptions: _this.chartOptions,
        colors: colors
      };
      var chartDom = null;

      switch (true) {
        case _this.isTable:
          chartDom = Table$1;
          chartProp = {
            tableProps: _this.chartOptions.table,
            container: container,
            theme: theme,
            device: device,
            type: _this.chartProps.type
          };
          break;

        case _this.isIndicator:
          chartDom = type === 'indicator-basic' ? RocketIndicator : MultiRocketIndicator;
          break;

        case _this.isCard:
          chartDom = Card;
          break;

        case _this.isFunnelColumn:
          chartDom = FunnelColumn;

          var hideSymbol = _this.chartProps.type.includes('funnel-hideSymbol');

          chartProp.hideSymbol = hideSymbol;
          chartProp.option = _extends_1({}, device === 'mobile' ? mobileTheme : {}, {}, option);
          break;
      }

      var chartInstance = React.createElement(chartDom, chartProp);
      reactRender$1(chartInstance, container);
    };

    this.setOption = function (_ref3) {
      var option = _ref3.option,
          _ref3$notMerge = _ref3.notMerge,
          notMerge = _ref3$notMerge === void 0 ? false : _ref3$notMerge,
          _ref3$lazyUpdate = _ref3.lazyUpdate,
          lazyUpdate = _ref3$lazyUpdate === void 0 ? false : _ref3$lazyUpdate,
          _ref3$type = _ref3.type,
          type = _ref3$type === void 0 ? '' : _ref3$type,
          data = _ref3.data,
          datasetParams = _ref3.datasetParams,
          plugins = _ref3.plugins,
          components = objectWithoutPropertiesLoose(_ref3, ["option", "notMerge", "lazyUpdate", "type", "data", "datasetParams", "plugins"]);

      // 不合并option
      if (notMerge) {
        _this.chartProps.datasetParams = datasetParams;
        _this.chartProps.option = option;
      } else {
        _this.chartProps = merge$2({}, _this.chartProps, {
          datasetParams: datasetParams,
          option: option
        });
      }

      if (type) {
        _this.onChangeType(type);
      }

      if (isMobile() && !(type.includes('pie') || type.includes('funnel') || type.includes('table') || type.includes('map'))) {
        option = merge$2(option, {
          tooltip: {
            triggerOn: 'none'
          }
        });
      }

      data && (_this.chartProps.data = data); // 需要重新计算data

      if (type || data || datasetParams) {
        notMerge = true;

        var dataForGraph = _extends_1({}, _this.chartProps.data, {
          type: _this.chartProps.type
        });

        var optionFromData = _this.getChartOptionsByData(dataForGraph); //传type 为兼容关系图


        _this.chartOptions = merge$2({}, opts, _this.chartPropsFromTypes.option, optionFromData, _this.chartProps.option);

        var globalOption = _this.getGlobalOption(_this.chartOptions, merge$2({}, _this.chartPropsFromTypes.datasetParams, _this.chartProps.datasetParams), _this.chartProps.data);

        merge$2(_this.chartOptions, globalOption, option);
      } else if (option) {
        _this.chartOptions = notMerge ? merge$2({}, opts, option) : merge$2(_this.chartOptions, option);
      }

      disableOptions(_this.chartOptions); // TODO: hack YAxis scale max 配置冲突导致样式错乱

      if (type.includes('autoYAxis') && _this.chartOptions.yAxis) {
        // yAxis[]
        if (Array.isArray(_this.chartOptions.yAxis) && _this.chartOptions.yAxis.find(function (item) {
          return item.max;
        })) {
          _this.chartOptions.yAxis.forEach(function (item) {
            return delete item.scale;
          });
        } // yAxis


        if (isObject$2(_this.chartOptions.yAxis) && _this.chartOptions.yAxis.max) {
          delete _this.chartOptions.yAxis.scale;
        }
      }

      _this.renderComponent(components);

      if (!_this.isEChart) {
        _this.renderDomChart();
      } else {
        checkSymbolCount(_this.chartOptions, _this.chartProps.maxSymbolCount);

        _this.renderChart(notMerge, lazyUpdate);
      }

      _this.echart && updatePlugin(_this.plugins, plugins);
    };

    this.renderChart =
    /*#__PURE__*/
    function () {
      var _ref4 = asyncToGenerator(
      /*#__PURE__*/
      regenerator.mark(function _callee2(notMerge, lazyUpdate) {
        var type;
        return regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                type = _this.chartOptions; // 通用功能配置，覆盖用户设置

                _this.getLastOption();

                _this.setCustomerColor();

                if (!_this.chartProps.type.includes('map-')) {
                  _context2.next = 6;
                  break;
                }

                _context2.next = 6;
                return _this.loadMap();

              case 6:
                _this.echart.setOption(_this.chartOptions, notMerge, lazyUpdate);

                _this.echart.resize();

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2, _x3) {
        return _ref4.apply(this, arguments);
      };
    }();

    this.renderNoData =
    /*#__PURE__*/
    asyncToGenerator(
    /*#__PURE__*/
    regenerator.mark(function _callee3() {
      var _this$chartProps4, dom, datasetParams, empty, container, noDataInstance;

      return regenerator.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _this$chartProps4 = _this.chartProps, dom = _this$chartProps4.dom, datasetParams = _this$chartProps4.datasetParams;
              empty = datasetParams === null || datasetParams === void 0 ? void 0 : datasetParams.empty;
              container = dom.querySelector('.rocketChart-instance');
              noDataInstance = React.createElement(NoData, {
                empty: empty
              });
              reactRender$1(noDataInstance, container);

            case 5:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    this.setCustomerColor = function () {
      var _this$chartOptions = _this.chartOptions,
          customerColor = _this$chartOptions.customerColor,
          series = _this$chartOptions.series;

      if (!customerColor || !series) {
        return;
      }

      var dataset = _this.chartOptions.dataset;
      var orderList = dataset.source.slice(1);
      Object.entries(customerColor).forEach(function (_ref6) {
        var name = _ref6[0],
            color = _ref6[1];
        var index = orderList.findIndex(function (item) {
          return item[0] === name;
        });
        var target = series[index];
        target && (target.itemStyle = merge$2({}, target.itemStyle, {
          color: color
        }));
      });
    };
    /**
     * 加载高德地图geoJson
     */


    this.loadMap =
    /*#__PURE__*/
    asyncToGenerator(
    /*#__PURE__*/
    regenerator.mark(function _callee4() {
      var _datasetParams$basic;

      var dataset, _this$chartProps$data3, datasetParams, mapType, locationList, geoJson, _loop, i;

      return regenerator.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (_this.chartProps.type.includes('map-')) {
                _context4.next = 2;
                break;
              }

              return _context4.abrupt("return");

            case 2:
              dataset = _this.chartOptions.dataset;
              _this$chartProps$data3 = _this.chartProps.datasetParams, datasetParams = _this$chartProps$data3 === void 0 ? {} : _this$chartProps$data3;
              mapType = (datasetParams === null || datasetParams === void 0 ? void 0 : (_datasetParams$basic = datasetParams.basic) === null || _datasetParams$basic === void 0 ? void 0 : _datasetParams$basic.mapType) || datasetParams.mapType;
              locationList = dataset.source[0];

              _this.echart.showLoading('default', {
                text: '地图加载中...'
              });

              _context4.prev = 7;
              _context4.next = 10;
              return getMap(mapType);

            case 10:
              geoJson = _context4.sent;

              _loop = function _loop(i) {
                var adcode = locationList[i];
                var item = geoJson.features.find(function (item) {
                  return item.properties.adcode === adcode;
                });
                item && (locationList[i] = item.properties.name);
              };

              for (i = 1; i < locationList.length; i++) {
                _loop(i);
              }

            case 13:
              _context4.prev = 13;

              _this.echart.hideLoading();

              return _context4.finish(13);

            case 16:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, null, [[7,, 13, 16]]);
    }));
    /**
     * 创建标注
     * position: 位置
     * text: 文字
     */

    this.createDataMaker = function (_ref8) {
      var _ref8$position = _ref8.position,
          position = _ref8$position === void 0 ? [0, 0] : _ref8$position,
          _ref8$text = _ref8.text,
          text = _ref8$text === void 0 ? '' : _ref8$text,
          _ref8$point = _ref8.point,
          point = _ref8$point === void 0 ? {} : _ref8$point,
          _ref8$bottom = _ref8.bottom,
          bottom = _ref8$bottom === void 0 ? false : _ref8$bottom,
          _ref8$trigger = _ref8.trigger,
          trigger = _ref8$trigger === void 0 ? 'always' : _ref8$trigger;
      var series = _this.chartOptions.series;

      if (series) {
        var newSeries = series === null || series === void 0 ? void 0 : series.concat({
          type: 'custom',
          name: '标注',
          zlevel: 1,
          encode: {
            x: -1,
            y: 1
          },
          renderItem: function renderItem(params, api) {
            return customDraw.renderDrawItem(api, text, point, bottom, trigger);
          },
          data: trigger === 'click' ? [[].concat(position, [text])] : [position]
        });

        _this.setOption({
          option: {
            series: newSeries
          }
        });
      }
    };

    this.updateData = function (data) {
      if (data === void 0) {
        data = {
          target: [],
          source: []
        };
      }

      _this.setOption({
        data: data,
        option: {}
      });
    };

    this.mergePlugin = function (options) {
      if (options === void 0) {
        options = {};
      }

      if (_this.disposed) {
        return;
      }

      _this.echart.setOption(options, false);
    };

    this.disposeEchart = function () {
      if (_this.echart) {
        // 注销移动端tooltip监听z
        customListener.disposeTooltipListener(_this.echart);

        _this.echart.dispose();

        _this.echart = null;
      }
    };

    this.dispose = function () {
      if (_this.disposed) {
        return;
      } // 卸载插件


      disposePlugin(_this.plugins);
      var dom = _this.chartProps.dom;
      reactUnmount(dom.getElementsByClassName('rocketChart-domInstance')[0]);

      _this.disposeEchart();

      _this.clearComponents();

      dom.removeAttribute(DOM_ATTRIBUTE_KEY);
      dom.classList.remove('rocketChart', 'rocketChart-dark'); // dom.innerHTML = '';

      _this.disposed = true;
      delete instances[_this.id];
    };

    this.clear = function () {
      var _this$echart;

      if (_this.disposed) {
        return;
      }

      _this.clearComponents();

      _this.chartOptions.series = [];
      _this.chartOptions.dataset = [];
      (_this$echart = _this.echart) === null || _this$echart === void 0 ? void 0 : _this$echart.clear();
    };

    this.getDataURL = function () {
      var title = _this.chartProps.title;
      html2canvas(_this.chartProps.dom).then(function (canvas) {
        var filename = typeof title === 'string' ? title : +new Date();
        var img = document.createElement('a');
        img.download = filename + ".jpeg";
        img.href = canvas.toDataURL();
        img.click();
      });
    };

    this.resize = function (_temp) {
      var _ref9 = _temp === void 0 ? {} : _temp,
          width = _ref9.width,
          height = _ref9.height;

      width && (_this.chartProps.dom.style.width = width + "px");
      height && (_this.chartProps.dom.style.height = height + "px");

      if (_this.isTable) {
        _this.renderTable();
      }

      if (_this.echart) {
        _this.echart.resize();

        if (_this.resizeHandler) {
          _this.resizeHandler.forEach(function (Handler) {
            Handler(_this.echart, _this.chartOptions, _this.chartProps);
          });
        }
      }
    };

    this.getOption = function () {
      var type = _this.chartProps.type;
      var table = _this.chartOptions.table;

      var option = _this.echart && _this.echart.getOption();

      return cloneDeep(_extends_1({
        type: type
      }, option, {
        table: table
      }));
    };

    this.getDom = function () {
      return _this.chartProps.dom;
    };

    this.getWidth = function () {
      return _this.chartProps.dom.offsetWidth;
    };

    this.getHeight = function () {
      return _this.chartProps.dom.offsetHeight;
    };

    this.isDisposed = function () {
      return _this.disposed;
    };

    var device = chartProps.device || (isMobile() ? 'mobile' : 'desktop');
    this.chartProps = _extends_1({}, chartProps, {
      device: device
    });
    this.init();
  }

  var _proto = Chart.prototype;

  _proto.init = function init() {
    var _dom$classList;

    var _this$chartProps5 = this.chartProps,
        dom = _this$chartProps5.dom,
        type = _this$chartProps5.type,
        _this$chartProps5$opt = _this$chartProps5.option,
        option = _this$chartProps5$opt === void 0 ? {} : _this$chartProps5$opt,
        data = _this$chartProps5.data,
        _this$chartProps5$the = _this$chartProps5.theme,
        theme = _this$chartProps5$the === void 0 ? 'default' : _this$chartProps5$the,
        title = _this$chartProps5.title,
        customComponent = _this$chartProps5.customComponent,
        footer = _this$chartProps5.footer,
        toolBar = _this$chartProps5.toolBar,
        plugins = _this$chartProps5.plugins,
        subTitle = _this$chartProps5.subTitle;
    var id = +new Date() + '';
    dom.setAttribute(DOM_ATTRIBUTE_KEY, id);
    var classList = theme === 'dark' ? ['rocketChart', 'rocketChart-dark'] : ['rocketChart'];

    (_dom$classList = dom.classList).add.apply(_dom$classList, classList);

    dom.innerHTML = "\n      <div class=\"rocketChart-top\">\n        <div class=\"rocketChart-title\"></div>\n        <div class=\"rocketChart-toolBar\"></div>\n      </div>\n      <div class=\"rocketChart-subTitle\"></div>\n      <div class=\"rocketChart-customComponent\"></div>\n      <div class=\"rocketChart-instance\"></div>\n      <div class=\"rocketChart-domInstance\"></div>\n      <div class=\"rocketChart-footer\"></div>\n    ";
    this.id = id;
    this.setOption({
      type: type,
      option: option,
      data: data,
      title: title,
      customComponent: customComponent,
      footer: footer,
      subTitle: subTitle,
      toolBar: toolBar,
      plugins: plugins
    });
    instances[id] = this;
  };

  _proto.clearComponents = function clearComponents() {
    this.renderComponent({
      title: null,
      toolBar: null,
      customComponent: null,
      footer: null,
      subTitle: null
    });
  };

  createClass(Chart, [{
    key: "isDoubleY",
    get: function get() {
      return this.chartProps.type.includes('doubleY');
    }
  }, {
    key: "isTable",
    get: function get() {
      return this.chartProps.type.includes('table');
    }
  }, {
    key: "isIndicator",
    get: function get() {
      return this.chartProps.type.startsWith('indicator');
    }
  }, {
    key: "isFunnelColumn",
    get: function get() {
      return this.chartProps.type.includes('funnel-column');
    }
  }, {
    key: "isCard",
    get: function get() {
      return this.chartProps.type.includes('card');
    }
  }, {
    key: "isEChart",
    get: function get() {
      return !(this.isTable || this.isIndicator || this.isFunnelColumn || this.isCard);
    }
  }]);

  return Chart;
}();

function registerPlugin(name, type) {
  customPluginMap[name] = type;
}

function getInstanceByDom(dom) {
  var id = dom.getAttribute(DOM_ATTRIBUTE_KEY);
  return id ? instances[id] : null;
}

function init(chartProps) {
  var dom = chartProps.dom;
  var instance = getInstanceByDom(dom);
  return instance || new Chart(chartProps);
}

var index$1 = {
  init: init,
  getInstanceByDom: getInstanceByDom,
  echarts: echarts,
  registerPlugin: registerPlugin,
  registerType: registerType
};

export default index$1;
//# sourceMappingURL=index.js.map
